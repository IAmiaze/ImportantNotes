CREATE OR REPLACE PACKAGE BODY EMOB.GLOBAL_CBS_ALL_API
IS
    PROCEDURE API_XML_LOG (pOprType        IN     VARCHAR2,
                           pRefNo          IN     VARCHAR2,
                           pDrAcNo         IN     VARCHAR2,
                           pCrAcNo         IN     VARCHAR2,
                           pFileId         IN     NUMBER,
                           pInXMl          IN     CLOB,
                           pOutXml         IN     CLOB,
                           pDbMessage      IN     VARCHAR2,
                           pErrorMessage   IN     VARCHAR2,
                           pLogId          IN     VARCHAR2 DEFAULT NULL,
                           pNotifyFlag        OUT VARCHAR2,
                           pNotifyMsg         OUT VARCHAR2)
    IS
        PRAGMA AUTONOMOUS_TRANSACTION;
        pOracleMessage   VARCHAR2 (1024);
        vMyException     EXCEPTION;
    BEGIN
        BEGIN
            BEGIN
                INSERT INTO EMOB.MB_API_INOUT_XML_LOG (FILE_ID,
                                                       DOC_NUM,
                                                       DR_AC_NO,
                                                       CR_AC_NO,
                                                       IN_XML,
                                                       OUT_XML,
                                                       OPR_TYPE,
                                                       LOG_ID,
                                                       ORACLE_MESSAGE,
                                                       CUSTOM_MESSAGE)
                     VALUES (pFileId,
                             pRefNo,
                             pDrAcNo,
                             pCrAcNo,
                             pInXMl,
                             pOutXml,
                             pOprType,
                             pLogId,
                             pDbMessage,
                             pErrorMessage);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pOracleMessage := SQLERRM;
                    pNotifyMsg := 'API Log Creation Problem ' || SQLERRM;
                    RAISE vMyException;
            END;

            COMMIT;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pNotifyFlag := 'F';
    END;



    PROCEDURE BALANCE_INQUIRY_API (pAcNo               VARCHAR2,
                                   pLogId              VARCHAR2,
                                   pAvailableBal   OUT NUMBER,
                                   pLienBal        OUT VARCHAR2,
                                   pCustId         OUT VARCHAR2,
                                   pCustName       OUT VARCHAR2,
                                   pAcStatus       OUT VARCHAR2,
                                   pSchemeCode     OUT VARCHAR2,
                                   pErrorFlag      OUT VARCHAR2,
                                   pErrorMsg       OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'N';

        --- 2251923125001

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:GetAccountInquiry>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:accountNumber>'
            || pAcNo
            || '</xsd:accountNumber>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>
            
         </axis:request>

      </axis:GetAccountInquiry>

   </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- '/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope, /*
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123',*/
                    p_transfer_timeout   => 20);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'BALINQ',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'BALINQ',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                          SELECT avail.AVAILABLE_BALANCE,
                                 lien.LIEN_BALANCE,
                                 custid.CUST_ID,
                                 scheme.SCHEME_CODE,
                                 custName.CUST_NAME,
                                 acstatus.AC_STATUS,
                                 rescode.RES_CODE,
                                 resmsg.RES_MSG
                            INTO pAvailableBal,
                                 pLienBal,
                                 pCustId,
                                 pSchemeCode,
                                 pCustName,
                                 pAcStatus,
                                 vResCode,
                                 vResMsg
                            FROM XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:accountBalances[2]//ax237:amountValue[1]'
                                     PASSING vOutXml1
                                     COLUMNS AVAILABLE_BALANCE    VARCHAR2 (1024) PATH '/ax237:amountValue')
                                 avail,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:accountBalances[5]//ax237:amountValue[1]'
                                     PASSING vOutXml1
                                     COLUMNS LIEN_BALANCE         VARCHAR2 (1024) PATH '/ax237:amountValue')
                                 lien,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:custId'
                                     PASSING vOutXml1
                                     COLUMNS CUST_ID              VARCHAR2 (1024) PATH '/ax237:custId')
                                 custid,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:schemeCode'
                                     PASSING vOutXml1
                                     COLUMNS SCHEME_CODE          VARCHAR2 (1024) PATH '/ax237:schemeCode')
                                 scheme,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:custName'
                                     PASSING vOutXml1
                                     COLUMNS CUST_NAME            VARCHAR2 (1024) PATH '/ax237:custName')
                                 custName,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:bankAccountStatusCode'
                                     PASSING vOutXml1
                                     COLUMNS AC_STATUS            VARCHAR2 (1024) PATH '/ax237:bankAccountStatusCode')
                                 acstatus,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:responseCode'
                                     PASSING vOutXml1
                                     COLUMNS RES_CODE             VARCHAR2 (1024) PATH '/ax237:responseCode')
                                 rescode,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax237"),
                                     '//ns:GetAccountInquiryResponse//ax237:responseMessage'
                                     PASSING vOutXml1
                                     COLUMNS RES_MSG              VARCHAR2 (1024) PATH '/ax237:responseMessage')
                                 resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'BALINQ',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;
        END;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS(Balance Inquiry)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE BALANCE_INQUIRY_API_NEW (pAcNo               VARCHAR2,
                                       pLogId              VARCHAR2,
                                       pAvailableBal   OUT NUMBER,
                                       pLienBal        OUT VARCHAR2,
                                       pCustId         OUT VARCHAR2,
                                       pCustName       OUT VARCHAR2,
                                       pAcStatus       OUT VARCHAR2,
                                       pSchemeCode     OUT VARCHAR2,
                                       pSchemeType     OUT VARCHAR2,
                                       pErrorFlag      OUT VARCHAR2,
                                       pErrorMsg       OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'N';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>
   <soapenv:Body>

      <axis:GetAccountInquiry>

         <!--Optional:-->
         <axis:request>
            <!--Optional:-->

            <xsd:accountNumber>'
            || pAcNo
            || '</xsd:accountNumber>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:GetAccountInquiry>

   </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- 'vApiUrl || '/cApps/services/CBLFIWebServices', ---
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --vApiUrl || '/cApps/services/CBLFIWebServices?wsdl', ----
                    p_envelope           => l_envelope, /*
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123',*/
                    p_transfer_timeout   => 20);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'BALINQ',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'BALINQ',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                          SELECT avail.AVAILABLE_BALANCE,
                                 lien.LIEN_BALANCE,
                                 custid.CUST_ID,
                                 scheme.SCHEME_CODE,
                                 schemetype.SCHEME_TYPE,
                                 custName.CUST_NAME,
                                 acstatus.AC_STATUS,
                                 rescode.RES_CODE,
                                 resmsg.RES_MSG
                            INTO pAvailableBal,
                                 pLienBal,
                                 pCustId,
                                 pSchemeCode,
                                 pSchemeType,
                                 pCustName,
                                 pAcStatus,
                                 vResCode,
                                 vResMsg
                            FROM XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:accountBalances[2]//ax219:amountValue[1]'
                                     PASSING vOutXml1
                                     COLUMNS AVAILABLE_BALANCE    VARCHAR2 (1024) PATH '/ax219:amountValue')
                                 avail,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:accountBalances[2]//ax219:amountValue[1]'
                                     PASSING vOutXml1
                                     COLUMNS LIEN_BALANCE         VARCHAR2 (1024) PATH '/ax219:amountValue')
                                 lien,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:custId'
                                     PASSING vOutXml1
                                     COLUMNS CUST_ID              VARCHAR2 (1024) PATH '/ax219:custId')
                                 custid,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:schemeCode'
                                     PASSING vOutXml1
                                     COLUMNS SCHEME_CODE          VARCHAR2 (1024) PATH '/ax219:schemeCode')
                                 scheme,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:schemeType'
                                     PASSING vOutXml1
                                     COLUMNS SCHEME_TYPE          VARCHAR2 (1024) PATH '/ax219:schemeType')
                                 schemetype,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:custName'
                                     PASSING vOutXml1
                                     COLUMNS CUST_NAME            VARCHAR2 (1024) PATH '/ax219:custName')
                                 custName,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:bankAccountStatusCode'
                                     PASSING vOutXml1
                                     COLUMNS AC_STATUS            VARCHAR2 (1024) PATH '/ax219:bankAccountStatusCode')
                                 acstatus,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:responseCode'
                                     PASSING vOutXml1
                                     COLUMNS RES_CODE             VARCHAR2 (1024) PATH '/ax219:responseCode')
                                 rescode,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://fi/xsd' AS "ax219"),
                                     '//ns:GetAccountInquiryResponse//ax219:responseMessage'
                                     PASSING vOutXml1
                                     COLUMNS RES_MSG              VARCHAR2 (1024) PATH '/ax219:responseMessage')
                                 resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'BALINQ',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS(C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CIF_CREATION_API (pCustNo          VARCHAR2,
                                pLogId           VARCHAR2,
                                pAppUser         VARCHAR2,
                                pResCode     OUT VARCHAR2,
                                pCustId      OUT VARCHAR2,
                                pErrorFlag   OUT VARCHAR2,
                                pErrorMsg    OUT VARCHAR2)
    IS
        vName               VARCHAR2 (1024);
        l_envelope          VARCHAR2 (32700);
        vErrorMsg           VARCHAR2 (1024);
        l_envelope2         VARCHAR2 (32700);
        l_envelope3         VARCHAR2 (32700);
        l_envelope4         VARCHAR2 (32700);
        l_clob_data         VARCHAR2 (32700);
        vOutXml1            XMLTYPE;
        vUnique             VARCHAR2 (10);
        vResCode            VARCHAR2 (10);
        vResMsg             VARCHAR2 (1024);
        vFileId             NUMBER;
        vRelationShip       VARCHAR2 (100);
        vRelationShipCat    VARCHAR2 (100);
        vApiUrl             VARCHAR2 (1024);
        vMinorflag          VARCHAR2 (10);
        vAge                NUMBER;
        vGurdianCode        VARCHAR2 (400);
        vRelType            VARCHAR2 (1);
        vGurdianName        VARCHAR2 (400);
        vSeniorCitigent     VARCHAR2 (2) := 'N';
        vResErrMessage      VARCHAR2 (1024);
        vConstitutionCode   VARCHAR2 (100);
        vSalutation         VARCHAR2 (100);
        vMyException        EXCEPTION;
        pOracleMessage      VARCHAR2 (1024);
        l_envelop5          CLOB;
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'S';

        FOR i
            IN (SELECT TO_CHAR (CUST_DOB, 'DD')       DAY,
                       TO_CHAR (CUST_DOB, 'MM')       MON,
                       TO_CHAR (CUST_DOB, 'YYYY')     YR
                  FROM EMOB.MB_CUSTOMER_MST
                 WHERE CUST_NO = pCustNo)
        LOOP
            l_envelope :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:cbsCustomerCreation>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:annualRevenue>0</xsd:annualRevenue>

            <!--Optional:-->

            <xsd:availableCrLimit>0</xsd:availableCrLimit>

            <!--Optional:-->

            <xsd:bBKSegCode></xsd:bBKSegCode>

            <!--Optional:-->

            <xsd:birthDt>'
                || i.DAY
                || '</xsd:birthDt>

            <!--Optional:-->

            <xsd:birthMonth>'
                || i.MON
                || '</xsd:birthMonth>

            <!--Optional:-->

            <xsd:birthYear>'
                || i.YR
                || '</xsd:birthYear>';
        END LOOP;

        FOR j
            IN (SELECT CBS_ADDRESS_TYPE
                           ADDRESS_TYPE,
                       ADD_LINE1,
                       ADD_LINE2,
                       UPPER (NVL (SUBSTR (CITY, 1, 5), 'DHAKA'))
                           CITY,
                       NVL (POSTAL_CODE, '1207')
                           POST_CODE,
                       UPPER (NVL (STATE, 'DHAKA'))
                           STATE,
                       NVL (PREF_ADDR, 'Y')
                           PREF_ADDR
                  --'N' PREF_ADDR



                  FROM EMOB.MB_ADDRESS_MST a, EMOB.ST_ADDRESS_TYPE b
                 WHERE ref_no = pCustNo AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                UNION ALL
                SELECT 'Future/OnSite'
                           ADDRESS_TYPE,
                       ADD_LINE1,
                       ADD_LINE2,
                       UPPER (NVL (SUBSTR (CITY, 1, 5), 'DHAKA'))
                           CITY,
                       NVL (POSTAL_CODE, '1207')
                           POST_CODE,
                       UPPER (NVL (STATE, 'DHAKA'))
                           STATE,
                       'N'
                           PREF_ADDR
                  FROM EMOB.MB_ADDRESS_MST a, EMOB.ST_ADDRESS_TYPE b
                 WHERE     ref_no = pCustNo
                       AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                       AND a.ADDRESS_TYPE = 'PRS')
        LOOP
            l_clob_data :=
                   '<xsd:cbsAddressInfoRequestList>

               <!--Optional:-->

               <xsd:addrCategory>'
                || j.ADDRESS_TYPE
                || '</xsd:addrCategory>

               <!--Optional:-->

               <xsd:addrLine1>'
                || j.ADD_LINE1
                || '</xsd:addrLine1>

               <!--Optional:-->

               <xsd:addrLine2>'
                || j.ADD_LINE2
                || '</xsd:addrLine2>

               <!--Optional:-->
               <xsd:addrLine3></xsd:addrLine3>
               <!--Optional:-->
               
               <xsd:city>'
                || j.CITY
                || '</xsd:city>
               
               <!--Optional:-->
               <xsd:country>BD</xsd:country>
               
               <!--Optional:-->
               <xsd:freeTextLabel>'
                || j.ADDRESS_TYPE
                || '</xsd:freeTextLabel>
               <!--Optional:-->

               <xsd:holdMailFlag>N</xsd:holdMailFlag>

               <!--Optional:-->

               <xsd:isAddressProofReceived>N</xsd:isAddressProofReceived>

               <!--Optional:-->

               <xsd:isAddressVerified>Y</xsd:isAddressVerified>

               <!--Optional:-->

               <xsd:postalCode>'
                || j.POST_CODE
                || '</xsd:postalCode>

               <!--Optional:-->

               <xsd:prefAddr>'
                || j.PREF_ADDR
                || '</xsd:prefAddr>
               
               <!--Optional:-->
               <xsd:prefFormat>FREE_TEXT_FORMAT</xsd:prefFormat>
               <!--Optional:-->
               
               <xsd:startDt>2020-03-03T00:00:00.000</xsd:startDt>

               <!--Optional:-->
               <xsd:state>'
                || j.STATE
                || '</xsd:state>
               <!--Optional:-->
               
               <xsd:town>'
                || j.STATE
                || '</xsd:town>

            </xsd:cbsAddressInfoRequestList>';
            l_envelope := l_envelope || l_clob_data;
        END LOOP;

        l_clob_data := NULL;

        FOR k
            IN (SELECT CBS_IND_DOC_CODE,
                       (SELECT COUNT (*)
                          FROM emob.mb_document_mst
                         WHERE cust_No = a.cust_no)
                           ct,
                       TO_CHAR (TO_TIMESTAMP (ISSUE_DATE),
                                'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                           ISSUE_DATE,
                       UPPER (NVL (ISSUE_PLACE, 'N/A'))
                           ISSUE_PLACE,
                       TO_CHAR (TO_TIMESTAMP (EXPIRE_DATE),
                                'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                           EXPIRE_DATE,
                       DOCMENT_NO
                  FROM EMOB.MB_DOCUMENT_MST a, EMOB.ST_DOCUMENT_TYPE B
                 WHERE CUST_NO = pCustNo AND A.DOCUMENT_TYPE = B.DOC_TYPE)
        LOOP
            IF k.ct = 1
            THEN
                vUnique := 'Y';
            END IF;

            IF k.ct > 1
            THEN
                IF vUnique IS NULL OR vUnique = 'N'
                THEN
                    IF k.CBS_IND_DOC_CODE IN ('NID')
                    THEN
                        vUnique := 'Y';
                    END IF;

                    vUnique := 'Y';
                ELSE
                    vUnique := 'N';
                END IF;
            END IF;

            l_clob_data :=
                   '<xsd:cbsEntityDocDetailsRequestList>
                   
               <!--Optional:-->
               <xsd:countryOfIssue>BD</xsd:countryOfIssue>
               
               <!--Optional:-->
               <xsd:docCode>'
                || k.CBS_IND_DOC_CODE
                || '</xsd:docCode>
               
               <!--Optional:-->
               <xsd:entityType>CIFRetCust</xsd:entityType>
               
               <!--Optional:-->
               <xsd:expireDt>'
                || k.EXPIRE_DATE
                || '</xsd:expireDt>
               
               <!--Optional:-->
               <xsd:identificationType>IDTYPER15</xsd:identificationType>
               
               <!--Optional:-->
               <xsd:issueDt>'
                || k.ISSUE_DATE
                || '</xsd:issueDt>
               
               <!--Optional:-->
               <xsd:placeOfIssue>'
                || k.ISSUE_PLACE
                || '</xsd:placeOfIssue>
               
               <!--Optional:-->
               <xsd:preferredUniqueId>'
                || vUnique
                || '</xsd:preferredUniqueId>
               
               <!--Optional:-->
               <xsd:referenceNum>'
                || k.DOCMENT_NO
                || '</xsd:referenceNum>
               
               <!--Optional:-->
               <xsd:status>Received</xsd:status>
               <!--Optional:-->
               <xsd:type>Pre-Approval</xsd:type>
               <!--Optional:-->
               <xsd:typeCode>IDENTIFICATION PROOF</xsd:typeCode>
               <!--Optional:-->
               <xsd:typeDesc>IDENTIFICATION</xsd:typeDesc>
            </xsd:cbsEntityDocDetailsRequestList>';

            l_envelope2 := l_envelope2 || l_clob_data;
        END LOOP;

        FOR l IN (SELECT MOBILE_NO, MAIL_ID
                    FROM EMOB.MB_CUSTOMER_MST
                   WHERE CUST_NO = pCustNo)
        LOOP
            l_envelope3 :=
                   '<xsd:cbsPhoneEmailInfoRequestList>
                        <!--Optional:-->
                        <xsd:email/>
                        <!--Optional:-->
                        <xsd:enddt>2099-12-31T00:00:00.000</xsd:enddt>
                        <!--Optional:-->
                        <xsd:phoneNumCityCode/>
                        <!--Optional:-->
                        <xsd:phoneemailtype>COMMPH1</xsd:phoneemailtype>
                        <!--Optional:-->
                        <xsd:phonenumcountrycode>88</xsd:phonenumcountrycode>
                        <!--Optional:-->
                        <xsd:phonenumlocalcode>'
                || l.MOBILE_NO
                || '</xsd:phonenumlocalcode>
                        <!--Optional:-->
                        <xsd:phoneoremail>PHONE</xsd:phoneoremail>
                        <!--Optional:-->
                        <xsd:prefflag>Y</xsd:prefflag>
                        <!--Optional:-->
                        <xsd:startdt>2020-03-31T00:00:00.000</xsd:startdt>
                    </xsd:cbsPhoneEmailInfoRequestList>';

            IF l.MAIL_ID IS NOT NULL
            THEN
                l_envelop5 :=
                       '<xsd:cbsPhoneEmailInfoRequestList>
                            <xsd:email>'
                    || l.MAIL_ID
                    || '</xsd:email>
                            <xsd:enddt>2099-12-31T00:00:00.000</xsd:enddt>
                            <xsd:phoneNumCityCode/>
                            <xsd:phoneemailtype>COMMEML</xsd:phoneemailtype>
                            <xsd:phonenumcountrycode/>
                            <xsd:phonenumlocalcode/>
                            <xsd:phoneoremail>EMAIL</xsd:phoneoremail>
                            <xsd:prefflag>Y</xsd:prefflag>
                            <xsd:startdt>2022-11-17T00:00:00.000</xsd:startdt>
                        </xsd:cbsPhoneEmailInfoRequestList>';
            END IF;

            l_envelope3 := l_envelope3 || l_envelop5;
        END LOOP;



        FOR m
            IN (SELECT FIRST_NAME || ' ' || LAST_NAME
                           nme,
                       FIRST_NAME
                           nme2,
                       FATHER_NAME,
                       UPPER (MOTHER_NAME)
                           MOTHER_NAME,
                       TO_CHAR (CUST_DOB,
                                'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                           CUST_DOB,
                       GENDER,
                       MARITUAL_STATUS,
                       SPOUSE_NAME,
                       DECODE (AGN_TYPE, 'PRS', 'IND', 'JNT')
                           AGN_TYPE,
                       NID,
                       'R'
                           AS OCCUPATION_CODE,
                       CASE
                           WHEN REQ_FROM = 'EKYC' THEN 'N/A'
                           ELSE NVL (SUBSTR (LAST_NAME, 1, 10), 'TEST')
                       END
                           last_name,
                       CUST_NO,
                       TO_CHAR (SYSDATE, 'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                           relstartdte,
                       JOINT_CIF,
                       MINOR_CUST_NO,
                       MONTHLY_INCOME,
                       (SELECT EKYC
                          FROM EMOB.STCODMAS
                         WHERE HARCOD = 'OCC' AND SOFCOD = OCCUPATION_CODE)
                           AS EMPLOYMENT_STATUS
                  FROM emob.mb_customer_mst
                 WHERE cust_no = pCustNo)
        LOOP
            SELECT TRUNC (
                         MONTHS_BETWEEN (
                             TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                             TO_DATE (TO_CHAR (CUST_DOB, 'DD/MM/YYYY'),
                                      'DD/MM/RRRR'))
                       / 12)
              INTO vAge
              FROM emob.mb_customer_mst
             WHERE cust_no = m.cust_no;



            IF vAge < 18
            THEN
                vMinorflag := 'Y';

                vRelationShip := 'Guardian';

                vRelationShipCat := 'Social';

                SELECT a.CUST_CODE,
                       DECODE (b.REL_TYPE,
                               'Father', 'F',
                               'Mother', 'M',
                               'O')    REL_TYPE,
                       A.FIRST_NAME || ' ' || A.LAST_NAME
                  INTO vGurdianCode, vRelType, vGurdianName
                  FROM EMOB.MB_CUSTOMER_MST A, EMOB.MB_CUSTOMER_GURDIAN B
                 WHERE A.cust_no = B.GURDIAN_CUST_NO AND B.CUST_NO = pCustNo;
            ELSE
                vMinorflag := 'N';

                vRelationShip := 'INTRODUCER';

                vRelationShipCat := 'Banking';

                vGurdianCode := 'CB2048627';
            END IF;



            IF vAge >= 60
            THEN
                vSeniorCitigent := 'Y';
            END IF;



            IF m.MINOR_CUST_NO IS NOT NULL
            THEN
                vName := M.nme;
            ELSE
                vName := M.nme;
            END IF;



            SELECT DECODE (NVL (m.JOINT_CIF, 'N'), 'Y', 'JNT', m.AGN_TYPE),
                   DECODE (m.GENDER,  'M', 'MR.',  'F', 'MRS.',  'MR.')
              INTO vConstitutionCode, vSalutation
              FROM DUAL;



            IF vMinorflag = 'Y'
            THEN
                l_envelope4 :=
                       '<!--Optional:-->

           <xsd:childChannelId>a</xsd:childChannelId>

           <!--Optional:-->

           <xsd:childChannelType>k</xsd:childChannelType>

           <!--Optional:-->
           
           <xsd:childCustId>'
                    || vGurdianCode
                    || '</xsd:childCustId>
           
           <!--Optional:-->
           <xsd:childEntity>Customer</xsd:childEntity>
           
           <!--Optional:-->
           <xsd:childEntityType>Retail</xsd:childEntityType>
           
           <!--Optional:-->
           <xsd:contactName>'
                    || vGurdianName
                    || '</xsd:contactName>
           <!--Optional:-->
           <xsd:knownYears>10</xsd:knownYears>
           <!--Optional:-->
           <xsd:primaryIntroducer>Y</xsd:primaryIntroducer>
            <!--Optional:-->
           <xsd:relationship>'
                    || vRelationShip
                    || '</xsd:relationship>
           <!--Optional:-->
           <xsd:relationshipCategory>'
                    || vRelationShipCat
                    || '</xsd:relationshipCategory>
           <!--Optional:-->
           <xsd:allowModify>Y</xsd:allowModify>
           <!--Optional:-->
            <xsd:combinedStmtFlag>N</xsd:combinedStmtFlag>
            
            <!--Optional:-->
            <xsd:constitutionCode>'
                    || vConstitutionCode
                    || '</xsd:constitutionCode>
            <!--Optional:-->

            <xsd:createdBySystemId>'
                    || pAppUser
                    || '</xsd:createdBySystemId>

            <!--Optional:-->

            <xsd:custNative>Y</xsd:custNative>

            <!--Optional:-->

            <xsd:custProfitability>0</xsd:custProfitability>

            <!--Optional:-->

            <xsd:custType>Retail</xsd:custType>

            <!--Optional:-->

            <xsd:customerStatus>NOR</xsd:customerStatus>

            <!--Optional:-->

            <xsd:dateOfBirth>'
                    || m.CUST_DOB
                    || '</xsd:dateOfBirth>
            <!--Optional:-->
            
            <xsd:defaultAddrType>Mailing</xsd:defaultAddrType>

            <!--Optional:-->

            <xsd:deliquencyPeriod>0</xsd:deliquencyPeriod>

            <!--Optional:-->

            <xsd:drCardIssue>43</xsd:drCardIssue>

            <!--Optional:-->

            <xsd:employerName></xsd:employerName>

            <!--Optional:-->

            <xsd:employmentStatus></xsd:employmentStatus>

            <!--Optional:-->

            <xsd:employmentType>'
                    || m.EMPLOYMENT_STATUS
                    || '</xsd:employmentType>

            <!--Optional:-->

            <xsd:freeText15>BANGLADESH</xsd:freeText15>

            <!--Optional:-->

            <xsd:freecode1></xsd:freecode1>

            <!--Optional:-->

            <xsd:freecode3></xsd:freecode3>                                    /*rmcode*/

            <!--Optional:-->

            <xsd:freecode7>IND</xsd:freecode7>

            <!--Optional:-->

            <xsd:freetext10></xsd:freetext10>

            <!--Optional:-->

            <xsd:freetext13></xsd:freetext13>

            <!--Optional:-->

            <xsd:freetext14></xsd:freetext14>

            <!--Optional:-->

            <xsd:freetext2></xsd:freetext2>

            <!--Optional:-->
            
            <xsd:freetext5></xsd:freetext5>

            <!--Optional:-->

            <xsd:freetext8></xsd:freetext8>

            <!--Optional:-->

            <xsd:freetext9></xsd:freetext9>

            <!--Optional:-->

            <xsd:gender>'
                    || m.GENDER
                    || '</xsd:gender>

            <!--Optional:-->

            <xsd:grossIncome>'
                    || NVL (m.MONTHLY_INCOME, 0)
                    || '</xsd:grossIncome>

            <xsd:guardCode>F</xsd:guardCode>

            <!--Optional:-->

            <xsd:guardianName>'
                    || vGurdianName
                    || '</xsd:guardianName>

            <!--Optional:-->
            
            <xsd:inlandTradeAllowed>N</xsd:inlandTradeAllowed>

            <!--Optional:-->

            <xsd:introducerID></xsd:introducerID>

            <!--Optional:-->

            <xsd:isBlacklisted>N</xsd:isBlacklisted>

            <!--Optional:-->

            <xsd:isCorpRepresentative>N</xsd:isCorpRepresentative>

            <!--Optional:-->

            <xsd:isCustNRE>N</xsd:isCustNRE>

            <!--Optional:-->

            <xsd:isDocReceived>N</xsd:isDocReceived>

            <!--Optional:-->

            <xsd:isDummy>N</xsd:isDummy>

            <!--Optional:-->

            <xsd:isEbankingEnabled>N</xsd:isEbankingEnabled>

            <!--Optional:-->

            <xsd:isIslamicBankingCust>N</xsd:isIslamicBankingCust>

            <!--Optional:-->

            <xsd:isMinor>'
                    || vMinorflag
                    || '</xsd:isMinor>

            <!--Optional:-->

            <xsd:isNegated>N</xsd:isNegated>

            <!--Optional:-->

            <xsd:isSMSBankingEnabled>N</xsd:isSMSBankingEnabled>

            <!--Optional:-->

            <xsd:isSuspended>N</xsd:isSuspended>

            <!--Optional:-->

            <xsd:isSwiftCodeOfBank>N</xsd:isSwiftCodeOfBank>

            <!--Optional:-->

            <xsd:isWAPBankingEnabled>N</xsd:isWAPBankingEnabled>

            <!--Optional:-->

            <xsd:language>INFENG</xsd:language>

            <!--Optional:-->

            <xsd:lastName>'
                    || vName                   ----------------------Full Name
                    || '</xsd:lastName>

            <!--Optional:-->
            
            <xsd:maidenNameOfMother>'
                    || m.MOTHER_NAME
                    || '</xsd:maidenNameOfMother>

            <!--Optional:-->

            <xsd:manager>UBSADMIN</xsd:manager>

            <!--Optional:-->
            
            <xsd:maritalStatus>'
                    || m.MARITUAL_STATUS             --------------singl/marid
                    || '</xsd:maritalStatus>

            <!--Optional:-->

            <xsd:migCIFDocNum></xsd:migCIFDocNum>

            <!--Optional:-->

            <xsd:monitoringRMCode></xsd:monitoringRMCode>

            <!--Optional:-->

            <xsd:name>'
                    || vName
                    || '</xsd:name>



            <!--Optional:-->

            <xsd:nameOfIntroducer></xsd:nameOfIntroducer>

            <!--Optional:-->

            <xsd:nationalIdCardNum>'
                    || m.nid
                    || '</xsd:nationalIdCardNum>
            <!--Optional:-->

            <xsd:nationality>BD</xsd:nationality>

            <!--Optional:-->

            <xsd:nativeLanguage>INFENG</xsd:nativeLanguage>

            <!--Optional:-->    

            <xsd:nativeLanguageCode>INFENG</xsd:nativeLanguageCode>

            <!--Optional:-->

            <xsd:occupation>AR</xsd:occupation>



            <!--Optional:-->



            <xsd:pan></xsd:pan>



            <!--Optional:-->

            <xsd:passportDet></xsd:passportDet>

            <!--Optional:-->

            <xsd:passportExpDt></xsd:passportExpDt>

            <!--Optional:-->

            <xsd:passportIssueDt></xsd:passportIssueDt>

            <!--Optional:-->

            <xsd:passportNum></xsd:passportNum>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:prefEndDt>2020-03-12T00:00:00.000</xsd:prefEndDt>

            <!--Optional:-->

            <xsd:prefName>'
                    || m.FATHER_NAME
                    || '</xsd:prefName>

            <!--Optional:-->

            <xsd:primarySolId>777</xsd:primarySolId>

            <!--Optional:-->

            <xsd:psychographicData>

               <!--Optional:-->
               
               <xsd:crdiscper/>

               <!--Optional:-->

               <xsd:custcurrcode>BDT</xsd:custcurrcode>

               <!--Optional:-->

               <xsd:dbdiscper/>

               <!--Optional:-->

               <xsd:prefExpDt> 2099-12-31T00:00:00.000</xsd:prefExpDt>

               <!--Optional:-->

               <xsd:preferred_locale>en_US</xsd:preferred_locale>

               <!--Optional:-->

               <xsd:strtext10>BDT</xsd:strtext10>

               <!--Optional:-->

               <xsd:type>CURRENCY</xsd:type>

               <!--Optional:-->

               <xsd:whtaxfloorlimit>0</xsd:whtaxfloorlimit>

               <!--Optional:-->

               <xsd:whtaxper>10</xsd:whtaxper>

            </xsd:psychographicData>

            <!--Optional:-->

            <xsd:region>others</xsd:region>

            <!--Optional:-->

            <xsd:relationshipMgrID>2000001</xsd:relationshipMgrID>

            <!--Optional:-->

            <xsd:relationshipOpeningDt>'
                    || m.relstartdte
                    || '</xsd:relationshipOpeningDt>

            <!--Optional:-->

            <xsd:relationshipValue>0</xsd:relationshipValue>

            <!--Optional:-->

            <xsd:residenceCountry>BD</xsd:residenceCountry>

            <!--Optional:-->

            <xsd:reviewDt></xsd:reviewDt>

            <!--Optional:-->

            <xsd:salutation>'
                    || vSalutation
                    || '</xsd:salutation>

            <!--Optional:-->

            <xsd:salutationCodeOfIntroducer>MR</xsd:salutationCodeOfIntroducer>

            <!--Optional:-->

            <xsd:segmentationClass>NA</xsd:segmentationClass>

            <!--Optional:-->

            <xsd:senCitizenApplicableDate/>

            <!--Optional:-->

            <xsd:seniorCitizen>'
                    || vSeniorCitigent
                    || '</xsd:seniorCitizen>

            <!--Optional:-->

            <xsd:shortName>'
                    || m.LAST_NAME
                    || '</xsd:shortName>

            <!--Optional:-->

            <xsd:spouseName>'
                    || m.SPOUSE_NAME
                    || '</xsd:spouseName>

            <!--Optional:-->

            <xsd:staffEmployeeId></xsd:staffEmployeeId>

            <!--Optional:-->

            <xsd:staffFlag>N</xsd:staffFlag>

            <!--Optional:-->

            <xsd:startDt> 2020-03-12T00:00:00.000</xsd:startDt>

            <!--Optional:-->

            <xsd:strText2>AR</xsd:strText2>

            <!--Optional:-->

            <xsd:subSegment>NA</xsd:subSegment>

            <!--Optional:-->

            <xsd:taxDeductionTable>TDS</xsd:taxDeductionTable>

            <!--Optional:-->

            <xsd:tradeFinFlag>N</xsd:tradeFinFlag>

            <!--Optional:-->

            <xsd:tradeFinanceID>1551</xsd:tradeFinanceID>

            <!--Optional:-->

            <xsd:type>CURRENT_EMPLOYMENT</xsd:type>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:cbsCustomerCreation>

   </soapenv:Body>

</soapenv:Envelope>';
            ELSE
                l_envelope4 :=
                       '<!--Optional:-->
                       
            <xsd:combinedStmtFlag>N</xsd:combinedStmtFlag>

            <!--Optional:-->

            <xsd:constitutionCode>'
                    || vConstitutionCode
                    || '</xsd:constitutionCode>

            <!--Optional:-->

            <xsd:createdBySystemId>'
                    || pAppUser
                    || '</xsd:createdBySystemId>

            <!--Optional:-->

            <xsd:custNative>Y</xsd:custNative>

            <!--Optional:-->

            <xsd:custProfitability>0</xsd:custProfitability>

            <!--Optional:-->

            <xsd:custType>Retail</xsd:custType>

            <!--Optional:-->

            <xsd:customerStatus>NOR</xsd:customerStatus>

            <!--Optional:-->

            <xsd:dateOfBirth>'
                    || m.CUST_DOB
                    || '</xsd:dateOfBirth>

            <!--Optional:-->

            <xsd:defaultAddrType>Mailing</xsd:defaultAddrType>

            <!--Optional:-->

            <xsd:deliquencyPeriod>0</xsd:deliquencyPeriod>

            <!--Optional:-->

            <xsd:drCardIssue>43</xsd:drCardIssue>

            <!--Optional:-->

            <xsd:employerName></xsd:employerName>

            <!--Optional:-->

            <xsd:employmentStatus>Service</xsd:employmentStatus>

            <!--Optional:-->

            <xsd:employmentType>'
                    || m.EMPLOYMENT_STATUS
                    || '</xsd:employmentType>

            <!--Optional:-->

            <xsd:freeText15>BANGLADESH</xsd:freeText15>
            
            <!--Optional:-->

            <xsd:freecode1></xsd:freecode1>
            
            <!--Optional:-->

            <xsd:freecode3></xsd:freecode3>                                    /*rmcode*/

            <!--Optional:-->

            <xsd:freecode7>IND</xsd:freecode7>

            <!--Optional:-->

            <xsd:freetext10></xsd:freetext10>

            <!--Optional:-->

            <xsd:freetext13></xsd:freetext13>

            <!--Optional:-->

            <xsd:freetext14></xsd:freetext14>

            <!--Optional:-->

            <xsd:freetext2></xsd:freetext2>

            <!--Optional:-->

            <xsd:freetext5></xsd:freetext5>

            <!--Optional:-->

            <xsd:freetext8></xsd:freetext8>

            <!--Optional:-->

            <xsd:freetext9></xsd:freetext9>

            <!--Optional:-->

            <xsd:gender>'
                    || m.GENDER
                    || '</xsd:gender>

            <!--Optional:-->

            <xsd:grossIncome>'
                    || NVL (m.MONTHLY_INCOME, 0)
                    || '</xsd:grossIncome>

            <xsd:guardCode>F</xsd:guardCode>

            <!--Optional:-->

            <xsd:guardianName>'
                    || vGurdianName
                    || '</xsd:guardianName>
                    
            <!--Optional:-->
            <xsd:inlandTradeAllowed>N</xsd:inlandTradeAllowed>
            <!--Optional:-->
            <xsd:introducerID></xsd:introducerID>
            <!--Optional:-->
            <xsd:isBlacklisted>N</xsd:isBlacklisted>
            <!--Optional:-->
            <xsd:isCorpRepresentative>N</xsd:isCorpRepresentative>
            
            <!--Optional:-->
            <xsd:isCustNRE>N</xsd:isCustNRE>
            
            <!--Optional:-->
            <xsd:isDocReceived>N</xsd:isDocReceived>
            <!--Optional:-->

            <xsd:isDummy>N</xsd:isDummy>
            
            <!--Optional:-->

            <xsd:isEbankingEnabled>N</xsd:isEbankingEnabled>
            
            <!--Optional:-->

            <xsd:isIslamicBankingCust>N</xsd:isIslamicBankingCust>

            <!--Optional:-->

            <xsd:isMinor>'
                    || vMinorflag
                    || '</xsd:isMinor>

            <!--Optional:-->

            <xsd:isNegated>N</xsd:isNegated>

            <!--Optional:-->
            
            <xsd:isSMSBankingEnabled>N</xsd:isSMSBankingEnabled>

            <!--Optional:-->

            <xsd:isSuspended>N</xsd:isSuspended>

            <!--Optional:-->

            <xsd:isSwiftCodeOfBank>N</xsd:isSwiftCodeOfBank>

            <!--Optional:-->

            <xsd:isWAPBankingEnabled>N</xsd:isWAPBankingEnabled>

            <!--Optional:-->
            
            <xsd:language>INFENG</xsd:language>

            <!--Optional:-->

            <xsd:lastName>'
                    || vName                   ----------------------Full Name
                    || '</xsd:lastName>
            <!--Optional:-->

            <xsd:maidenNameOfMother>'
                    || m.MOTHER_NAME
                    || '</xsd:maidenNameOfMother>
            <!--Optional:-->

            <xsd:manager>UBSADMIN</xsd:manager>

            <!--Optional:-->

            <xsd:maritalStatus>'
                    || m.MARITUAL_STATUS             --------------singl/marid
                    || '</xsd:maritalStatus>

            <!--Optional:-->

            <xsd:migCIFDocNum></xsd:migCIFDocNum>

            <!--Optional:-->

            <xsd:monitoringRMCode></xsd:monitoringRMCode>

            <!--Optional:-->

            <xsd:name>'
                    || vName
                    || '</xsd:name>

            <!--Optional:-->
            
            <xsd:nameOfIntroducer></xsd:nameOfIntroducer>
            <!--Optional:-->

            <xsd:nationalIdCardNum>'
                    || m.nid
                    || '</xsd:nationalIdCardNum>

            <!--Optional:-->

            <xsd:nationality>BD</xsd:nationality>

            <!--Optional:-->

            <xsd:nativeLanguage>INFENG</xsd:nativeLanguage>

            <!--Optional:-->    

            <xsd:nativeLanguageCode>INFENG</xsd:nativeLanguageCode>

            <!--Optional:-->

            <xsd:occupation>AR</xsd:occupation>

            <!--Optional:-->

            <xsd:pan>123456219012</xsd:pan>

            <!--Optional:-->

            <xsd:passportDet></xsd:passportDet>

            <!--Optional:-->

            <xsd:passportExpDt></xsd:passportExpDt>

            <!--Optional:-->

            <xsd:passportIssueDt></xsd:passportIssueDt>

            <!--Optional:-->

            <xsd:passportNum></xsd:passportNum>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:prefEndDt>2020-03-12T00:00:00.000</xsd:prefEndDt>

            <!--Optional:-->

            <xsd:prefName>'
                    || m.FATHER_NAME
                    || '</xsd:prefName>

            <!--Optional:-->
            
            <xsd:primarySolId>777</xsd:primarySolId>

            <!--Optional:-->

            <xsd:psychographicData>

               <!--Optional:-->

               <xsd:crdiscper/>

               <!--Optional:-->

               <xsd:custcurrcode>BDT</xsd:custcurrcode>

               <!--Optional:-->

               <xsd:dbdiscper/>

               <!--Optional:-->

               <xsd:prefExpDt>2099-12-31T00:00:00.000</xsd:prefExpDt>

               <!--Optional:-->

               <xsd:preferred_locale>en_US</xsd:preferred_locale>

               <!--Optional:-->

               <xsd:strtext10>BDT</xsd:strtext10>

               <!--Optional:-->

               <xsd:type>CURRENCY</xsd:type>

               <!--Optional:-->

               <xsd:whtaxfloorlimit>0</xsd:whtaxfloorlimit>

               <!--Optional:-->

               <xsd:whtaxper>10</xsd:whtaxper>

            </xsd:psychographicData>

            <!--Optional:-->

            <xsd:region>others</xsd:region>

            <!--Optional:-->

            <xsd:relationshipMgrID>2000001</xsd:relationshipMgrID>

            <!--Optional:-->

            <xsd:relationshipOpeningDt>'
                    || m.relstartdte
                    || '</xsd:relationshipOpeningDt>

            <!--Optional:-->

            <xsd:relationshipValue>0</xsd:relationshipValue>

            <!--Optional:-->

            <xsd:residenceCountry>BD</xsd:residenceCountry>

            <!--Optional:-->

            <xsd:reviewDt></xsd:reviewDt>

            <!--Optional:-->

            <xsd:salutation>MR</xsd:salutation>

            <!--Optional:-->

            <xsd:salutationCodeOfIntroducer>MR</xsd:salutationCodeOfIntroducer>

            <!--Optional:-->

            <xsd:segmentationClass>NA</xsd:segmentationClass>

            <!--Optional:-->

            <xsd:senCitizenApplicableDate/>

            <!--Optional:-->

            <xsd:seniorCitizen>'
                    || vSeniorCitigent
                    || '</xsd:seniorCitizen>

            <!--Optional:-->

            <xsd:shortName>'
                    || m.LAST_NAME
                    || '</xsd:shortName>

            <!--Optional:-->

            <xsd:spouseName>'
                    || m.SPOUSE_NAME
                    || '</xsd:spouseName>

            <!--Optional:-->

            <xsd:staffEmployeeId></xsd:staffEmployeeId>

            <!--Optional:-->

            <xsd:staffFlag>N</xsd:staffFlag>

            <!--Optional:-->

            <xsd:startDt>2020-03-12T00:00:00.000</xsd:startDt>

            <!--Optional:-->

            <xsd:strText2>AR</xsd:strText2>

            <!--Optional:-->

            <xsd:subSegment>NA</xsd:subSegment>

            <!--Optional:-->

            <xsd:taxDeductionTable>TDS</xsd:taxDeductionTable>

            <!--Optional:-->

            <xsd:tradeFinFlag>N</xsd:tradeFinFlag>

            <!--Optional:-->

            <xsd:tradeFinanceID>1551</xsd:tradeFinanceID>

            <!--Optional:-->

            <xsd:type>CURRENT_EMPLOYMENT</xsd:type>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:cbsCustomerCreation>

   </soapenv:Body>

</soapenv:Envelope>';
            END IF;
        --l_envelope := l_envelope || l_envelope4;

        END LOOP;

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           =>
                           l_envelope
                        || l_envelope2
                        || l_envelope3
                        || l_envelope4,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (
                        pOprType        => 'CIF_CREATION',
                        pRefNo          => NULL,
                        pDrAcNo         => pCustNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          =>
                               l_envelope
                            || l_envelope2
                            || l_envelope3
                            || l_envelope4,
                        pOutXml         => NULL,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (
                pOprType        => 'CIF_CREATION',
                pRefNo          => NULL,
                pDrAcNo         => pCustNo,
                pCrAcNo         => NULL,
                pFileId         => vFileId,
                pInXMl          =>
                    l_envelope || l_envelope2 || l_envelope3 || l_envelope4,
                pOutXml         => vOutXml1.getClobVal (),
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => pLogId,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
                 SELECT custid.CUST_ID, rescode.RES_CODE, resmsg.RES_MSG   --,
                   -- errmsg.ERR_MSG
                   INTO pCustId, vResCode, vResMsg                         --,
                   -- vResErrMessage
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:cbsCustomerCreationResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:cbsCustomerCreationResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg,
                        /*XMLTABLE (

                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",

                                          'http://fi/xsd' AS "ax219"),

                           '//ns:cbsCustomerCreationResponse//ax219:fiResponseMessage'
                           PASSING vOutXml1
                           COLUMNS ERR_MSG  VARCHAR2 (1024)
                                      PATH '/ax219:fiResponseMessage') errmsg,*/
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:cbsCustomerCreationResponse//ax219:custId'
                            PASSING vOutXml1
                            COLUMNS CUST_ID     VARCHAR2 (1024) PATH '/ax219:custId')
                        custid;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'BALINQ',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pResCode := vResCode;

        IF NVL (vResCode, '00') != 100
        THEN
            BEGIN
                    SELECT errmsg.ERR_MSG
                      INTO vResErrMessage
                      FROM XMLTABLE (
                               XMLNAMESPACES (
                                   'http://ws.apache.org/axis2' AS "ns",
                                   'http://fi/xsd' AS "ax219"),
                               '//ns:cbsCustomerCreationResponse//ax219:fiResponseMessage'
                               PASSING vOutXml1
                               COLUMNS ERR_MSG    VARCHAR2 (1024) PATH '/ax219:fiResponseMessage')
                           errmsg;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            pErrorMsg := 'Error From CBS(C)-' || vResErrMessage;    --vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;



    PROCEDURE CURRENT_ACCOUENT_OPEN_API (pAcId            VARCHAR2,
                                         pLogId           VARCHAR2,
                                         pAppUser         VARCHAR2,
                                         pResCode     OUT VARCHAR2,
                                         pAcNo        OUT VARCHAR2,
                                         pErrorFlag   OUT VARCHAR2,
                                         pErrorMsg    OUT VARCHAR2)
    IS
        vOutXml           CLOB;

        l_envelope        VARCHAR2 (32700);
        l_envelope1       VARCHAR2 (32700);
        l_envelope2       VARCHAR2 (32700);
        l_envelope3       VARCHAR2 (32700);
        vCustNo           NUMBER;
        vAcType           VARCHAR2 (2);
        vOutXml1          XMLTYPE;
        vResCode          VARCHAR2 (50);
        vResMsg           VARCHAR2 (1024);
        vFileId           NUMBER;
        vApiUrl           VARCHAR2 (1024);
        vMinorflag        VARCHAR2 (10);
        vNomCount         NUMBER;
        vNomAvailAble     VARCHAR2 (10);
        vAge              VARCHAR2 (10);
        vOperatoerCount   NUMBER := 1;
        vOprType          VARCHAR2 (1024);
        vOcuCode          VARCHAR2 (100);
        vMyException      EXCEPTION;
        pOracleMessage    VARCHAR2 (1024);
        vErrorMsg         VARCHAR2 (1024);
        vSectCode         VARCHAR2 (1024);
        vSubSecCode       VARCHAR2 (1024);
        vEkycType         VARCHAR2 (100);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        -- ENVELOPE GENERATE ---
        pErrorFlag := 'N';

        BEGIN
            SELECT COUNT (NOMINEE_ID)
              INTO vNomCount
              FROM EMOB.NOMINEE_MST
             WHERE AC_ID = pAcId;
        END;

        IF vNomCount = 0
        THEN
            vNomAvailAble := 'N';
        ELSE
            vNomAvailAble := 'Y';
        END IF;

        FOR i
            IN (SELECT a.AC_TITLE
                           AC_TITLE,
                       a.cust_no,
                       b.cust_code
                           cust_id,
                       a.AC_NATURE,
                       DECODE (a.AC_NATURE, 'C', NULL, 'SELF')
                           mpcode,
                       b.first_name
                           last_name,
                       C.GL_SUB_HEAD_CODE
                           GL_SUB_HEAD_CODE,
                       RM_CODE,
                       D.FINACLE_ID,
                       a.REQ_FROM,
                       B.MAIL_ID
                  FROM EMOB.MB_ACCOUNT_MST   a,
                       EMOB.MB_CUSTOMER_MST  b,
                       EMOB.MB_PRODUCT_MST   C,
                       EMOB.ST_AGENT_POINT   D
                 WHERE     AC_ID = pAcId
                       AND a.cust_no = b.cust_no
                       AND A.AC_TYPE_ID = C.AC_TYPE_ID
                       AND A.POINT_ID = D.POINT_ID)
        LOOP
            /*'||i.FINACLE_ID||'*/



            vCustNo := i.cust_no;
            vAcType := i.AC_NATURE;

            BEGIN
                SELECT EKYC_TYPE
                  INTO vEkycType
                  FROM EMOB.EKYC_AC_OPEN_REQUEST
                 WHERE CUST_NO = vCustNo;
            EXCEPTION
                WHEN OTHERS
                THEN
                    vEkycType := 'REG';
            END;

            l_envelope :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>
   
   <soapenv:Body>
      <axis:OpenCurrentAccount>
         <!--Optional:-->
     <axis:request>
            <!--Optional:-->
            <xsd:accountCurrency>BDT</xsd:accountCurrency>
            <!--Optional:-->
            <xsd:accountName>'
                || i.AC_TITLE
                || '</xsd:accountName>
            <!--Optional:-->
            <xsd:accountShortName></xsd:accountShortName>
            <!--Optional:-->
            <xsd:acctstmtcal>00</xsd:acctstmtcal>
            <!--Optional:-->
            <xsd:acctstmtholstat>N</xsd:acctstmtholstat>
            <!--Optional:-->
            <xsd:acctstmtmode>S</xsd:acctstmtmode>
           <!--Optional:-->
            <xsd:acctstmtnxtprintdt>2029-12-31T00:00:00.000</xsd:acctstmtnxtprintdt>
            <!--Optional:-->
            <xsd:acctstmtstartdt>31</xsd:acctstmtstartdt>
            <!--Optional:-->
            <xsd:acctstmttype>H</xsd:acctstmttype>
            <!--Optional:-->
            <xsd:acmanagerid>UBSADMIN</xsd:acmanagerid>
            <!--Optional:-->
            <xsd:agentbankingoutlet>'
                || i.FINACLE_ID
                || '</xsd:agentbankingoutlet>
            <!--Optional:-->
            <xsd:ccepcode></xsd:ccepcode>
            <!--Optional:-->
            <xsd:crcashlim>9999999999.99</xsd:crcashlim>
            <!--Optional:-->
            <xsd:crcashlimccy>BDT</xsd:crcashlimccy>
            <!--Optional:-->
            <xsd:crclrlim>9999999999.99</xsd:crclrlim>
            <!--Optional:-->
            <xsd:crclrlimccy>BDT</xsd:crclrlimccy>
            <!--Optional:-->
            <xsd:crtxlim>9999999999.99</xsd:crtxlim>
            <!--Optional:-->
            <xsd:crtxlimccy>BDT</xsd:crtxlimccy>
            <!--Optional:-->
            <xsd:custID>'
                || i.cust_id
                || '</xsd:custID>
            <!--Optional:-->
            <xsd:depositcode>100</xsd:depositcode>
            <!--Optional:-->
            <xsd:despatchMode>'
                || CASE WHEN i.MAIL_ID IS NOT NULL THEN 'E' ELSE 'Q' END
                || '</xsd:despatchMode>
            <!--Optional:-->
            <xsd:dormchrg>NA</xsd:dormchrg>
            <!--Optional:-->
            <xsd:dormchrg_alt></xsd:dormchrg_alt>
            
            <!--Optional:-->
            <xsd:drcashlim>9999999999.99</xsd:drcashlim>
            <!--Optional:-->
            <xsd:drcashlimccy>BDT</xsd:drcashlimccy>
            <!--Optional:-->
            
            <xsd:drclrlim>9999999999.99</xsd:drclrlim>

            <!--Optional:-->

            <xsd:drclrlimccy>BDT</xsd:drclrlimccy>
            <!--Optional:-->
            <xsd:drtxlim>9999999999.99</xsd:drtxlim>
            <!--Optional:-->
            <xsd:drtxlimccy>BDT</xsd:drtxlimccy>
            <!--Optional:-->
            <xsd:freecode6></xsd:freecode6>
            <!--Optional:-->
            <xsd:freecode8></xsd:freecode8>
            <!--Optional:-->
            <xsd:freetext10></xsd:freetext10>
            <!--Optional:-->
            <xsd:freetext3></xsd:freetext3>
            <!--Optional:-->
            <xsd:freetext5>'
                || CASE
                       WHEN     i.REQ_FROM = 'EKYC'
                            AND NVL (vEkycType, 'REG') = 'REG'
                       THEN
                           'SBREK-ABS'
                       WHEN     i.REQ_FROM = 'EKYC'
                            AND NVL (vEkycType, 'REG') = 'SIM'
                       THEN
                           'SBSEK-ABS'
                       ELSE
                           NULL
                   END
                || '</xsd:freetext5>

            <xsd:glLedgersubHeadCode>'
                || i.GL_SUB_HEAD_CODE
                || '</xsd:glLedgersubHeadCode>
            <!--Optional:-->
            <xsd:intcrac>S</xsd:intcrac>
            <!--Optional:-->
            <xsd:intcracid></xsd:intcracid>
            <!--Optional:-->
            <xsd:loccalflg>N</xsd:loccalflg>
            <!--Optional:-->
            <xsd:mopcode>'
                || i.mpcode
                || '</xsd:mopcode>
            <!--Optional:-->
            <xsd:nomavbl>1</xsd:nomavbl>
            <!--Optional:-->
            <xsd:nomavblflg>'
                || vNomAvailAble
                || '</xsd:nomavblflg>';
        END LOOP;

        -----newly added for EKYC ----
        IF vNomAvailAble = 'Y'
        THEN
            FOR j
                IN (SELECT NOMINEE_ID,
                           NOMINEE_NAME,
                           NOM_PERCENT,
                           RELATION,
                           ADDR1,
                           ADDR2,
                           TO_CHAR (TO_TIMESTAMP (DOB),
                                    'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                               DOB,
                           UPPER (CITY)
                               CITY,
                           GURDIAN_ADDR1,
                           GURDIAN_ADDR2,
                           UPPER (GURDIAN_CITY)
                               GURDIAN_CITY,
                           GURDIAN_POSTAL_CODE,
                           GURDIAN_NAME,
                           POSTAL_CODE,
                           (SELECT STATE
                              FROM EMOB.MB_ADDRESS_MST
                             WHERE REF_NO = B.CUST_NO AND PREF_ADDR = 'Y')
                               STATE_NAME,
                           DOCMENT_NO
                      FROM EMOB.NOMINEE_MST  A
                           JOIN EMOB.MB_ACCOUNT_MST B ON (A.AC_ID = B.AC_ID)
                     WHERE A.AC_ID = pAcId)
            LOOP
                SELECT TRUNC (
                             MONTHS_BETWEEN (
                                 TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                                 TO_DATE (TO_CHAR (DOB, 'DD/MM/YYYY'),
                                          'DD/MM/RRRR'))
                           / 12)
                  INTO vAge
                  FROM EMOB.NOMINEE_MST
                 WHERE NOMINEE_ID = J.NOMINEE_ID;

                IF vAge < 18
                THEN
                    vMinorflag := 'Y';
                ELSE
                    vMinorflag := 'N';
                END IF;

                l_envelope1 :=
                       '<xsd:nomineeContactInfoRequests>
                   <!--Optional:-->
                   <xsd:address1>'
                    || j.ADDR1
                    || '</xsd:address1>
                   <!--Optional:-->

                   <xsd:address2>'
                    || j.ADDR2
                    || '</xsd:address2>
                   <!--Optional:-->
                   <xsd:address3>'
                    || J.DOCMENT_NO
                    || '</xsd:address3>

                   <!--Optional:-->

                   <xsd:city>'
                    || j.CITY
                    || '</xsd:city>

                   <!--Optional:-->

                   <xsd:country>BD</xsd:country>

                   <!--Optional:-->

                   <xsd:emailAddr></xsd:emailAddr>

                   <!--Optional:-->

                   <xsd:guardianAddr1>'
                    || j.GURDIAN_ADDR1
                    || '</xsd:guardianAddr1>

                   <!--Optional:-->

                   <xsd:guardianAddr2>'
                    || j.GURDIAN_ADDR2
                    || '</xsd:guardianAddr2>

                   <!--Optional:-->

                   <xsd:guardianAddr3></xsd:guardianAddr3>

                   <!--Optional:-->

                   <xsd:guardianAddrType>Mailing</xsd:guardianAddrType>

                   <!--Optional:-->

                   <xsd:guardianCity>'
                    || j.GURDIAN_CITY
                    || '</xsd:guardianCity>

                   <!--Optional:-->

                   <xsd:guardianCode>O</xsd:guardianCode>

                   <!--Optional:-->

                   <xsd:guardianCountry>BD</xsd:guardianCountry>

                   <!--Optional:-->

                   <xsd:guardianEmailAddr></xsd:guardianEmailAddr>

                   <!--Optional:-->

                   <xsd:guardianName>'
                    || j.GURDIAN_NAME
                    || '</xsd:guardianName>

                   <!--Optional:-->

                   <xsd:guardianPostalCode>'
                    || j.GURDIAN_POSTAL_CODE
                    || '</xsd:guardianPostalCode>

                   <!--Optional:-->

                   <xsd:guardianStateProv>'
                    || j.STATE_NAME
                    || '</xsd:guardianStateProv>

                   <!--Optional:-->

                   <xsd:guardianTelephoneNum></xsd:guardianTelephoneNum>

                   <!--Optional:-->

                   <xsd:nomineeBirthDt>'
                    || j.DOB
                    || '</xsd:nomineeBirthDt>

                   <!--Optional:-->

                   <xsd:nomineeMinorFlg>'
                    || vMinorflag
                    || '</xsd:nomineeMinorFlg>

                   <!--Optional:-->

                   <xsd:nomineeName>'
                    || j.NOMINEE_NAME
                    || '</xsd:nomineeName>

                   <!--Optional:-->

                   <xsd:nomineePercent>'
                    || j.NOM_PERCENT
                    || '</xsd:nomineePercent>

                   <!--Optional:-->

                   <xsd:postalCode>'
                    || j.POSTAL_CODE
                    || '</xsd:postalCode>

                   <!--Optional:-->

                   <xsd:recDelFlg>N</xsd:recDelFlg>

                   <!--Optional:-->

                   <xsd:regNum>0</xsd:regNum>

                   <!--Optional:-->

                   <xsd:relType>'
                    || j.RELATION
                    || '</xsd:relType>

                   <!--Optional:-->

                   <xsd:stateProv>'
                    || j.STATE_NAME
                    || '</xsd:stateProv>

                </xsd:nomineeContactInfoRequests>';

                l_envelope := l_envelope || l_envelope1;
            END LOOP;
        END IF;

        -----miaze------------



        IF NVL (vAcType, 'S') IN ('J', 'C')
        THEN
            FOR M
                IN (  SELECT FIRST_NAME,
                             LAST_NAME,
                             FIRST_NAME || ' ' || LAST_NAME     NME,
                             MAIL_ID,
                             CUST_CODE,
                             MOBILE_NO,
                             C.CITY,
                             C.POSTAL_CODE,
                             C.ADD_LINE1,
                             C.ADD_LINE2
                        FROM EMOB.MB_CUSTOMER_MST    A,
                             EMOB.MB_ADDRESS_MST     C,
                             EMOB.MB_ACCOUNT_OPERATOR D
                       WHERE     A.CUST_NO = C.REF_NO
                             AND ADDRESS_TYPE = 'PRS'
                             AND A.CUST_NO = D.CUST_NO
                             AND D.AC_ID = pAcId
                             AND D.CUST_NO != vCustNo
                    ORDER BY d.create_date ASC)
            LOOP
                IF vOperatoerCount = 1
                THEN
                    vOprType := '1STAP';
                ELSIF vOperatoerCount = 2
                THEN
                    vOprType := '2NDAP';
                ELSIF vOperatoerCount = 3
                THEN
                    vOprType := '3RDAP';
                ELSIF vOperatoerCount = 4
                THEN
                    vOprType := '4THAP';
                END IF;

                l_envelope2 :=
                       '<!--Zero or more repetitions:-->
            <xsd:relPartyRecInfoList>

               <!--Optional:-->
               <xsd:addressType>Mailing</xsd:addressType>
               <!--Optional:-->
               <xsd:city>'
                    || m.CITY
                    || '</xsd:city>
               <!--Optional:-->
               <xsd:country>BD</xsd:country>
               <!--Optional:-->
               <xsd:custId>'
                    || m.CUST_CODE
                    || '</xsd:custId>
               <!--Optional:-->

               <xsd:emailAddr>'
                    || m.MAIL_ID
                    || '</xsd:emailAddr>
               <!--Optional:-->
               <xsd:firstName>'
                    || m.FIRST_NAME
                    || '</xsd:firstName>
               <!--Optional:-->
               <xsd:lastName>'
                    || m.LAST_NAME
                    || '</xsd:lastName>
               <!--Optional:-->

               <xsd:middleName/>

               <!--Optional:-->

               <xsd:name>'
                    || m.NME
                    || '</xsd:name>

               <!--Optional:-->

               <xsd:phoneNum>'
                    || m.MOBILE_NO
                    || '</xsd:phoneNum>

               <!--Optional:-->
               <xsd:postalCode>'
                    || m.POSTAL_CODE
                    || '</xsd:postalCode>
               <!--Optional:-->
               <xsd:recDelFlg>N</xsd:recDelFlg>
               <!--Optional:-->
               <xsd:relAddr1>'
                    || m.ADD_LINE1
                    || '</xsd:relAddr1>
               <!--Optional:-->
               <xsd:relAddr2>'
                    || m.ADD_LINE2
                    || '</xsd:relAddr2>
               <!--Optional:-->
               <xsd:relPartyCode>'
                    || vOprType
                    || '</xsd:relPartyCode>
               <!--Optional:-->
               <xsd:relPartyContactInfo>
                  <!--Optional:-->
                  <xsd:addressType/>
                  <!--Optional:-->
                  <xsd:city/>
                  <!--Optional:-->
                  <xsd:country/>
                  <!--Optional:-->

                  <xsd:emailAddr/>
                  <!--Optional:-->
                  <xsd:phoneNum/>
                  <!--Optional:-->
                  <xsd:postalCode/>
                  <!--Optional:-->
                  <xsd:relAddr1/>
                  <!--Optional:-->
                  <xsd:relAddr2/>
                  <!--Optional:-->
                  <xsd:stateProv/>
               </xsd:relPartyContactInfo>
               <!--Optional:-->
               <xsd:relPartyType>A</xsd:relPartyType>
               <!--Optional:-->
               <xsd:relPartyTypeDesc>Authorized Signatory</xsd:relPartyTypeDesc>
               <!--Optional:-->
               <xsd:stateProv>Dhaka</xsd:stateProv>
               <!--Optional:-->
               <xsd:titlePrefix>MR</xsd:titlePrefix>
            </xsd:relPartyRecInfoList>
            <!--Zero or more repetitions:-->
            <xsd:relatedPartyAddList>
               <!--Optional:-->
               <xsd:desigcode>'
                    || vOprType
                    || '</xsd:desigcode>                  

               <!--Optional:-->
               <xsd:excludecombstmtflg>Y</xsd:excludecombstmtflg>
               <!--Optional:-->
               <xsd:rpcif>'
                    || m.CUST_CODE
                    || '</xsd:rpcif>
               <!--Optional:-->
               <xsd:rpdepnotflg>N</xsd:rpdepnotflg>
               <!--Optional:-->
               <xsd:rplaovnotflg>N</xsd:rplaovnotflg>
               <!--Optional:-->
               <xsd:rpsiflg>N</xsd:rpsiflg>
               <!--Optional:-->
               <xsd:rpstmtflg>Y</xsd:rpstmtflg>

            </xsd:relatedPartyAddList>';
                l_envelope := l_envelope || l_envelope2;
                vOperatoerCount := vOperatoerCount + 1;
            END LOOP;
        END IF;



        IF vAcType = 'C'
        THEN
            vOcuCode := 'AS';
        ELSE
            vOcuCode := 'AR';
        END IF;



        FOR k IN (SELECT SECTOR_CODE,
                         SHORT_DESC,
                         a.RM_CODE     RM_CODE,
                         a.cust_no
                    FROM EMOB.MB_ACCOUNT_MST a, EMOB.MB_PRODUCT_MST B
                   WHERE A.AC_TYPE_ID = B.AC_TYPE_ID AND A.AC_ID = pAcId)
        LOOP
            ---Added for EKYC---
            SELECT SUBSTR (CORCOD, 1, 1) SECTOR_CODE, CORCOD SUB_SEC_CODE
              INTO vSectCode, vSubSecCode
              FROM EMOB.STCODMAS  A
                   JOIN EMOB.MB_CUSTOMER_MST B
                       ON (A.SOFCOD = B.OCCUPATION_CODE)
             WHERE A.HARCOD = 'OCC' AND B.CUST_NO = k.cust_no;

            l_envelope3 :=
                   '
          <xsd:notes></xsd:notes>
            <!--Optional:-->
            <xsd:occupationcode>'
                || vOcuCode
                || '</xsd:occupationcode>
            <!--Optional:-->
            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Zero or more repetitions:-->       
            <!--Optional:-->
            <xsd:rmcode>'
                || k.RM_CODE
                || '</xsd:rmcode>
            <!--Optional:-->
            <xsd:rpavbl>1</xsd:rpavbl>
            <!--Optional:-->
            <xsd:schmCode>'
                || k.SHORT_DESC
                || '</xsd:schmCode>
            <!--Optional:-->
            <xsd:sectorcode>'
                || vSectCode
                || '</xsd:sectorcode>
            <!--Optional:-->
            <xsd:smsalert>AB</xsd:smsalert>
            <!--Optional:-->
            <xsd:solId>777</xsd:solId>
            <!--Optional:-->
            <xsd:solid>101</xsd:solid>
            <!--Optional:-->
            <xsd:subsectorcode>'
                || vSubSecCode
                || '</xsd:subsectorcode>
            <!--Optional:-->
            <xsd:username>cityagentapp</xsd:username>
            <!--Optional:-->
            <xsd:waiverfield></xsd:waiverfield>
            <!--Optional:-->
            <xsd:whtaxlvl>A</xsd:whtaxlvl>
            <!--Optional:-->
            <xsd:whtaxpcnt>2</xsd:whtaxpcnt>
            <!--Optional:-->
            <xsd:wtaxamountscopeflg>P</xsd:wtaxamountscopeflg>
         </axis:request>
      </axis:OpenCurrentAccount>
   </soapenv:Body>
   </soapenv:Envelope>';
        END LOOP;



        BEGIN
            API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope3,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'N') = 'F'
        THEN
            RAISE vMyException;
        END IF;

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope || l_envelope3,
                    p_transfer_timeout   => 20 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => vCustNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope || l_envelope3,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope3,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                 SELECT acno.AC_NO, rescode.RES_CODE, resmsg.RES_MSG
                   INTO pAcNo, vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:OpenCurrentAccountResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:OpenCurrentAccountResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:OpenCurrentAccountResponse//ax219:accountNumber'
                            PASSING vOutXml1
                            COLUMNS AC_NO       VARCHAR2 (1024) PATH '/ax219:accountNumber')
                        acno;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => vCustNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope || l_envelope3,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope3,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CIF_SEND_TO_CORE (pCustId          VARCHAR2,
                                pLogId           VARCHAR2,
                                pAppUser         VARCHAR2,
                                pResCode     OUT VARCHAR2,
                                pErrorFlag   OUT VARCHAR2,
                                pErrorMsg    OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       VARCHAR2 (32700);
        l_envelope1      VARCHAR2 (32700);
        l_envelope2      VARCHAR2 (32700);
        l_envelope3      VARCHAR2 (32700);
        l_envelope4      VARCHAR2 (32700);
        l_clob_data      VARCHAR2 (32700);
        vOutXml1         XMLTYPE;
        vUnique          VARCHAR2 (10);
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMinorflag       VARCHAR2 (10);
        vAge             NUMBER;
        vGurdianName     VARCHAR2 (400);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'S';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:TransferCifToCore>

         <!--Optional:-->
         <axis:request>
            <!--Optional:-->
            <xsd:custID>'
            || pCustId
            || '</xsd:custID>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:TransferCifToCore>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- ---'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?WSDL',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'CIF_SEND',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'CIF_SEND',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustId,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG
                   INTO vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:TransferCifToCoreResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:TransferCifToCoreResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CIF_SEND',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pResCode := vResCode;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;



    PROCEDURE SAVING_ACCOUENT_OPEN_API (pAcId            VARCHAR2,
                                        pLogId           VARCHAR2,
                                        pAppUser         VARCHAR2,
                                        pResCode     OUT VARCHAR2,
                                        pAcNo        OUT VARCHAR2,
                                        pErrorFlag   OUT VARCHAR2,
                                        pErrorMsg    OUT VARCHAR2)
    IS
        vOutXml           CLOB;
        l_envelope        VARCHAR2 (32700);
        l_envelope1       VARCHAR2 (32700);
        l_envelope2       VARCHAR2 (32700);
        l_envelope3       VARCHAR2 (32700);
        l_envelope4       VARCHAR2 (32700);
        vOutXml1          XMLTYPE;
        vResCode          VARCHAR2 (50);
        vResMsg           VARCHAR2 (1024);
        vFileId           NUMBER;
        vApiUrl           VARCHAR2 (1024);
        vMinorflag        VARCHAR2 (10);
        vAge              VARCHAR2 (10);
        vAcType           VARCHAR2 (2);
        vNomCount         NUMBER;
        vNomAvailAble     VARCHAR2 (10);
        vOperatoerCount   NUMBER := 1;
        vOprType          VARCHAR2 (1024);
        vOcuCode          VARCHAR2 (10);
        vCustNo           NUMBER;
        vMyException      EXCEPTION;
        vErrorMsg         VARCHAR2 (1024);
        pOracleMessage    VARCHAR2 (1024);
        vSectCode         VARCHAR2 (1024);
        vSubSecCode       VARCHAR2 (1024);
        vEkycType         VARCHAR2 (100);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---
        pErrorFlag := 'S';

        ---Newly added for EKYC---
        BEGIN
            SELECT COUNT (NOMINEE_ID)
              INTO vNomCount
              FROM EMOB.NOMINEE_MST
             WHERE AC_ID = pAcId;
        END;

        IF vNomCount = 0
        THEN
            vNomAvailAble := 'N';
        ELSE
            vNomAvailAble := 'Y';
        END IF;

        ---------------------------miaze

        FOR i
            IN (SELECT a.AC_TITLE
                           AC_TITLE,
                       b.cust_code
                           cust_id,
                       a.cust_no,
                       b.first_name
                           last_name,
                       a.AC_NATURE,
                       DECODE (a.AC_NATURE, 'C', NULL, 'SELF')
                           mpcode,
                       C.GL_SUB_HEAD_CODE
                           GL_SUB_HEAD_CODE,
                       b.MINOR_CUST_NO,
                       d.FINACLE_ID
                           point_id,
                       A.REQ_FROM,
                       b.MAIL_ID
                  FROM EMOB.MB_ACCOUNT_MST   a,
                       EMOB.MB_CUSTOMER_MST  b,
                       EMOB.MB_PRODUCT_MST   C,
                       EMOB.ST_AGENT_POINT   D
                 WHERE     AC_ID = pAcId
                       AND a.cust_no = b.cust_no
                       AND A.POINT_ID = D.POINT_ID
                       AND A.AC_TYPE_ID = C.AC_TYPE_ID)
        LOOP
            IF i.MINOR_CUST_NO IS NOT NULL
            THEN
                vMinorflag := 'Y';
            END IF;

            vAcType := i.AC_NATURE;

            vCustNo := i.cust_no;

            BEGIN
                SELECT EKYC_TYPE
                  INTO vEkycType
                  FROM EMOB.EKYC_AC_OPEN_REQUEST
                 WHERE CUST_NO = vCustNo;
            EXCEPTION
                WHEN OTHERS
                THEN
                    vEkycType := 'REG';
            END;

            l_envelope :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:openSavingBankingAccount>

         <!--Optional:-->
         
         <axis:request>

            <!--Optional:-->

            <xsd:ACCTrEpCode></xsd:ACCTrEpCode>

            <!--Optional:-->

            <xsd:accountCurrency>BDT</xsd:accountCurrency>

            <!--Optional:-->

            <xsd:accountName>'
                || i.AC_TITLE
                || '</xsd:accountName>

            <!--Optional:-->

            <xsd:accountShortName></xsd:accountShortName>

            <!--Optional:-->

            <xsd:acctstmtfreqcal>00</xsd:acctstmtfreqcal>

            <!--Optional:-->

            <xsd:acctstmtfreqholstat>N</xsd:acctstmtfreqholstat>

            <!--Optional:-->

            <xsd:acctstmtfreqstartdt>31</xsd:acctstmtfreqstartdt>

            <!--Optional:-->

            <xsd:acctstmtfreqtype>H</xsd:acctstmtfreqtype>

            <!--Optional:-->

            <xsd:acctstmtmode>S</xsd:acctstmtmode>

            <!--Optional:-->

            <xsd:acctstmtnxtprintdt>2099-12-31T00:00:00.000</xsd:acctstmtnxtprintdt>

            <!--Optional:-->

            <xsd:acmanagerid>UBSADMIN</xsd:acmanagerid>

            <!--Optional:-->

            <xsd:agentbankingoutlet>'
                || i.point_id
                || '</xsd:agentbankingoutlet>

            <!--Optional:-->

            <xsd:ccepcode></xsd:ccepcode>

            <!--Optional:-->

            <xsd:chQAllWdFlg></xsd:chQAllWdFlg>

            <!--Optional:-->

            <xsd:chQChrgCollFlg></xsd:chQChrgCollFlg>

            <!--Optional:-->

            <xsd:crcashlim>9999999999.99</xsd:crcashlim>

            <!--Optional:-->

            <xsd:crcashlimccy>BDT</xsd:crcashlimccy>

            <!--Optional:-->

            <xsd:crclrlim>9999999999.99</xsd:crclrlim>

            <!--Optional:-->

            <xsd:crclrlimccy>BDT</xsd:crclrlimccy>

            <!--Optional:-->

            <xsd:crtxlim>9999999999.99</xsd:crtxlim>

            <!--Optional:-->

            <xsd:crtxlimccy>BDT</xsd:crtxlimccy>

            <!--Optional:-->

            <xsd:custID>'
                || i.cust_id
                || '</xsd:custID>

            <!--Optional:-->

            <xsd:depositcode>130</xsd:depositcode>

            <!--Optional:-->

            <xsd:despatchMode>'
                || CASE WHEN i.MAIL_ID IS NOT NULL THEN 'E' ELSE 'Q' END
                || '</xsd:despatchMode>

            <!--Optional:-->

            <xsd:dormchrg>NA</xsd:dormchrg>

            <!--Optional:-->

            <xsd:dormchrg_alt/>

            <!--Optional:-->

            <xsd:drcashlim>9999999999.99</xsd:drcashlim>

            <!--Optional:-->

            <xsd:drcashlimccy>BDT</xsd:drcashlimccy>

            <!--Optional:-->

            <xsd:drclrlim>9999999999.99</xsd:drclrlim>

            <!--Optional:-->

            <xsd:drclrlimccy>BDT</xsd:drclrlimccy>

            <!--Optional:-->

            <xsd:drtxlim>9999999999.99</xsd:drtxlim>

            <!--Optional:-->

            <xsd:drtxlimccy>BDT</xsd:drtxlimccy>

            <!--Optional:-->

            <xsd:freecode6></xsd:freecode6>

            <!--Optional:-->

            <xsd:freecode8></xsd:freecode8>

            <!--Optional:-->

            <xsd:freetext10></xsd:freetext10>

            <!--Optional:-->

            <xsd:freetext3></xsd:freetext3>

            <!--Optional:-->

            <xsd:freetext5>'
                || CASE
                       WHEN     i.REQ_FROM = 'EKYC'
                            AND NVL (vEkycType, 'REG') = 'REG'
                       THEN
                           'SBREK-ABS'
                       WHEN     i.REQ_FROM = 'EKYC'
                            AND NVL (vEkycType, 'REG') = 'SIM'
                       THEN
                           'SBSEK-ABS'
                       ELSE
                           NULL
                   END
                || '</xsd:freetext5>

            <!--Optional:-->

            <xsd:glLedgersubHeadCode>'
                || i.GL_SUB_HEAD_CODE
                || '</xsd:glLedgersubHeadCode>

            <!--Optional:-->

            <xsd:intcrac>S</xsd:intcrac>

            <!--Optional:-->

            <xsd:intcracid/>

            <!--Optional:-->

            <xsd:loccalflg>N</xsd:loccalflg>

            <!--Optional:-->

            <xsd:mopcode>'
                || i.mpcode
                || '</xsd:mopcode>

            <xsd:nomavbl>1</xsd:nomavbl>

            <!--Optional:-->

            <xsd:nomavblflg>'
                || vNomAvailAble
                || '</xsd:nomavblflg>';
        END LOOP;

        --newly added for send nominee EKYC-----

        IF vNomAvailAble = 'Y'
        THEN
            FOR j
                IN (SELECT NOMINEE_ID,
                           NOMINEE_NAME,
                           NOM_PERCENT,
                           RELATION,
                           ADDR1,
                           ADDR2,
                           TO_CHAR (TO_TIMESTAMP (DOB),
                                    'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                               DOB,
                           UPPER (CITY)
                               CITY,
                           GURDIAN_ADDR1,
                           GURDIAN_ADDR2,
                           UPPER (GURDIAN_CITY)
                               GURDIAN_CITY,
                           GURDIAN_POSTAL_CODE,
                           GURDIAN_NAME,
                           POSTAL_CODE,
                           (SELECT STATE
                              FROM EMOB.MB_ADDRESS_MST
                             WHERE REF_NO = B.CUST_NO AND PREF_ADDR = 'Y')
                               STATE_NAME,
                           DOCMENT_NO
                      FROM EMOB.NOMINEE_MST  A
                           JOIN EMOB.MB_ACCOUNT_MST B ON (A.AC_ID = B.AC_ID)
                     WHERE A.AC_ID = pAcId)
            LOOP
                SELECT TRUNC (
                             MONTHS_BETWEEN (
                                 TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                                 TO_DATE (TO_CHAR (DOB, 'DD/MM/YYYY'),
                                          'DD/MM/RRRR'))
                           / 12)
                  INTO vAge
                  FROM EMOB.NOMINEE_MST
                 WHERE NOMINEE_ID = J.NOMINEE_ID;

                IF vAge < 18
                THEN
                    vMinorflag := 'Y';
                ELSE
                    vMinorflag := 'N';
                END IF;

                l_envelope1 :=
                       '<xsd:nomineeContactInfoRequests>
                   <!--Optional:-->
                   <xsd:address1>'
                    || j.ADDR1
                    || '</xsd:address1>
                   <!--Optional:-->

                   <xsd:address2>'
                    || j.ADDR2
                    || '</xsd:address2>
                   <!--Optional:-->
                   <xsd:address3>'
                    || J.DOCMENT_NO
                    || '</xsd:address3>

                   <!--Optional:-->

                   <xsd:city>'
                    || j.CITY
                    || '</xsd:city>

                   <!--Optional:-->

                   <xsd:country>BD</xsd:country>

                   <!--Optional:-->

                   <xsd:emailAddr></xsd:emailAddr>

                   <!--Optional:-->

                   <xsd:guardianAddr1>'
                    || j.GURDIAN_ADDR1
                    || '</xsd:guardianAddr1>

                   <!--Optional:-->

                   <xsd:guardianAddr2>'
                    || j.GURDIAN_ADDR2
                    || '</xsd:guardianAddr2>

                   <!--Optional:-->

                   <xsd:guardianAddr3></xsd:guardianAddr3>

                   <!--Optional:-->

                   <xsd:guardianAddrType>Mailing</xsd:guardianAddrType>

                   <!--Optional:-->

                   <xsd:guardianCity>'
                    || j.GURDIAN_CITY
                    || '</xsd:guardianCity>

                   <!--Optional:-->

                   <xsd:guardianCode>O</xsd:guardianCode>

                   <!--Optional:-->

                   <xsd:guardianCountry>BD</xsd:guardianCountry>

                   <!--Optional:-->

                   <xsd:guardianEmailAddr></xsd:guardianEmailAddr>

                   <!--Optional:-->

                   <xsd:guardianName>'
                    || j.GURDIAN_NAME
                    || '</xsd:guardianName>

                   <!--Optional:-->

                   <xsd:guardianPostalCode>'
                    || j.GURDIAN_POSTAL_CODE
                    || '</xsd:guardianPostalCode>

                   <!--Optional:-->

                   <xsd:guardianStateProv>'
                    || j.STATE_NAME
                    || '</xsd:guardianStateProv>

                   <!--Optional:-->

                   <xsd:guardianTelephoneNum></xsd:guardianTelephoneNum>

                   <!--Optional:-->

                   <xsd:nomineeBirthDt>'
                    || j.DOB
                    || '</xsd:nomineeBirthDt>

                   <!--Optional:-->

                   <xsd:nomineeMinorFlg>'
                    || vMinorflag
                    || '</xsd:nomineeMinorFlg>

                   <!--Optional:-->

                   <xsd:nomineeName>'
                    || j.NOMINEE_NAME
                    || '</xsd:nomineeName>

                   <!--Optional:-->

                   <xsd:nomineePercent>'
                    || j.NOM_PERCENT
                    || '</xsd:nomineePercent>

                   <!--Optional:-->

                   <xsd:postalCode>'
                    || j.POSTAL_CODE
                    || '</xsd:postalCode>

                   <!--Optional:-->

                   <xsd:recDelFlg>N</xsd:recDelFlg>

                   <!--Optional:-->

                   <xsd:regNum>0</xsd:regNum>

                   <!--Optional:-->

                   <xsd:relType>'
                    || j.RELATION
                    || '</xsd:relType>

                   <!--Optional:-->

                   <xsd:stateProv>'
                    || j.STATE_NAME
                    || '</xsd:stateProv>

                </xsd:nomineeContactInfoRequests>';

                l_envelope := l_envelope || l_envelope1;
            END LOOP;
        END IF;

        ---Miaze vNomAvailAble flag also incorporate with existing---


        IF NVL (vAcType, 'S') IN ('J', 'C')
        THEN
            FOR M
                IN (SELECT FIRST_NAME,
                           LAST_NAME,
                           FIRST_NAME || ' ' || LAST_NAME    NME,
                           MAIL_ID,
                           CUST_CODE,
                           MOBILE_NO,
                           C.CITY,
                           C.POSTAL_CODE,
                           C.ADD_LINE1,
                           C.ADD_LINE2,
                           TRUNC (
                                 MONTHS_BETWEEN (
                                     TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                                     TO_DATE (
                                         TO_CHAR (A.CUST_DOB, 'DD/MM/YYYY'),
                                         'DD/MM/RRRR'))
                               / 12)                         AGE
                      FROM EMOB.MB_CUSTOMER_MST      A,
                           EMOB.MB_ADDRESS_MST       C,
                           EMOB.MB_ACCOUNT_OPERATOR  D
                     WHERE     A.CUST_NO = C.REF_NO
                           AND ADDRESS_TYPE = 'PRS'
                           AND A.CUST_NO = D.CUST_NO
                           AND D.AC_ID = pAcId
                           AND D.CUST_NO != vCustNo)
            LOOP
                IF NVL (vMinorflag, 'N') = 'Y'
                THEN
                    IF m.AGE < 18
                    THEN
                        vOprType := '1STAP';
                    ELSE
                        vOprType := '2NDAP';
                    END IF;
                ELSE
                    IF vOperatoerCount = 1
                    THEN
                        vOprType := '1STAP';
                    ELSIF vOperatoerCount = 2
                    THEN
                        vOprType := '2NDAP';
                    ELSIF vOperatoerCount = 3
                    THEN
                        vOprType := '3RDAP';
                    ELSIF vOperatoerCount = 4
                    THEN
                        vOprType := '4THAP';
                    END IF;
                END IF;



                l_envelope2 :=
                       '<!--Zero or more repetitions:-->

            <xsd:relPartyRecInfoList>

               <!--Optional:-->

               <xsd:addressType>Mailing</xsd:addressType>

               <!--Optional:-->

               <xsd:city>'
                    || m.CITY
                    || '</xsd:city>

               <!--Optional:-->

               <xsd:country>BD</xsd:country>

               <!--Optional:-->

               <xsd:custId>'
                    || m.CUST_CODE
                    || '</xsd:custId>
                    
               <!--Optional:-->

               <xsd:emailAddr>'
                    || m.MAIL_ID
                    || '</xsd:emailAddr>

               <!--Optional:-->

               <xsd:firstName>'
                    || m.FIRST_NAME
                    || '</xsd:firstName>

               <!--Optional:-->

               <xsd:lastName>'
                    || m.LAST_NAME
                    || '</xsd:lastName>

               <!--Optional:-->

               <xsd:middleName/>

               <!--Optional:-->

               <xsd:name>'
                    || m.NME
                    || '</xsd:name>

               <!--Optional:-->

               <xsd:phoneNum>'
                    || m.MOBILE_NO
                    || '</xsd:phoneNum>

               <!--Optional:-->

               <xsd:postalCode>'
                    || m.POSTAL_CODE
                    || '</xsd:postalCode>

               <!--Optional:-->

               <xsd:recDelFlg>N</xsd:recDelFlg>

               <!--Optional:-->

               <xsd:relAddr1>'
                    || m.ADD_LINE1
                    || '</xsd:relAddr1>

               <!--Optional:-->

               <xsd:relAddr2>'
                    || m.ADD_LINE2
                    || '</xsd:relAddr2>

               <!--Optional:-->

               <xsd:relPartyCode>'
                    || vOprType
                    || '</xsd:relPartyCode>

               <!--Optional:-->

               <xsd:relPartyContactInfo>

                  <!--Optional:-->

                  <xsd:addressType/>

                  <!--Optional:-->

                  <xsd:city/>

                  <!--Optional:-->

                  <xsd:country/>

                  <!--Optional:-->

                  <xsd:emailAddr/>

                  <!--Optional:-->

                  <xsd:phoneNum/>

                  <!--Optional:-->

                  <xsd:postalCode/>

                  <!--Optional:-->

                  <xsd:relAddr1/>

                  <!--Optional:-->

                  <xsd:relAddr2/>

                  <!--Optional:-->

                  <xsd:stateProv/>

               </xsd:relPartyContactInfo>

               <!--Optional:-->

               <xsd:relPartyType>A</xsd:relPartyType>

               <!--Optional:-->

               <xsd:relPartyTypeDesc>Authorized Signatory</xsd:relPartyTypeDesc>

               <!--Optional:-->

               <xsd:stateProv>Dhaka</xsd:stateProv>

               <!--Optional:-->

               <xsd:titlePrefix>MR</xsd:titlePrefix>

            </xsd:relPartyRecInfoList>

            <!--Zero or more repetitions:-->

            <xsd:relatedPartyAddList>

               <!--Optional:-->

               <xsd:desigcode>'
                    || vOprType
                    || '</xsd:desigcode>

               <!--Optional:-->

               <xsd:excludecombstmtflg>Y</xsd:excludecombstmtflg>
               
               <!--Optional:-->
               
               <xsd:rpcif>'
                    || m.CUST_CODE
                    || '</xsd:rpcif>

               <!--Optional:-->

               <xsd:rpdepnotflg>N</xsd:rpdepnotflg>

               <!--Optional:-->

               <xsd:rplaovnotflg>N</xsd:rplaovnotflg>

               <!--Optional:-->

               <xsd:rpsiflg>N</xsd:rpsiflg>

               <!--Optional:-->

               <xsd:rpstmtflg>Y</xsd:rpstmtflg>

            </xsd:relatedPartyAddList>';

                l_envelope := l_envelope || l_envelope2;
            END LOOP;
        END IF;

        IF vAcType = 'C'
        THEN
            vOcuCode := 'AS';
        ELSE
            vOcuCode := 'AR';
        END IF;



        FOR k IN (SELECT a.SECTOR_CODE,
                         b.SHORT_DESC     SHORT_DESC,
                         b.OCU_CODE       OCU_CODE,
                         a.rm_code        rm_code,
                         a.cust_no
                    FROM EMOB.MB_ACCOUNT_MST a, EMOB.MB_PRODUCT_MST B
                   WHERE A.AC_TYPE_ID = B.AC_TYPE_ID AND A.AC_ID = pAcId)
        LOOP
            ---Added for EKYC---
            SELECT SUBSTR (CORCOD, 1, 1) SECTOR_CODE, CORCOD SUB_SEC_CODE
              INTO vSectCode, vSubSecCode
              FROM EMOB.STCODMAS  A
                   JOIN EMOB.MB_CUSTOMER_MST B
                       ON (A.SOFCOD = B.OCCUPATION_CODE)
             WHERE A.HARCOD = 'OCC' AND B.CUST_NO = k.cust_no;



            l_envelope3 :=
                   ' <!--Optional:-->

            <xsd:notes></xsd:notes>

            <!--Optional:-->
            <xsd:occupationcode>'
                || vOcuCode
                || '</xsd:occupationcode>
            <!--Optional:-->

            <xsd:paidChqRetFlg></xsd:paidChqRetFlg>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <xsd:rmcode>'
                || k.rm_code
                || '</xsd:rmcode>
            <!--Optional:-->

            <xsd:rpavbl>1</xsd:rpavbl>

            <!--Optional:-->

            <xsd:schmCode>'
                || k.SHORT_DESC
                || '</xsd:schmCode>
            <!--Optional:-->
            <xsd:sectorcode>'
                || vSectCode
                || '</xsd:sectorcode>
            <!--Optional:-->

            <xsd:smsalert>AB</xsd:smsalert>

            <!--Optional:-->
            <xsd:solid>777</xsd:solid>
            <!--Optional:-->

            <xsd:subsectorcode>'
                || vSubSecCode
                || '</xsd:subsectorcode>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

            <!--Optional:-->

            <xsd:waiverfield></xsd:waiverfield>

            <!--Optional:-->

            <xsd:whtaxlvl>A</xsd:whtaxlvl>

            <!--Optional:-->

            <xsd:whtaxpcnt>2</xsd:whtaxpcnt>

            <!--Optional:-->

            <xsd:wtaxamountscopeflg>P</xsd:wtaxamountscopeflg>

         </axis:request>

      </axis:openSavingBankingAccount>

   </soapenv:Body>

</soapenv:Envelope>';
        --- l_envelope := l_envelope || l_envelope2;

        END LOOP;


        BEGIN
            API_XML_LOG (pOprType        => 'SAVING_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope2,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        IF NVL (pErrorFlag, 'N') = 'F'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope || l_envelope3,
                    p_transfer_timeout   => 20 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail' || pOracleMessage;

                BEGIN
                    API_XML_LOG (pOprType        => 'SAVING_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => vCustNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope || l_envelope2,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (
                pOprType        => 'SAVING_OPEN',
                pRefNo          => pAcId,
                pDrAcNo         => pAcNo,
                pCrAcNo         => vCustNo,
                pFileId         => vFileId,
                pInXMl          =>
                    l_envelope || l_envelope2 || l_envelope3 || l_envelope4,
                pOutXml         => vOutXml1.getClobVal (),
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => pLogId,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
                 SELECT acno.AC_NO, rescode.RES_CODE, resmsg.RES_MSG
                   INTO pAcNo, vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:openSavingBankingAccountResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:openSavingBankingAccountResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:openSavingBankingAccountResponse//ax219:accountNumber'
                            PASSING vOutXml1
                            COLUMNS AC_NO       VARCHAR2 (1024) PATH '/ax219:accountNumber')
                        acno;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'SAVING_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => vCustNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'SAVING_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        pErrorMsg := vResMsg;

        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C)- ' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CUST_CIF_DETAILS (
        pCustId               VARCHAR2,
        pLogId                VARCHAR2,
        pCusInfoRec       OUT EMOB.GLOBAL_CBS_ALL_API.CusInfoRec,
        pAddressInfoRec   OUT EMOB.GLOBAL_CBS_ALL_API.CusAddressRec,
        pCusDocRec        OUT EMOB.GLOBAL_CBS_ALL_API.CusDocRec,
        pCusContRec       OUT EMOB.GLOBAL_CBS_ALL_API.CusContactRec,
        pErrorFlag        OUT VARCHAR2,
        pErrorMsg         OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          PLS_INTEGER;
        vApiUrl          VARCHAR2 (1024);
        vAddLine1        VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">
               
   <soapenv:Header/>

   <soapenv:Body>

      <axis:GetCbsCustomerInfo>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:customerId>'
            || pCustId
            || '</xsd:customerId>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:GetCbsCustomerInfo>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'CIFQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'S') = 'F'
        THEN
            RAISE vMyException;
        END IF;

        BEGIN
            API_XML_LOG (pOprType        => 'CIFQUERY',
                         pRefNo          => pCustId,
                         pDrAcNo         => pCustId,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'S') = 'F'
        THEN
            RAISE vMyException;
        END IF;


        BEGIN
                        SELECT custype.CUST_TYPE,
                               branchcode.BRANCH_CODE,
                               cusname.CUST_NAME,
                               fname.FATHER_NAME,
                               mname.MOTHER_NAME,
                               mstatus.MARITIAL_STATUS,
                               ocucode.OCUPATION_CODE,
                               spousename.SPOUSE_NAME,
                               dob.DOB,
                               -- city.CITY,
                               gender.GENDER,
                               --  mail.MAIL,
                               mobile.MOBILE
                          INTO pCusInfoRec (1).CUST_TYPE,
                               pCusInfoRec (1).BRANCH_CODE,
                               pCusInfoRec (1).CUST_NAME,
                               pCusInfoRec (1).FATHER_NAME,
                               pCusInfoRec (1).MOTHER_NAME,
                               pCusInfoRec (1).MARITIAL_STATUS,
                               pCusInfoRec (1).OCUPATION_CODE,
                               pCusInfoRec (1).SPOUSE_NAME,
                               pCusInfoRec (1).DOB,
                               --  pCusInfoRec (1).City,
                               pCusInfoRec (1).GENGER,
                               -- pCusInfoRec (1).MAIL_ID,
                               pCusInfoRec (1).MOBILE_NO
                          FROM XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:branchCode[1]'
                                   PASSING vOutXml1
                                   COLUMNS BRANCH_CODE        VARCHAR2 (1024) PATH '/ax219:branchCode')
                               branchcode,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:constitutionCode[1]'
                                   PASSING vOutXml1
                                   COLUMNS CUST_TYPE          VARCHAR2 (1024) PATH '/ax219:constitutionCode[1]')
                               custype,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:customerName[1]'
                                   PASSING vOutXml1
                                   COLUMNS CUST_NAME          VARCHAR2 (1024) PATH '/ax219:customerName')
                               cusname,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:fatherName[1]'
                                   PASSING vOutXml1
                                   COLUMNS FATHER_NAME        VARCHAR2 (1024) PATH '/ax219:fatherName')
                               fname,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:motherName[1]'
                                   PASSING vOutXml1
                                   COLUMNS MOTHER_NAME        VARCHAR2 (1024) PATH '/ax219:motherName')
                               mname,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:maritalStatus[1]'
                                   PASSING vOutXml1
                                   COLUMNS MARITIAL_STATUS    VARCHAR2 (1024) PATH '/ax219:maritalStatus')
                               mstatus,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:occupationCode[1]'
                                   PASSING vOutXml1
                                   COLUMNS OCUPATION_CODE     VARCHAR2 (1024) PATH '/ax219:occupationCode')
                               ocucode,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:spouseName[1]'
                                   PASSING vOutXml1
                                   COLUMNS SPOUSE_NAME        VARCHAR2 (1024) PATH '/ax219:spouseName')
                               spousename,
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:birthDate[1]'
                                   PASSING vOutXml1
                                   COLUMNS DOB                VARCHAR2 (1024) PATH '/ax219:birthDate')
                               dob,
                               /*XMLTABLE (

                               XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",

                                              'http://fi/xsd' AS "ax219"),
                               '//ns:GetCbsCustomerInfoResponse//ax219:city[1]'

                               PASSING vOutXml1

                               COLUMNS CITY  VARCHAR2 (1024)
                                          PATH '/ax219:city') city,*/

                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:gender[1]'
                                   PASSING vOutXml1
                                   COLUMNS GENDER             VARCHAR2 (1024) PATH '/ax219:gender')
                               gender, /*

                                XMLTABLE (

                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",

                                                  'http://fi/xsd' AS "ax219"),

                                   '//ns:GetCbsCustomerInfoResponse//ax219:phoneEmailInfoResponses[2]//ax219:emailInfo[2]'

                                   PASSING vOutXml1

                                   COLUMNS MAIL VARCHAR2 (1024) PATH '/ax219:emailInfo') mail,*/
                               XMLTABLE (
                                   XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                  'http://fi/xsd' AS "ax219"),
                                   '//ns:GetCbsCustomerInfoResponse//ax219:phoneEmailInfoResponses[1]//ax219:phoneNumLocalCode[1]'
                                   PASSING vOutXml1
                                   COLUMNS MOBILE             VARCHAR2 (1024) PATH '/ax219:phoneNumLocalCode')
                               mobile;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                pErrorMsg := 'No Data Found for This Customer from CBS';
                RAISE vMyException;
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CIFQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                IF NVL (pErrorFlag, 'S') = 'F'
                THEN
                    RAISE vMyException;
                END IF;

                RAISE vMyException;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorMsg := pErrorMsg || ' ' || pOracleMessage;

            pErrorFlag := 'F';
    END;



    PROCEDURE GET_AC_DETAILS (pAcNo             VARCHAR2,
                              pLogId            VARCHAR2,
                              pBranchCode   OUT VARCHAR2,
                              pMobileNo     OUT VARCHAR2,
                              pErrorFlag    OUT VARCHAR2,
                              pErrorMsg     OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vFileId          PLS_INTEGER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';

        --- 2251923125001

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:getAccountDetails>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:accountNumber>'
            || pAcNo
            || '</xsd:accountNumber>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:getAccountDetails>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices', ---vApiUrl || '/AgentBanking/AccountInquiry',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl', ---vApiUrl || '/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope, /*
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123',*/
                    p_transfer_timeout   => 10);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'AC_QUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'S') = 'F'
        THEN
            RAISE vMyException;
        END IF;

        BEGIN
            API_XML_LOG (pOprType        => 'AC_QUERY',
                         pRefNo          => pAcNo,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'S') = 'F'
        THEN
            RAISE vMyException;
        END IF;

        BEGIN
                    SELECT branchcode.BRANCH_CODE, mobile.MOBILE
                      INTO pBranchCode, pMobileNo
                      FROM XMLTABLE (
                               XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                              'http://city/xsd' AS "ax2359"),
                               '//ns:getAccountDetailsResponse//ax2359:responseData//ax2359:solId'
                               PASSING vOutXml1
                               COLUMNS BRANCH_CODE    VARCHAR2 (1024) PATH '/ax2359:solId')
                           branchcode,
                           XMLTABLE (
                               XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                              'http://city/xsd' AS "ax2359"),
                               '//ns:getAccountDetailsResponse//ax2359:responseData//ax2359:contactNumber'
                               PASSING vOutXml1
                               COLUMNS MOBILE         VARCHAR2 (1024) PATH '/ax2359:contactNumber')
                           mobile;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';

                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'AC_QUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                IF NVL (pErrorFlag, 'S') = 'F'
                THEN
                    RAISE vMyException;
                END IF;

                RAISE vMyException;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorMsg := pErrorMsg || ' ' || pOracleMessage;

            pErrorFlag := 'F';
    END;



    PROCEDURE TRANSACTION_API (pDrAcNo        IN     VARCHAR2,
                               pCrAcNo        IN     VARCHAR2,
                               pTrnAmount     IN     VARCHAR2,
                               pNarration     IN     VARCHAR2,
                               pLogId                VARCHAR2,
                               pCbsRefNo         OUT VARCHAR2,
                               pCbsTranDate      OUT VARCHAR2,
                               pErrorFlag        OUT VARCHAR2,
                               pErrorMsg         OUT VARCHAR2)
    IS
        vOutXml1       XMLTYPE;
        l_envelope     CLOB;
        vApiUrl        VARCHAR2 (1024);
        vOracleMsg     VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vResMsg        VARCHAR2 (3000);
        vResCode       VARCHAR2 (10);
        vFileId        NUMBER := 0;
    BEGIN
        pErrorFlag := 'N';

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        /* ENVELOPE GENERATE */

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:doFinacleTransaction>

         <!--Optional:-->
         
         <axis:request>

            <!--Optional:-->

            <xsd:creditAccount>'
            || pCrAcNo
            || '</xsd:creditAccount>

            <!--Optional:-->

            <xsd:currencyCode>BDT</xsd:currencyCode>

            <!--Optional:-->

            <xsd:debitAccount>'
            || pDrAcNo
            || '</xsd:debitAccount>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:remarks>'
            || pNarration
            || '</xsd:remarks>
            <!--Optional:-->
            <xsd:transactionAmount>'
            || pTrnAmount
            || '</xsd:transactionAmount>
            <!--Optional:-->
            <xsd:username>cityagentapp</xsd:username>
         </axis:request>

      </axis:doFinacleTransaction>

   </soapenv:Body>

</soapenv:Envelope>

';

        BEGIN
            API_XML_LOG (pOprType        => 'TRANSACTION',
                         pRefNo          => NULL,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => NULL,
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                vOracleMsg := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'N') = 'F'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail' || SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'TRANSACTION',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'TRANSACTION',
                         pRefNo          => NULL,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        BEGIN
                  SELECT rescode.RES_CODE,
                         resmsg.RES_MSG,
                         refnum.REF_NUM,
                         trandatetime.DATE_TIME
                    INTO vResCode,
                         vResMsg,
                         pCbsRefNo,
                         pCbsTranDate
                    FROM XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:doFinacleTransactionResponse//ax258:responseCode'
                             PASSING vOutXml1
                             COLUMNS RES_CODE     VARCHAR2 (1024) PATH '/ax258:responseCode')
                         rescode,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:doFinacleTransactionResponse//ax258:responseMessage'
                             PASSING vOutXml1
                             COLUMNS RES_MSG      VARCHAR2 (1024) PATH '/ax258:responseMessage')
                         resmsg,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:doFinacleTransactionResponse//ax258:transactionRefNumber'
                             PASSING vOutXml1
                             COLUMNS REF_NUM      VARCHAR2 (1024) PATH '/ax258:transactionRefNumber')
                         refnum,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:doFinacleTransactionResponse//ax258:transactionDateTime'
                             PASSING vOutXml1
                             COLUMNS DATE_TIME    VARCHAR2 (1024) PATH '/ax258:transactionDateTime')
                         trandatetime;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem' || SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'TRANSACTION',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pErrorMsg := vResMsg;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE TRAN_REVERSE_API (pDrAcNo          IN     VARCHAR2,
                                pCrAcNo          IN     VARCHAR2,
                                pTrnAmount       IN     VARCHAR2,
                                pNarration       IN     VARCHAR2,
                                pLogId                  VARCHAR2,
                                pOrgRefDocNo            VARCHAR2,
                                pOrgTranDtTime          VARCHAR2,
                                pCbsRefNo           OUT VARCHAR2,
                                pCbsTranDate        OUT VARCHAR2,
                                pErrorFlag          OUT VARCHAR2,
                                pErrorMsg           OUT VARCHAR2)
    IS
        vOutXml1       XMLTYPE;
        l_envelope     CLOB;
        vApiUrl        VARCHAR2 (1024);
        vOracleMsg     VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vResMsg        VARCHAR2 (3000);
        vResCode       VARCHAR2 (10);
        vFileId        NUMBER := 0;
    BEGIN
        pErrorFlag := 'N';

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        /* ENVELOPE GENERATE */

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:reverseFinacleTransaction>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:creditAccount>'
            || pCrAcNo
            || '</xsd:creditAccount>

            <!--Optional:-->

            <xsd:currencyCode>BDT</xsd:currencyCode>

            <!--Optional:-->

            <xsd:debitAccount>'
            || pDrAcNo
            || '</xsd:debitAccount>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:remarks>'
            || pNarration
            || '</xsd:remarks>

            <!--Optional:-->

            <xsd:transactionAmount>'
            || pTrnAmount
            || '</xsd:transactionAmount>

            <!--Optional:-->

            <xsd:transactionDateTime>'
            || pOrgTranDtTime
            || '</xsd:transactionDateTime>

            <!--Optional:-->

            <xsd:transactionRefNumber>'
            || pOrgRefDocNo
            || '</xsd:transactionRefNumber>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:reverseFinacleTransaction>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices', ---'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail' || SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'REVERSE',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'REVERSE',
                         pRefNo          => NULL,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        BEGIN
                  SELECT rescode.RES_CODE,
                         resmsg.RES_MSG,
                         refnum.REF_NUM,
                         trandatetime.DATE_TIME
                    INTO vResCode,
                         vResMsg,
                         pCbsRefNo,
                         pCbsTranDate
                    FROM XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:reverseFinacleTransactionResponse//ax258:responseCode'
                             PASSING vOutXml1
                             COLUMNS RES_CODE     VARCHAR2 (1024) PATH '/ax258:responseCode')
                         rescode,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:reverseFinacleTransactionResponse//ax258:responseMessage'
                             PASSING vOutXml1
                             COLUMNS RES_MSG      VARCHAR2 (1024) PATH '/ax258:responseCode')
                         resmsg,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:reverseFinacleTransactionResponse//ax258:transactionRefNumber'
                             PASSING vOutXml1
                             COLUMNS REF_NUM      VARCHAR2 (1024) PATH '/ax258:transactionRefNumber')
                         refnum,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax258"),
                             '//ns:reverseFinacleTransactionResponse//ax258:transactionDateTime'
                             PASSING vOutXml1
                             COLUMNS DATE_TIME    VARCHAR2 (1024) PATH '/ax258:transactionDateTime')
                         trandatetime;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem' || SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'TRANSACTION',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pErrorMsg := vResMsg;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;

    ----------------
    PROCEDURE CW_TRAN_REVERSE_API (pOrgRefDocNo         VARCHAR2,
                                   pOrgTranDtTime       VARCHAR2,
                                   pCbsRefNo        OUT VARCHAR2,
                                   pCbsTranDate     OUT VARCHAR2,
                                   pErrorFlag       OUT VARCHAR2,
                                   pErrorMsg        OUT VARCHAR2)
    IS
        vOutXml1       XMLTYPE;
        l_envelope     CLOB;
        vApiUrl        VARCHAR2 (1024);
        vOracleMsg     VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vResMsg        VARCHAR2 (3000);
        vResCode       VARCHAR2 (10);
        vFileId        NUMBER := 0;
    BEGIN
        pErrorFlag := 'N';

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        /* ENVELOPE GENERATE */
        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">
   <soapenv:Header/>
   <soapenv:Body>
      <axis:doFinacleTransactionReversal>
         <!--Optional:-->
         <axis:request>
            <!--Optional:-->
            <xsd:password>Cbl#2021@Agent</xsd:password>
            <!--Optional:-->
            <xsd:tranDate>'
            || pOrgTranDtTime
            || '</xsd:tranDate>
            <!--Optional:-->
            <xsd:tranId>'
            || pOrgRefDocNo
            || '</xsd:tranId>
            <!--Optional:-->
            <xsd:username>cityagentapp</xsd:username>
         </axis:request>
      </axis:doFinacleTransactionReversal>
   </soapenv:Body>
</soapenv:Envelope>';


        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    API_XML_LOG (pOprType        => 'CW_TRAN_REV',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                pErrorMsg := 'API Request Fail' || SQLERRM;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'CW_TRAN_REV',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        BEGIN
                 /*  SELECT rescode.RES_CODE,
                          resmsg.RES_MSG,
                          refnum.REF_NUM
                     INTO vResCode,
                          vResMsg,
                          pCbsRefNo
                     FROM XMLTABLE (
                              XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                             'http://city/xsd' AS "ax235"),
                              '//ns:doFinacleTranReversalResponse//ax235:responseCode'
                              PASSING vOutXml1
                              COLUMNS RES_CODE  VARCHAR2 (1024)
                                          PATH '/ax235:responseCode') rescode ,
                          XMLTABLE (
                              XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                             'http://city/xsd' AS "ax235"),
                              '//ns:doFinacleTranReversalResponse//ax235:responseMessage'
                              PASSING vOutXml1
                              COLUMNS RES_MSG  VARCHAR2 (1024)
                                          PATH '/ax235:responseMessage') resmsg,
                          XMLTABLE (
                              XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                             'http://city/xsd' AS "ax235"),
                              '//ns:doFinacleTranReversalResponse//ax235:revTrnId'
                              PASSING vOutXml1
                              COLUMNS REF_NUM  VARCHAR2 (1024)
                                          PATH '/ax235:revTrnId') refnum ;*/

                 SELECT rescode.RES_CODE, resmsg.RES_MSG, efnum.REF_NUM
                   INTO vResCode, vResMsg, pCbsRefNo
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax235"),
                            '//ns:doFinacleTransactionReversalResponse//ax235:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax235:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax235"),
                            '//ns:doFinacleTransactionReversalResponse//ax235:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax235:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax235"),
                            '//ns:doFinacleTransactionReversalResponse//ax235:revTrnIdRecList[1]//ax235:revTrnId[1]'
                            PASSING vOutXml1
                            COLUMNS REF_NUM     VARCHAR2 (1024) PATH '/ax235:revTrnId[1]')
                        efnum;
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    API_XML_LOG (pOprType        => 'CW_TRAN_REV',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                pErrorMsg := 'Response Parsing Problem';
                RAISE vMyException;
        END;


        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;

    PROCEDURE CUST_INQUIRY_API (pCustId           VARCHAR2,
                                pName         OUT VARCHAR2,
                                pContact      OUT VARCHAR2,
                                pAddress      OUT VARCHAR2,
                                pBranchCode   OUT VARCHAR2,
                                pErrorFlag    OUT VARCHAR2,
                                pErrorMsg     OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:GetCbsCustomerInfo>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:customerId>'
            || pCustId
            || '</xsd:customerId>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:GetCbsCustomerInfo>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'CUS_QUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'CUS_QUERY',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustId,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                  SELECT nme.CUST_NAME,
                         cnt.CONTACT,
                         addr.ADDRLIN1 || ' ' || addr2.ADDRLIN2 || ' ' || city.CITY,
                         rescode.RES_CODE,
                         resmsg.RES_MSG
                    INTO pName,
                         pContact,
                         pAddress,
                         vResCode,
                         vResMsg
                    FROM XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:customerName'
                             PASSING vOutXml1
                             COLUMNS CUST_NAME    VARCHAR2 (1024) PATH '/ax219:customerName')
                         nme,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:phoneEmailInfoResponses[1]//ax219:phoneNumLocalCode[1]'
                             PASSING vOutXml1
                             COLUMNS CONTACT      VARCHAR2 (1024) PATH '/ax219:phoneNumLocalCode')
                         cnt,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:retCustAddressInfoResponses[1]//ax219:addrLine1[1]'
                             PASSING vOutXml1
                             COLUMNS ADDRLIN1     VARCHAR2 (1024) PATH '/ax219:addrLine1')
                         addr,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:retCustAddressInfoResponses[1]//ax219:addrLine2[1]'
                             PASSING vOutXml1
                             COLUMNS ADDRLIN2     VARCHAR2 (1024) PATH '/ax219:addrLine2')
                         addr2,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:retCustAddressInfoResponses[1]//ax219:city[1]'
                             PASSING vOutXml1
                             COLUMNS CITY         VARCHAR2 (1024) PATH '/ax219:city')
                         city,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:responseCode'
                             PASSING vOutXml1
                             COLUMNS RES_CODE     VARCHAR2 (1024) PATH '/ax219:responseCode')
                         rescode,
                         XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://fi/xsd' AS "ax219"),
                             '//ns:GetCbsCustomerInfoResponse//ax219:responseMessage'
                             PASSING vOutXml1
                             COLUMNS RES_MSG      VARCHAR2 (1024) PATH '/ax219:responseMessage')
                         resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CUSQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C)- ' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;



    PROCEDURE DDUP_CHECK_API (pCustId        IN OUT VARCHAR2,
                              pName                 VARCHAR2,
                              pDob                  VARCHAR2,
                              pMobile               VARCHAR2,
                              pNationality          VARCHAR2,
                              pNid                  VARCHAR2,
                              pPassport             VARCHAR2,
                              pLogId                NUMBER,
                              pApiResCode       OUT VARCHAR2,
                              pErrorFlag        OUT VARCHAR2,
                              pErrorMsg         OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
        vCustFor         VARCHAR2 (10);
        vChannel         VARCHAR2 (100);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';



        BEGIN
            SELECT NVL (CUST_FOR, 'C')
              INTO vCustFor
              FROM EMOB.MB_CUSTOMER_MST
             WHERE TRIM (CUST_CODE) = TRIM (pCustId);
        EXCEPTION
            WHEN OTHERS
            THEN
                vCustFor := 'C';
        --  pErrorMsg := 'Channel Code Not Found.';

        --  RAISE vMyException;

        END;



        IF vCustFor = 'C'
        THEN
            vChannel := 'FINACLE';
        ELSIF vCustFor = 'I'
        THEN
            vChannel := 'ABABIL';
        END IF;

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:doDDUPCheck>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:customerId>'
            || pCustId
            || '</xsd:customerId>

            <!--Optional:-->

            <xsd:customerName>'
            || pName
            || '</xsd:customerName>

            <!--Optional:-->

            <xsd:dob>'
            || pDob
            || '</xsd:dob>

            <!--Optional:-->

            <xsd:mobileNumber>'
            || pMobile
            || '</xsd:mobileNumber>

            <!--Optional:-->

            <xsd:nationality>'
            || pNationality
            || '</xsd:nationality>

            <!--Optional:-->

            <xsd:nid>'
            || pNid
            || '</xsd:nid>

            <!--Optional:-->

            <xsd:passport>'
            || pPassport
            || '</xsd:passport>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:sourceType>'
            || vChannel
            || '</xsd:sourceType>

            <!--Optional:-->
            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:doDDUPCheck>
   </soapenv:Body>
</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'DUP_CHECK',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'DUP_CHECK',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG, cusid.CUST_ID
                   INTO vResCode, vResMsg, pCustId                  --,pCustId
                   FROM XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            'soap:Envelope/soap:Body/ns:doDDUPCheckResponse/ns:return/ax264:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR (100) PATH '/ax264:responseCode')
                        rescode,
                        XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            'soap:Envelope/soap:Body/ns:doDDUPCheckResponse/ns:return/ax264:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR (1024) PATH '/ax264:responseMessage')
                        resmsg,
                        XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            'soap:Envelope/soap:Body/ns:doDDUPCheckResponse/ns:return/ax264:dedupDataResponses/ax264:customerId'
                            PASSING vOutXml1
                            COLUMNS CUST_ID     VARCHAR (20) PATH '/ax264:customerId')
                        cusid;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CUSQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;
        --RAISE vMyException;
        END;

        pApiResCode := vResCode;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C)- ' || vResMsg;
        --RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;

    PROCEDURE DDUP_CHECK_API_NEW (pCustId        IN OUT VARCHAR2,
                                  pServiceType          VARCHAR2,
                                  pName                 VARCHAR2,
                                  pDob                  VARCHAR2,
                                  pMobile               VARCHAR2,
                                  pNationality          VARCHAR2,
                                  pNid                  VARCHAR2,
                                  pPassport             VARCHAR2,
                                  pLogId                NUMBER,
                                  pApiResCode       OUT VARCHAR2,
                                  pErrorFlag        OUT VARCHAR2,
                                  pErrorMsg         OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
        vErrorMsg        VARCHAR2 (1024);
        vCustFor         VARCHAR2 (10);
        vChannel         VARCHAR2 (100);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:doDDUPCheck>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->
            
            <xsd:customerId>'
            || pCustId
            || '</xsd:customerId>

            <!--Optional:-->

            <xsd:customerName>'
            || pName
            || '</xsd:customerName>

            <!--Optional:-->

            <xsd:dob>'
            || pDob
            || '</xsd:dob>

            <!--Optional:-->

            <xsd:mobileNumber>'
            || pMobile
            || '</xsd:mobileNumber>

            <!--Optional:-->

            <xsd:nationality>'
            || pNationality
            || '</xsd:nationality>
            
            <!--Optional:-->

            <xsd:nid>'
            || pNid
            || '</xsd:nid>
            
            <!--Optional:-->

            <xsd:passport>'
            || pPassport
            || '</xsd:passport>

            <!--Optional:-->
            <xsd:password>Cbl#2021@Agent</xsd:password>
            <!--Optional:-->

            <xsd:sourceType>'
            || pServiceType
            || '</xsd:sourceType>

            <!--Optional:-->
            <xsd:username>cityagentapp</xsd:username>
         </axis:request>
      </axis:doDDUPCheck>
   </soapenv:Body>
</soapenv:Envelope>';


        BEGIN
            API_XML_LOG (pOprType        => 'DUP_CHECK',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'DUP_CHECK',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => vErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'DUP_CHECK',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        IF vOutXml1 IS NULL
        THEN
            pErrorMsg := 'No Response From Dedupe API.';
            RAISE vMyException;
        END IF;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG, cusid.CUST_ID
                   INTO vResCode, vResMsg, pCustId                  --,pCustId
                   FROM XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            'soap:Envelope/soap:Body/ns:doDDUPCheckResponse/ns:return/ax264:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR (100) PATH '/ax264:responseCode')
                        rescode,
                        XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            'soap:Envelope/soap:Body/ns:doDDUPCheckResponse/ns:return/ax264:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR (1024) PATH '/ax264:responseMessage')
                        resmsg,
                        XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            'soap:Envelope/soap:Body/ns:doDDUPCheckResponse/ns:return/ax264:dedupDataResponses/ax264:customerId'
                            PASSING vOutXml1
                            COLUMNS CUST_ID     VARCHAR (20) PATH '/ax264:customerId')
                        cusid;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'DUP_CHECK',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;
        END;

        pApiResCode := vResCode;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
        ELSIF NVL (vResCode, '00') = '00'
        THEN
            pErrorMsg := 'Dedupe Checking API not Responding.' || vResCode;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;



    PROCEDURE AML_API (pCustomerName    IN     VARCHAR2,
                       pDob             IN     VARCHAR2,
                       pNID             IN     VARCHAR2,
                       pPassport        IN     VARCHAR2,
                       pLogId           IN     VARCHAR2,
                       pResCode            OUT VARCHAR2,
                       pOracleMessage      OUT VARCHAR2,
                       pErrorMsg           OUT VARCHAR2,
                       pErrorFlag          OUT VARCHAR2)
    IS
        l_envelope     CLOB;
        vOutxml1       XMLTYPE;
        vApiUrl        VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vNotifyFlag    VARCHAR2 (10);
        vResCode       VARCHAR2 (1024);
        vResMsg        VARCHAR2 (1024);
        vFileId        NUMBER;
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'DDUPE';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:doSDNCheck>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:customerName>'
            || pCustomerName
            || '</xsd:customerName>

            <!--Optional:-->

            <xsd:dob>'
            || pDob
            || '</xsd:dob>

            <!--Optional:-->

            <xsd:nationality></xsd:nationality>

            <!--Optional:-->

            <xsd:nid>'
            || pNID
            || '</xsd:nid>

            <!--Optional:-->

            <xsd:passport>'
            || pPassport
            || '</xsd:passport>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:doSDNCheck>

   </soapenv:Body>

</soapenv:Envelope>';


        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url        => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action     => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope   => l_envelope /*,
                  p_wallet_path   => 'file:/u01/wallets',
                  p_wallet_pwd    => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'AML',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'AML',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG      --,cusid.CUST_ID
                   INTO vResCode, vResMsg                           --,pCustId
                   FROM XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            '//ns:doDDUPCheckResponse'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR (100) PATH './ax264:responseCode')
                        rescode,
                        XMLTABLE (
                            xmlnamespaces (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://fi/xsd' AS "ax264",
                                'http://schemas.xmlsoap.org/soap/envelope/'
                                    AS "soap"),
                            '//ns:doSDNCheckResponse'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR (1024) PATH './ax264:responseMessage')
                        resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'AML',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pResCode := vResCode;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;



    PROCEDURE EFT_REQUEST_API (pReqId                  IN     VARCHAR2,
                               pSenderAcNo             IN     VARCHAR2,
                               pCusCode                IN     VARCHAR2,
                               pReceiverName           IN     VARCHAR2,
                               pReceiverAc             IN     VARCHAR2,
                               pReceiverBranchRoutNo   IN     VARCHAR2,
                               pTrnAmount              IN     VARCHAR2,
                               pRemarks                IN     VARCHAR2,
                               pLogId                         VARCHAR2,
                               pCbsRefNo                  OUT VARCHAR2,
                               pErrorFlag                 OUT VARCHAR2,
                               pErrorMsg                  OUT VARCHAR2)
    IS
        vOracleMsg     VARCHAR2 (1024);
        vResCode       VARCHAR2 (100);
        vResMsg        VARCHAR2 (3000);
        vFileId        NUMBER := 0;
        vApiUrl        VARCHAR2 (1024);
        vOutXml1       XMLTYPE;
        l_envelope     CLOB;
        vMyException   EXCEPTION;
    BEGIN
        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        pErrorMsg := vResMsg || 'test';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        /* ENVELOPE GENERATE */

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:doOtherBankTransaction>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:accType>1</xsd:accType>

            <!--Optional:-->

            <xsd:amount>'
            || pTrnAmount
            || '</xsd:amount>

            <!--Optional:-->

            <xsd:cbsCustomerID>'
            || pCusCode
            || '</xsd:cbsCustomerID>

            <!--Optional:-->

            <xsd:dfiAccNo>'
            || pReceiverAc
            || '</xsd:dfiAccNo>

            <!--Optional:-->

            <xsd:idNumber>'
            || pReqId
            || '</xsd:idNumber>

            <!--Optional:-->
            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:paymentInfo>'
            || pRemarks
            || '</xsd:paymentInfo>

            <!--Optional:-->
            
            <xsd:reason>'
            || pRemarks
            || '</xsd:reason>

            <!--Optional:-->

            <xsd:receiverName>'
            || pReceiverName
            || '</xsd:receiverName>

            <!--Optional:-->

            <xsd:routingNo>'
            || pReceiverBranchRoutNo
            || '</xsd:routingNo>

            <!--Optional:-->

            <xsd:senderAccNo>'
            || pSenderAcNo
            || '</xsd:senderAccNo>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:doOtherBankTransaction>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices', ---'vApiUrl || '/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl'
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    EFT_CALLBACK_API (pBenAcNo      => pReceiverAc,
                                      pBenAcTitle   => pReceiverName,
                                      pEftAmount    => pTrnAmount,
                                      pTranNo       => pReqId,
                                      pRoutingNo    => pReceiverBranchRoutNo,
                                      pLogId        => pLogId,
                                      pTranDate     => SYSDATE,
                                      pCbsRefNo     => pCbsRefNo,
                                      pErrorFlag    => pErrorFlag,
                                      pErrorMsg     => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'Callback API Calling Problem.';
                        RAISE vMyException;
                END;

                IF NVL (pErrorFlag, 'N') = 'Y'
                THEN
                    pErrorMsg := 'Transaction Failed';
                    RAISE vMyException;
                ELSE
                    GOTO END_BLOCK;
                END IF;


                pErrorMsg := 'API Request Fail' || SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'EFT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pSenderAcNo,
                                 pCrAcNo         => pReceiverAc,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF vOutXml1 IS NULL
        THEN
            BEGIN
                EFT_CALLBACK_API (pBenAcNo      => pReceiverAc,
                                  pBenAcTitle   => pReceiverName,
                                  pEftAmount    => pTrnAmount,
                                  pTranNo       => pReqId,
                                  pRoutingNo    => pReceiverBranchRoutNo,
                                  pLogId        => pLogId,
                                  pTranDate     => SYSDATE,
                                  pCbsRefNo     => pCbsRefNo,
                                  pErrorFlag    => pErrorFlag,
                                  pErrorMsg     => pErrorMsg);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Callback API Calling Problem.';
                    RAISE vMyException;
            END;

            IF NVL (pErrorFlag, 'N') = 'Y'
            THEN
                pErrorMsg := 'Transaction Failed';
                RAISE vMyException;
            ELSE
                GOTO END_BLOCK;
            END IF;

            pErrorMsg := 'No Response From API';

            BEGIN
                EMOB.PRC_TRANSACTION_FAIL_LOG (pDocNum       => pReqId,
                                               pTranType     => 'EFT',
                                               pApiError     => pErrorMsg,
                                               pTranStatus   => 'U');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            RAISE vMyException;
        END IF;



        BEGIN
            API_XML_LOG (pOprType        => 'EFT',
                         pRefNo          => NULL,
                         pDrAcNo         => pSenderAcNo,
                         pCrAcNo         => pReceiverAc,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG, refnum.REF_NUM
                   INTO vResCode, vResMsg, pCbsRefNo
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax258"),
                            '//ns:doOtherBankTransactionResponse//ax258:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax258:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax258"),
                            '//ns:doOtherBankTransactionResponse//ax258:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax258:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax258"),
                            '//ns:doOtherBankTransactionResponse//ax258:transactionRefNumber'
                            PASSING vOutXml1
                            COLUMNS REF_NUM     VARCHAR2 (1024) PATH '/ax258:transactionRefNumber')
                        refnum;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem' || SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'EFT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pSenderAcNo,
                                 pCrAcNo         => pReceiverAc,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pErrorMsg := vResMsg;

        IF NVL (vResCode, '00') != '100'
        THEN
            pErrorMsg := vResMsg;
            RAISE vMyException;
        END IF;

       <<END_BLOCK>>
        NULL;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE RTGS_TRANSACTION_API (pReqId                  IN     VARCHAR2,
                                    pSenderAcNo             IN     VARCHAR2,
                                    pSenderName             IN     VARCHAR2,
                                    pReceiverName           IN     VARCHAR2,
                                    pReceiverAc             IN     VARCHAR2,
                                    pReceiverBranchRoutNo   IN     VARCHAR2,
                                    pTrnAmount              IN     VARCHAR2,
                                    pRemarks                IN     VARCHAR2,
                                    pLogId                         VARCHAR2,
                                    pCbsRefNo                  OUT VARCHAR2,
                                    pErrorFlag                 OUT VARCHAR2,
                                    pErrorMsg                  OUT VARCHAR2)
    IS
        vOracleMsg     VARCHAR2 (1024);
        vResCode       VARCHAR2 (100);
        vResMsg        VARCHAR2 (3000);
        vFileId        NUMBER := 0;
        vApiUrl        VARCHAR2 (1024);
        vOutXml1       XMLTYPE;
        l_envelope     CLOB;
        vMyException   EXCEPTION;
    BEGIN
        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        /* ENVELOPE GENERATE */

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:doRTGSTransaction>

         <!--Optional:-->

          <axis:request>

            <!--Optional:-->

            <xsd:amount>'
            || pTrnAmount
            || '</xsd:amount>

            <!--Optional:-->

            <xsd:benAccNo>'
            || pReceiverAc
            || '</xsd:benAccNo>

            <!--Optional:-->

            <xsd:benName>'
            || pReceiverName
            || '</xsd:benName>

            <!--Optional:-->

            <xsd:currency>BDT</xsd:currency>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:payerName>'
            || pSenderName
            || '</xsd:payerName>

            <!--Optional:-->

            <xsd:reason>'
            || pRemarks
            || '</xsd:reason>
            <!--Optional:-->

            <xsd:routingNo>'
            || pReceiverBranchRoutNo
            || '</xsd:routingNo>
            <!--Optional:-->

            <xsd:senderAccNo>'
            || pSenderAcNo
            || '</xsd:senderAccNo>

            <!--Optional:-->

            <xsd:settlementdate>'
            || TO_CHAR (SYSDATE, 'YYMMDD')
            || '</xsd:settlementdate>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>
         
      </axis:doRTGSTransaction>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl',
                    --p_url                => vApiUrl || '/cApps/services/CBLWebServices', ---'/cApps/services/CBLFIWebServices', ---
                    --p_action             =>
                    --vApiUrl || '/cApps/services/CBLWebServices?wsdl', ---'/cApps/services/CBLFIWebServices', ---
                    p_envelope           => l_envelope,
                    /*p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123',*/
                    p_transfer_timeout   => 20);
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    EMOB.PRC_TRANSACTION_FAIL_LOG (
                        pDocNum       => pReqId,
                        pTranType     => 'RTGS',
                        pApiError     => 'No Response',
                        pTranStatus   => 'U');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                pErrorMsg := 'API Request Fail' || SQLERRM;
                DBMS_OUTPUT.PUT_LINE (SQLERRM);

                BEGIN
                    API_XML_LOG (pOprType        => 'RTGS',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pSenderAcNo,
                                 pCrAcNo         => pReceiverAc,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'RTGS',
                         pRefNo          => NULL,
                         pDrAcNo         => pSenderAcNo,
                         pCrAcNo         => pReceiverAc,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        IF vOutXml1 IS NULL
        THEN
            BEGIN
                EMOB.PRC_TRANSACTION_FAIL_LOG (pDocNum       => pReqId,
                                               pTranType     => 'RTGS',
                                               pApiError     => 'No Response',
                                               pTranStatus   => 'U');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            pErrorMsg := 'No Response From API';
            RAISE vMyException;
        END IF;

        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG, refnum.REF_NUM
                   INTO vResCode, vResMsg, pCbsRefNo
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax258"),
                            '//ns:doRTGSTransactionResponse//ax258:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax258:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax258"),
                            '//ns:doRTGSTransactionResponse//ax258:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax258:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax258"),
                            '//ns:doRTGSTransactionResponse//ax258:transactionRefNumber'
                            PASSING vOutXml1
                            COLUMNS REF_NUM     VARCHAR2 (1024) PATH '/ax258:transactionRefNumber')
                        refnum;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem' || SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'RTGS',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pSenderAcNo,
                                 pCrAcNo         => pReceiverAc,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pErrorMsg := vResMsg;

        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CORPORATE_CIF_CREATION_API (pCustNo          VARCHAR2,
                                          pLogId           VARCHAR2,
                                          pAppUser         VARCHAR2,
                                          pResCode     OUT VARCHAR2,
                                          pCustId      OUT VARCHAR2,
                                          pErrorFlag   OUT VARCHAR2,
                                          pErrorMsg    OUT VARCHAR2)
    IS
        l_envelope       VARCHAR2 (32700);
        l_envelope1      VARCHAR2 (32700);
        l_envelope2      VARCHAR2 (32700);
        l_envelope3      VARCHAR2 (32700);
        l_envelope4      VARCHAR2 (32700);
        l_envelope5      VARCHAR2 (32700);
        l_clob_data      VARCHAR2 (32700);
        l_envelope6      VARCHAR2 (32700);
        l_envelope7      VARCHAR2 (32700);
        vCorporateName   VARCHAR2 (1024);
        vOutXml1         XMLTYPE;
        vUnique          VARCHAR2 (10);
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMobile          VARCHAR2 (20);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        pErrorFlag := 'S';

        l_envelope :=
            '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"

                xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd"
            xmlns:xsd1="http://Create.Corporate.Customer.fi/xsd" xmlns:xsd2="http://Corporate.Customer.fi/xsd">
 <soapenv:Header/>
 
 <soapenv:Body>
 
 <axis:CreateCorporateCustomer>

 <!--Optional:-->

 <axis:request>

 <!--Optional:-->

 <xsd:password>Cbl#2021@Agent</xsd:password>

 <!--Optional:-->

 <xsd:username>cityagentapp</xsd:username>

 <!--Optional:-->

 <xsd:bBKSegCode>TRADE</xsd:bBKSegCode>

 <!--Optional:-->

 <xsd1:averageAnnualIncome>0</xsd1:averageAnnualIncome>

 <!--Optional:-->

 <xsd1:businessType>Others</xsd1:businessType>

 <!--Optional:-->

 <xsd1:corpKey></xsd1:corpKey>';



        FOR j
            IN (SELECT DECODE (b.CBS_ADDRESS_TYPE,
                               'Mailing', 'Registered',
                               b.CBS_ADDRESS_TYPE)
                           CBS_ADDRESS_TYPE,
                       a.ADD_LINE1,
                       a.ADD_LINE2,
                       UPPER (NVL (SUBSTR (a.CITY, 1, 5), 'DHAKA'))
                           CITY,
                       NVL (a.POSTAL_CODE, '1207')
                           POSTAL_CODE,
                       UPPER (NVL (a.STATE, 'DHAKA'))
                           STATE,
                       NVL (a.PREF_ADDR, 'Y')
                           PREF_ADDR
                  FROM EMOB.MB_ADDRESS_MST a, EMOB.ST_ADDRESS_TYPE b
                 WHERE ref_no = pCustNo AND a.ADDRESS_TYPE = b.ADDRESS_TYPE)
        LOOP
            l_clob_data :=
                   '<!--Optional:-->

 <xsd1:corporateAddressData>

 <!--Optional:-->

 <xsd2:addressCategory>'
                || j.CBS_ADDRESS_TYPE
                || '</xsd2:addressCategory>

 <!--Optional:-->

 <xsd2:addressLine1>'
                || j.ADD_LINE1
                || '</xsd2:addressLine1>

 <!--Optional:-->

 <xsd2:addressLine2>'
                || j.ADD_LINE2
                || '</xsd2:addressLine2>

 <!--Optional:-->

 <xsd2:city>'
                || j.CITY
                || '</xsd2:city>

 <!--Optional:-->

 <xsd2:country>BD</xsd2:country>

 <!--Optional:-->

 <xsd2:freeTextLabel>Registered</xsd2:freeTextLabel>

 <!--Optional:-->

 <xsd2:holdMailFlag>N</xsd2:holdMailFlag>

 <!--Optional:-->

 <xsd2:preferredAddress>'
                || j.PREF_ADDR
                || '</xsd2:preferredAddress>

 <!--Optional:-->

 <xsd2:preferredFormat>FREE_TEXT_FORMAT</xsd2:preferredFormat>

 <!--Optional:-->

 <xsd2:startDate>'
                || TO_CHAR (TO_TIMESTAMP (SYSDATE),
                            'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                || '</xsd2:startDate>

 <!--Optional:-->

 <xsd2:state>'
                || j.STATE
                || '</xsd2:state>
 <!--Optional:-->

 <xsd2:zip>'
                || j.POSTAL_CODE
                || '</xsd2:zip>



 </xsd1:corporateAddressData>';
            l_envelope1 := l_envelope1 || l_clob_data;
        END LOOP;

        l_clob_data := NULL;
        l_envelope7 := ' <!--Optional:-->
 <xsd1:corporateCoreInterfaceData>
 <!--Optional:-->
 <xsd1:FREECODE7>TRADE</xsd1:FREECODE7>
 </xsd1:corporateCoreInterfaceData>';

        FOR k
            IN (SELECT CBS_DOC_TYPE,
                       CBS_DOC_DESC,
                       (SELECT COUNT (*)
                          FROM emob.mb_document_mst
                         WHERE cust_No = a.cust_no)
                           ct,
                       TO_CHAR (TO_TIMESTAMP (ISSUE_DATE),
                                'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                           ISSUE_DATE,
                       UPPER (NVL (ISSUE_PLACE, 'N/A'))
                           ISSUE_PLACE,
                       TO_CHAR (TO_TIMESTAMP (EXPIRE_DATE),
                                'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                           EXPIRE_DATE,
                       TYPE_DESC,
                       DOCUMENT_TYPE,
                       DOCMENT_NO
                  FROM EMOB.MB_DOCUMENT_MST a, EMOB.ST_DOCUMENT_TYPE B
                 WHERE CUST_NO = pCustNo AND A.DOCUMENT_TYPE = B.DOC_TYPE)
        LOOP
            IF k.CBS_DOC_TYPE = 'PSPRT'
            THEN
                k.EXPIRE_DATE := k.EXPIRE_DATE;
            ELSE
                k.EXPIRE_DATE := NULL;
            END IF;



            IF k.ct = 1
            THEN
                vUnique := 'Y';
            END IF;



            IF k.ct > 1
            THEN
                IF vUnique IS NULL OR vUnique = 'N'
                THEN
                    IF k.CBS_DOC_TYPE IN ('CSNID')
                    THEN
                        vUnique := 'Y';
                    END IF;



                    vUnique := 'Y';
                ELSE
                    vUnique := 'N';
                END IF;
            END IF;



            l_clob_data :=
                   '<!--Zero or more repetitions:-->

 <xsd1:corporateEntityDocumentDataList>

<!--Optional:-->

 <xsd2:countryOfIssue>BD</xsd2:countryOfIssue>

 <!--Optional:-->

 <xsd2:docCode>'
                || k.CBS_DOC_TYPE
                || '</xsd2:docCode>

 <!--Optional:-->

 <xsd2:docDescr>'
                || k.CBS_DOC_DESC
                || '</xsd2:docDescr>

 <!--Optional:-->

 <xsd2:docIssueDate>'
                || k.ISSUE_DATE
                || '</xsd2:docIssueDate>
 <!--Optional:-->

 <xsd2:docExpiryDate>'
                || k.EXPIRE_DATE
                || '</xsd2:docExpiryDate>

 <!--Optional:-->

 <xsd2:docTypeCode>IDENTIFICATION PROOF</xsd2:docTypeCode>

 <!--Optional:-->

 <xsd2:docTypeDescr>IDENTIFICATION</xsd2:docTypeDescr>

 <!--Optional:-->

 <xsd2:identificationType>IDTYPEC3</xsd2:identificationType>

 <!--Optional:-->

 <xsd2:placeOfIssue>'
                || k.ISSUE_PLACE
                || '</xsd2:placeOfIssue>

 <!--Optional:-->

 <xsd2:preferredUniqueId>'
                || vUnique
                || '</xsd2:preferredUniqueId>
 <!--Optional:-->

 <xsd2:referenceNumber>'
                || k.DOCMENT_NO
                || '</xsd2:referenceNumber>
 </xsd1:corporateEntityDocumentDataList>';

            l_envelope2 := l_envelope2 || l_clob_data;
        END LOOP;

        l_clob_data := NULL;

        SELECT FIRST_NAME || ' ' || LAST_NAME
          INTO vCorporateName
          FROM emob.mb_customer_mst
         WHERE cust_no = pCustNo;

        l_envelope3 := '

 <!--Optional:-->

 <xsd1:corporateName>' || vCorporateName || '</xsd1:corporateName>';

        FOR l IN (SELECT MOBILE_NO, MAIL_ID
                    FROM EMOB.MB_CUSTOMER_MST
                   WHERE CUST_NO = pCustNo)
        LOOP
            vMobile := l.MOBILE_NO;
            l_clob_data := '<!--Zero or more repetitions:-->

 <xsd1:corporatePhoneEmailDataList>
 <!--Optional:-->

 <!--Optional:-->
 <xsd2:phoneEmailType>COMMPH1</xsd2:phoneEmailType>
 <!--Optional:-->
 
 <xsd2:phoneNo></xsd2:phoneNo>

<!--Optional:-->

<xsd2:phoneNoCityCode/>

 <!--Optional:-->

 <xsd2:phoneNoCountryCode>88</xsd2:phoneNoCountryCode>

 <!--Optional:-->

 <xsd2:phoneNoLocalCode>' || l.MOBILE_NO || '</xsd2:phoneNoLocalCode>

 <!--Optional:-->

 <xsd2:phoneOrEmail>PHONE</xsd2:phoneOrEmail>

 <!--Optional:-->

 <xsd2:preferredFlag>Y</xsd2:preferredFlag>';



            IF l.MAIL_ID IS NOT NULL
            THEN
                l_clob_data :=
                    l_clob_data || '<!--Optional:-->

               <xsd2:email>' || l.MAIL_ID || '</xsd2:email>

               <!--Optional:-->

               <xsd2:phoneEmailType>COMMEML</xsd2:phoneEmailType>

               <!--Optional:-->

               <xsd2:phoneOrEmail>EMAIL</xsd2:phoneOrEmail>

               <!--Optional:-->

               <xsd2:preferredFlag>Y</xsd2:preferredFlag>';
            END IF;



            l_clob_data :=
                l_clob_data || '</xsd1:corporatePhoneEmailDataList>';

            l_envelope4 := l_envelope4 || l_clob_data;
        END LOOP;

        l_envelope5 := '<!--Optional:-->



 <xsd1:corporatePrefMiscData>

 <!--Optional:-->

 <xsd2:amount1></xsd2:amount1>

 <!--Optional:-->

 <xsd2:amount2></xsd2:amount2>

 <!--Optional:-->

 <xsd2:amount3></xsd2:amount3>

 <!--Optional:-->

 <xsd2:amount4></xsd2:amount4>

 <xsd2:creditDiscountPcnt>0</xsd2:creditDiscountPcnt>

 <!--Optional:-->

 <xsd2:date1>2099-12-31T00:00:00.000</xsd2:date1>

 <!--Optional:-->

 <xsd2:date2></xsd2:date2>

 <xsd2:debitDiscountPcnt>0</xsd2:debitDiscountPcnt>

 <!--Optional:-->

 <xsd2:str1>BDT</xsd2:str1>

 <!--Optional:-->

 <xsd2:type>CURRENCY</xsd2:type>

 <xsd2:withholdingTaxPcnt>10</xsd2:withholdingTaxPcnt>

 </xsd1:corporatePrefMiscData>

 <!--Optional:-->

 <xsd1:currencyCode>BDT</xsd1:currencyCode>';

        l_envelope6 :=
               ' <!--Optional:-->

 <xsd1:custHlth>NA</xsd1:custHlth>

 <!--Optional:-->

 <xsd1:dateOfIncorporation>1901-01-01T00:00:00.000</xsd1:dateOfIncorporation>

 <!--Optional:-->

 <xsd1:defaultAddressType>Registered</xsd1:defaultAddressType>

 <!--Optional:-->

 <xsd1:entityClass>AS</xsd1:entityClass>

 <!--Optional:-->

 <xsd1:entityType>Customer</xsd1:entityType>

 <!--Optional:-->

 <xsd1:isEbankingEnabled>N</xsd1:isEbankingEnabled>

 <!--Optional:-->

 <xsd1:keycontactPersonName>NA</xsd1:keycontactPersonName>

 <!--Optional:-->

 <xsd1:langDesc>INFENG</xsd1:langDesc>

 <!--Optional:-->

 <xsd1:legalEntityType>NA</xsd1:legalEntityType>

 <!--Optional:-->

 <xsd1:nativeLangCode>INFENG</xsd1:nativeLangCode>

 <!--Optional:-->

 <xsd1:notes>CorporateCustomer</xsd1:notes>

 <xsd1:phone>+88(00)'
            || vMobile
            || '</xsd1:phone>

 <!--Optional:-->

 <xsd1:phonecitycode></xsd1:phonecitycode>
 
 <!--Optional:-->

 <xsd1:phonecountrycode>88</xsd1:phonecountrycode>

 <!--Optional:-->

 <xsd1:phonelocalcode>'
            || vMobile
            || '</xsd1:phonelocalcode>

 <!--Optional:-->

 <xsd1:primaryServiceCenter>777</xsd1:primaryServiceCenter>

 <!--Optional:-->

 <xsd1:principlePlaceOperation>011</xsd1:principlePlaceOperation>

 <!--Optional:-->

 <xsd1:priority>NA</xsd1:priority>

 <!--Optional:-->

 <xsd1:region>NA</xsd1:region>

 <!--Optional:-->

 <xsd1:registrationNumber>NA</xsd1:registrationNumber>

 <!--Optional:-->

 <xsd1:relationshipCreatedBy>CITYDBA15</xsd1:relationshipCreatedBy>

 <!--Optional:-->

 <xsd1:relationshipStartDate>'
            || TO_CHAR (TO_TIMESTAMP (SYSDATE),
                        'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
            || '</xsd1:relationshipStartDate>

 <!--Optional:-->

 <xsd1:relationshipType>NA</xsd1:relationshipType>

 <!--Optional:-->

 <xsd1:remarks>NA</xsd1:remarks>

 <xsd1:requestUUID>TEST123687878</xsd1:requestUUID>

 <!--Optional:-->

 <xsd1:sector>NA</xsd1:sector>

 <!--Optional:-->

 <xsd1:segment>NA</xsd1:segment>

 <!--Optional:-->

 <xsd1:shortName>'
            || SUBSTR (vCorporateName, 1, 10)
            || '</xsd1:shortName>

 <!--Optional:-->

 <xsd1:sourceOfFunds>NA</xsd1:sourceOfFunds>

 <!--Optional:-->

 <xsd1:statusDesc>NOR</xsd1:statusDesc>

 <!--Optional:-->

 <xsd1:subSegment>NA</xsd1:subSegment>

 <!--Optional:-->

 <xsd1:subsector>NA</xsd1:subsector>

 <!--Optional:-->

 <xsd1:taxId>NA</xsd1:taxId>

 <!--Optional:-->

 <xsd1:tradeServicesAvailed>N</xsd1:tradeServicesAvailed>

 </axis:request>

 </axis:CreateCorporateCustomer>

 </soapenv:Body>

</soapenv:Envelope>
 ';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           =>
                           l_envelope
                        || l_envelope1
                        || l_envelope7
                        || l_envelope2
                        || l_envelope3
                        || l_envelope4
                        || l_envelope5
                        || l_envelope6, /*
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123',*/
                    p_transfer_timeout   => 10);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'CIF_CREATION',
                        pRefNo          => NULL,
                        pDrAcNo         => pCustNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          =>
                               l_envelope
                            || l_envelope1
                            || l_envelope7
                            || l_envelope2
                            || l_envelope3
                            || l_envelope4
                            || l_envelope5
                            || l_envelope6,
                        pOutXml         => NULL,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'CIF_CREATION',
                pRefNo          => NULL,
                pDrAcNo         => pCustNo,
                pCrAcNo         => NULL,
                pFileId         => vFileId,
                pInXMl          =>
                       l_envelope
                    || l_envelope1
                    || l_envelope7
                    || l_envelope2
                    || l_envelope3
                    || l_envelope4
                    || l_envelope5
                    || l_envelope6,
                pOutXml         => vOutXml1.getClobval (),
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => pLogId,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
                 SELECT cifid.CIF_ID, rescode.RES_CODE, resmsg.RES_MSG
                   INTO pCustId, vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:CreateCorporateCustomerResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:CreateCorporateCustomerResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES (
                                'http://ws.apache.org/axis2' AS "ns",
                                'http://Corporate.Customer.fi/xsd' AS "ax238"),
                            '//ns:CreateCorporateCustomerResponse//ax238:cifid'
                            PASSING vOutXml1
                            COLUMNS CIF_ID      VARCHAR2 (1024) PATH '/ax238:cifid')
                        cifid;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'BALINQ',
                        pRefNo          => NULL,
                        pDrAcNo         => pCustNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          =>
                               l_envelope
                            || l_envelope1
                            || l_envelope7
                            || l_envelope2
                            || l_envelope3
                            || l_envelope4
                            || l_envelope5
                            || l_envelope6,
                        pOutXml         => vOutXml1.getClobVal (),
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        pResCode := vResCode;

        IF NVL (vResCode, '00') != '100'
        THEN
            pErrorMsg := vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'F';
    END;



    PROCEDURE GET_TOKEN_CHQ (pToken       OUT VARCHAR2,
                             pErrorFlag   OUT VARCHAR2,
                             pErrorMsg    OUT VARCHAR2)
    IS
        l_clob         CLOB;
        v_body         VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vApiUrl        VARCHAR2 (1024);
    -- vToken   VARCHAR2 (32000);

    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'LWF_URL' AND STATUS = 'A';

        v_body := '{
    "username": "abs",
    "password": "Agent@5731"
}';

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';
        l_clob :=
            APEX_WEB_SERVICE.make_rest_request (
                p_url                =>
                    vApiUrl || '/citybank/intgr/external/api/getBearerToken',
                p_http_method        => 'POST',
                p_body               => v_body,
                p_transfer_timeout   => 10 /*,
            p_wallet_path        => 'file:/u01/lwf_wallets',
            p_wallet_pwd         => 'City1234#'*/
                                          );
        pToken := TO_CHAR (l_clob);
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CHQ_REQUEST_API (pCustId       IN     VARCHAR2,
                               pAcNo         IN     VARCHAR2,
                               pCustName     IN     VARCHAR2,
                               pBranchCode   IN     VARCHAR2,
                               pChequeNo     IN     NUMBER,
                               pLeaf         IN     NUMBER,
                               pLogId        IN     VARCHAR2,
                               pAppId           OUT VARCHAR2,
                               pErrorFlag       OUT VARCHAR2,
                               pErrorMsg        OUT VARCHAR2)
    IS
        vData             VARCHAR2 (32767);
        vToken            VARCHAR2 (32767);
        vMyException      EXCEPTION;
        l_clob            CLOB;
        vFileId           NUMBER;
        vOracleErrorMsg   VARCHAR2 (1024);
        vApiUrl           VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'LWF_URL' AND STATUS = 'A';

        /*   vData :=
                  '{"cbNumber": "'|| pCustId|| '",
                   "accountNumber":'|| '"'|| pAcNo|| '"'|| ',
                   "customerName":'|| '"'|| pCustName|| '"'|| ',
                   "solId":'|| '"'|| pBranchCode|| '"'|| ',
                   "numberOfChequebook":'|| '"'|| pChequeNo|| '"'|| ',
                   "pageOfChequebook":'|| '"'|| pLeaf|| '"'|| '}';*/

        vData :=
               '{
       
       "accountNumber":'
            || '"'
            || pAcNo
            || '"'
            || ',
       
       "solId":"777",
       
       "numberOfChequebook":'
            || '"'
            || pChequeNo
            || '"'
            || ',
       
       "pageOfChequebook":'
            || '"'
            || pLeaf
            || '"'
            || ',
       
       "deliveryBranchSolId":"777",
       
       "channel":"AB",
       
       "processType":"B",
       
       "source":"'
            || CASE WHEN SUBSTR (pAcNo, 1, 3) = '178' THEN 'A' ELSE 'F' END
            || '"
       
  }';

        BEGIN
            --token api procedure calling from here...

            GET_TOKEN_CHQ (pToken       => vToken,
                           pErrorFlag   => pErrorFlag,
                           pErrorMsg    => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Token API Calling Problem.-' || SQLERRM;
                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'N') = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
            APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

            APEX_WEB_SERVICE.g_request_headers (1).VALUE :=
                'application/json';
            apex_web_service.g_request_headers (2).name := 'Authorization';
            apex_web_service.g_request_headers (2).VALUE :=
                'Bearer ' || vToken;

            -- Get the XML response from the web service.

            BEGIN
                l_clob :=
                    APEX_WEB_SERVICE.make_rest_request (
                        p_url                =>
                               vApiUrl
                            || '/citybank/intgr/external/api/cheque_book_Request',
                        --|| '/citybank/intgr/external/api/etbChequeRequest/agent',
                        p_http_method        => 'POST',
                        p_body               => vData,
                        p_wallet_path        => 'file:/u01/lwf_wallets',
                        p_wallet_pwd         => 'City1234#',
                        p_transfer_timeout   => 10);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := SQLERRM;
                    RAISE vMyException;
            END;

            vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

            BEGIN
                API_XML_LOG (pOprType        => 'CHQREQ',
                             pRefNo          => NULL,
                             pDrAcNo         => pAcNo,
                             pCrAcNo         => NULL,
                             pFileId         => vFileId,
                             pInXMl          => vData,
                             pOutXml         => l_clob,
                             pDbMessage      => vOracleErrorMsg,
                             pErrorMessage   => pErrorMsg,
                             pLogId          => pLogId,
                             pNotifyFlag     => pErrorFlag,
                             pNotifyMsg      => pErrorMsg);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                    RAISE vMyException;
            END;

            pAppId := TO_CHAR (l_clob);

            IF pAppId IS NULL
            THEN
                pErrorMsg := 'API Response Problem For Cheque Book Request';
                RAISE vMyException;
            END IF;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CHQ_STATUS_UPDATE_API (pAcNo        IN     VARCHAR2,
                                     pLogId       IN     VARCHAR2,
                                     pErrorFlag      OUT VARCHAR2,
                                     pErrorMsg       OUT VARCHAR2)
    IS
        vUrl              VARCHAR2 (1024);
        vToken            VARCHAR2 (32767);
        vMyException      EXCEPTION;
        vReturn           VARCHAR2 (100);
        l_clob            CLOB;
        vFileId           NUMBER;
        vOracleErrorMsg   VARCHAR2 (1024);
        vApiUrl           VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'LWF_URL' AND STATUS = 'A';

        BEGIN
            --token api procedure calling from here...
            GET_TOKEN_CHQ (pToken       => vToken,
                           pErrorFlag   => pErrorFlag,
                           pErrorMsg    => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Token API Calling Problem.-' || SQLERRM;
                RAISE vMyException;
        END;



        IF NVL (pErrorFlag, 'N') = 'Y'
        THEN
            RAISE vMyException;
        END IF;


        BEGIN
            APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

            APEX_WEB_SERVICE.g_request_headers (1).VALUE :=
                'application/json';
            apex_web_service.g_request_headers (2).name := 'Authorization';

            apex_web_service.g_request_headers (2).VALUE :=
                'Bearer ' || vToken;



            BEGIN
                l_clob :=
                    APEX_WEB_SERVICE.make_rest_request (
                        p_url                =>
                               vApiUrl
                            || '/citybank/intgr/external/api/acknowledgeCheque/'
                            || pAcNo,
                        p_http_method        => 'POST',
                        p_body               => NULL,
                        p_transfer_timeout   => 10,
                        p_wallet_path        => 'file:/u01/lwf_wallets',
                        p_wallet_pwd         => 'City1234#');
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := SQLERRM;
                    RAISE vMyException;
            END;


            vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



            BEGIN
                API_XML_LOG (
                    pOprType        => 'CHQUPDATE',
                    pRefNo          => NULL,
                    pDrAcNo         => pAcNo,
                    pCrAcNo         => NULL,
                    pFileId         => vFileId,
                    pInXMl          =>
                           vUrl
                        || '/citybank/intgr/external/api/acknowledgeCheque/'
                        || pAcNo,
                    pOutXml         => l_clob,
                    pDbMessage      => vOracleErrorMsg,
                    pErrorMessage   => pErrorMsg,
                    pLogId          => pLogId,
                    pNotifyFlag     => pErrorFlag,
                    pNotifyMsg      => pErrorMsg);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                    RAISE vMyException;
            END;



            vReturn := TO_CHAR (l_clob);


            IF UPPER (vReturn) = 'FALSE'
            THEN
                pErrorMsg := 'API Response Problem For Status Update';
                RAISE vMyException;
            END IF;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CHQ_ACTIVATION_API (pAcNo              VARCHAR2,
                                  pChqStartNo        VARCHAR2,
                                  pNoOfChqBook       NUMBER,
                                  pLogId             VARCHAR2,
                                  pErrorFlag     OUT VARCHAR2,
                                  pErrorMsg      OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (100);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;



        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        -- ENVELOPE GENERATE ---

        pErrorFlag := 'N';


        l_envelope :=
               '<?xml version="1.0" encoding="UTF-8"?>

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd" xmlns:xsd1="http://Acknowledgement.Chequebook.fi/xsd">

   <soapenv:Header />

   <soapenv:Body>
      <axis:GetAcknowledgeCheque>
         <!--Optional:-->
         <axis:request>
            <!--Optional:-->
            <xsd:password>Cbl#2021@Agent</xsd:password>
            <!--Optional:-->
            <xsd:username>cityagentapp</xsd:username>
            <!--Optional:-->
            <xsd1:accountNo>'
            || pAcNo
            || '</xsd1:accountNo>
            <!--Zero or more repeOOons:-->
            <xsd1:beginChequeNumberList>
               <!--Optional:-->
               <xsd1:beginChqNum>'
            || pChqStartNo
            || '</xsd1:beginChqNum>
            </xsd1:beginChequeNumberList>
            <!--Optional:-->
            <xsd1:noChqBook>'
            || pNoOfChqBook
            || '</xsd1:noChqBook>
            <!--Optional:-->
            <xsd1:requestId>FI_Chq_Ack_Nth_Bulk.scr</xsd1:requestId>
         </axis:request>
      </axis:GetAcknowledgeCheque>
   </soapenv:Body>
</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'CHQACT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;


        BEGIN
            API_XML_LOG (pOprType        => 'CHQACT',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG
                   INTO vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:GetAcknowledgeChequeResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:GetAcknowledgeChequeResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'CHQACT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF NVL (vResCode, '00') != '100'
        THEN
            pErrorMsg := 'Error From CBS (C)- ' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE DESCO_BILL_API (pBillId                   VARCHAR2,
                              pDueDate              OUT VARCHAR2,
                              pLpc                  OUT VARCHAR2,
                              pNetAmount            OUT NUMBER,
                              pOrgCode              OUT VARCHAR2,
                              pSettlementAc         OUT VARCHAR2,
                              pTotalPayableAmount   OUT NUMBER,
                              pUtilityAc            OUT VARCHAR2,
                              pVatAmount            OUT NUMBER,
                              pErrorFlag            OUT VARCHAR2,
                              pErrorMsg             OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vStatus          NUMBER;
        vMessage         VARCHAR2 (1024);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        soap_respond     VARCHAR2 (30000);
        http_req         UTL_HTTP.req;
        http_resp        UTL_HTTP.resp;
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL1' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---
        pErrorFlag := 'N';
        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header />

   <soapenv:Body>

      <axis:getDESCOBillAmount>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:billId>'
            || pBillId
            || '</xsd:billId>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:stockId>CITYBANK</xsd:stockId>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

            <!--Optional:-->

            <xsd:utilityId>DESCO</xsd:utilityId>

         </axis:request>

      </axis:getDESCOBillAmount>

   </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets', --'file:/u01/service_wallet',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'GET_DESCOBILL',
                        pRefNo          => pBillId,
                        pDrAcNo         => NULL,                       --pAcNo
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          => l_envelope,
                        pOutXml         => NULL,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,                     --pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'GET_DESCOBILL',
                pRefNo          => pBillId,
                pDrAcNo         => NULL,
                pCrAcNo         => NULL,
                pFileId         => vFileId,
                pInXMl          => l_envelope,
                pOutXml         => vOutXml1.getClobVal (),
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => NULL,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        BEGIN
                          SELECT rescode.RES_CODE,
                                 due_date.DUE_DATE,
                                 lpc.LPC,
                                 MESSAGE.MESSAGE,
                                 net_amount.NET_AMOUNT,
                                 organization_code.ORGANIZATION_CODE,
                                 settlement_account.SETTLEMENT_AC,
                                 status.STATUS,
                                 total_payable_amount.TOTAL_PAYABLE,
                                 utility_account.UTILITY_AC,
                                 vat_amount.VAT_AMOUNT,
                                 resmsg.RES_MSG
                            INTO vResCode,
                                 pDueDate,
                                 pLpc,
                                 vMessage,
                                 pNetAmount,
                                 pOrgCode,
                                 pSettlementAc,
                                 vStatus,
                                 pTotalPayableAmount,
                                 pUtilityAc,
                                 pVatAmount,
                                 vResMsg
                            FROM XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseCode'
                                     PASSING vOutXml1
                                     COLUMNS RES_CODE             VARCHAR2 (1024) PATH '/ax2262:responseCode')
                                 rescode,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:due_date'
                                     PASSING vOutXml1
                                     COLUMNS DUE_DATE             VARCHAR2 (1024) PATH '/ax2262:due_date')
                                 due_date,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:lpc'
                                     PASSING vOutXml1
                                     COLUMNS LPC                  VARCHAR2 (1024) PATH '/ax2262:lpc')
                                 lpc,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:message'
                                     PASSING vOutXml1
                                     COLUMNS MESSAGE              VARCHAR2 (1024) PATH '/ax2262:message')
                                 MESSAGE,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:net_amount'
                                     PASSING vOutXml1
                                     COLUMNS NET_AMOUNT           VARCHAR2 (1024) PATH '/ax2262:net_amount')
                                 net_amount,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:organization_code'
                                     PASSING vOutXml1
                                     COLUMNS ORGANIZATION_CODE    VARCHAR2 (1024) PATH '/ax2262:organization_code')
                                 organization_code,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:settlement_account'
                                     PASSING vOutXml1
                                     COLUMNS SETTLEMENT_AC        VARCHAR2 (1024) PATH '/ax2262:settlement_account')
                                 settlement_account,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:status'
                                     PASSING vOutXml1
                                     COLUMNS STATUS               VARCHAR2 (1024) PATH '/ax2262:status')
                                 status,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:total_payable_amount'
                                     PASSING vOutXml1
                                     COLUMNS TOTAL_PAYABLE        VARCHAR2 (1024) PATH '/ax2262:total_payable_amount')
                                 total_payable_amount,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:utility_account'
                                     PASSING vOutXml1
                                     COLUMNS UTILITY_AC           VARCHAR2 (1024) PATH '/ax2262:utility_account')
                                 utility_account,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseData//ax2262:vat_amount'
                                     PASSING vOutXml1
                                     COLUMNS VAT_AMOUNT           VARCHAR2 (1024) PATH '/ax2262:vat_amount')
                                 vat_amount,
                                 XMLTABLE (
                                     XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                    'http://city/xsd' AS "ax2262"),
                                     '//ns:getDESCOBillAmountResponse//ax2262:responseMessage'
                                     PASSING vOutXml1
                                     COLUMNS RES_MSG              VARCHAR2 (1024) PATH '/ax2262:responseMessage')
                                 resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem' || SQLERRM;
                pOracleMessage := SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'GET_DESCOBILL',
                        pRefNo          => pBillId,
                        pDrAcNo         => NULL,                      --pAcNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          => l_envelope,
                        pOutXml         => vOutXml1.getClobVal (),
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,                     --pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF vStatus = 801
        THEN
            pErrorMsg := 'Error From CBS (C)-' || 'Bill Already Paid';
            RAISE vMyException;
        END IF;

        IF vStatus != 101
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vMessage;
            RAISE vMyException;
        END IF;

        IF NVL (vResCode, '000') != 100
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE DESCO_BILL_SEND_API (pBillAmount   IN     NUMBER,
                                   pBillId       IN     VARCHAR2,
                                   pRemarks      IN     VARCHAR2,
                                   pExpiryDate   IN     DATE,
                                   pMobileNo     IN     VARCHAR2,
                                   pSrcAc        IN     VARCHAR2,
                                   pRefNo           OUT VARCHAR2,
                                   pErrorFlag       OUT VARCHAR2,
                                   pErrorMsg        OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vResCode         VARCHAR2 (1024);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        soap_respond     VARCHAR2 (30000);
        http_req         UTL_HTTP.req;
        http_resp        UTL_HTTP.resp;
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL1' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---
        pErrorFlag := 'N';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

    <soapenv:Header/>

    <soapenv:Body>

        <axis:sendDESCOBill>

            <!--Optional:-->

            <axis:request>

                <!--Optional:-->

                <xsd:billAmount>'
            || pBillAmount
            || '</xsd:billAmount>

                <!--Optional:-->

                <xsd:billNo>'
            || pBillId
            || '</xsd:billNo>

                <!--Optional:-->

                <xsd:expiryDate>'
            || pExpiryDate
            || '</xsd:expiryDate>

                <!--Optional:-->

                <xsd:mobileNo>'
            || pMobileNo
            || '</xsd:mobileNo>

                <!--Optional:-->

                <xsd:password>Cbl#2021@Agent</xsd:password>

                <!--Optional:-->

                <xsd:paymentSource>'
            || pSrcAc
            || '</xsd:paymentSource>

                <!--Optional:-->

                <xsd:remarks>'
            || pRemarks
            || '</xsd:remarks>

                <!--Optional:-->

                <xsd:username>cityagentapp</xsd:username>

            </axis:request>

        </axis:sendDESCOBill>

    </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets', --'file:/u01/service_wallet',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'SEND_DESCOBILL',
                        pRefNo          => pBillId,
                        pDrAcNo         => NULL,                       --pAcNo
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          => l_envelope,
                        pOutXml         => NULL,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,                     --pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'SEND_DESCOBILL',
                pRefNo          => pBillId,
                pDrAcNo         => NULL,
                pCrAcNo         => NULL,
                pFileId         => vFileId,
                pInXMl          => l_envelope,
                pOutXml         => vOutXml1.getClobVal (),
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => NULL,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG, refno.REF_NO
                   INTO vResCode, vResMsg, pRefNo
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax21"),
                            '//ns:sendDESCOBillResponse//ax21:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax21:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax21"),
                            '//ns:sendDESCOBillResponse//ax21:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax21:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax21"),
                            '//ns:sendDESCOBillResponse//ax21:transactionRef'
                            PASSING vOutXml1
                            COLUMNS REF_NO      VARCHAR2 (1024) PATH '/ax21:transactionRef')
                        refno;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem' || SQLERRM;
                pOracleMessage := SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'SEND_DESCOBILL',
                        pRefNo          => pBillId,
                        pDrAcNo         => NULL,                      --pAcNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          => l_envelope,
                        pOutXml         => vOutXml1.getClobVal (),
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,                     --pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF NVL (vResCode, '000') != 100
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE MULTIPLT_TRAN_API (pContent           CLOB,
                                 pLogId             VARCHAR2,
                                 pDocNo             VARCHAR2,
                                 pRunUser           VARCHAR2,
                                 pCbsRefNo      OUT VARCHAR2,
                                 pCbsTranDate   OUT VARCHAR2,
                                 pResCode       OUT VARCHAR2,
                                 pResMess       OUT VARCHAR2,
                                 pErrorFlag     OUT VARCHAR2,
                                 pErrorMsg      OUT VARCHAR2)
    IS
        vOutXml1       XMLTYPE;
        vAcNumber      VARCHAR2 (100);
        AMOUNT         NUMBER;
        RefNo          VARCHAR2 (1024);
        vApiUrl        VARCHAR2 (1024);
        vOracleMsg     VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vFileId        NUMBER := 0;
        l_status       VARCHAR2 (1024);
    BEGIN
        pErrorFlag := 'N';

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        BEGIN
            API_XML_LOG (pOprType        => 'TRANSFER',
                         pRefNo          => pDocNo,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => pContent,
                         pOutXml         => NULL,
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                vOracleMsg := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
              SELECT *
                INTO vAcNumber, AMOUNT, RefNo                    --, vCbsRefNo
                FROM XMLTABLE (
                         XMLNAMESPACES (
                             'http://schemas.xmlsoap.org/soap/envelope/'
                                 AS "soapenv",
                             'http://ws.apache.org/axis2' AS "axis",
                             'http://fi/xsd' AS "xsd"),
                         '//axis:doFinacleTransactionFI/axis:request/xsd:partTrnRecList[1]/xsd:acctId[1]'
                         PASSING XMLTYPE (pContent)
                         COLUMNS AC_NO    VARCHAR2 (1024) PATH '/xsd:acctId[1]')
                     ACNO,
                     XMLTABLE (
                         XMLNAMESPACES (
                             'http://schemas.xmlsoap.org/soap/envelope/'
                                 AS "soapenv",
                             'http://ws.apache.org/axis2' AS "axis",
                             'http://fi/xsd' AS "xsd"),
                         '//axis:doFinacleTransactionFI/axis:request/xsd:partTrnRecList[1]/xsd:trnAmtAmountValue[1]'
                         PASSING XMLTYPE (pContent)
                         COLUMNS AMT      VARCHAR2 (1024) PATH '/xsd:trnAmtAmountValue[1]')
                     AMT,
                     XMLTABLE (
                         XMLNAMESPACES (
                             'http://schemas.xmlsoap.org/soap/envelope/'
                                 AS "soapenv",
                             'http://ws.apache.org/axis2' AS "axis",
                             'http://fi/xsd' AS "xsd"),
                         '//axis:doFinacleTransactionFI/axis:request/xsd:partTrnRecList[1]/xsd:partTrnRmks[1]'
                         PASSING XMLTYPE (pContent)
                         COLUMNS EMKS     VARCHAR2 (1024) PATH '/xsd:partTrnRmks[1]')
                     RMKS;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Data Extract Problem.' || SQLERRM;
                RAISE vMyException;
        END;

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => pContent,
                    p_transfer_timeout   => 60 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    TRANSACTION_CALLBACK_API (pAcNo        => vAcNumber,
                                              pTrnAmount   => AMOUNT,
                                              pReqId       => RefNo,
                                              pLogId       => pLogId,
                                              pRunUser     => pRunUser,
                                              pCbsRefNo    => pCbsRefNo,
                                              pErrorFlag   => pErrorFlag,
                                              pErrorMsg    => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg :=
                            'System Error Occured . Contact with System Adminisrator.';
                        RAISE vMyException;
                END;

                IF NVL (pErrorFlag, 'N') = 'Y'
                THEN
                    pErrorMsg := 'Transaction Failed';
                    RAISE vMyException;
                ELSE
                    GOTO END_BLOCK;
                END IF;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';
            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';
            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';
            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';
            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';
            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            BEGIN
                BEGIN
                    TRANSACTION_CALLBACK_API (pAcNo        => vAcNumber,
                                              pTrnAmount   => AMOUNT,
                                              pReqId       => RefNo,
                                              pLogId       => pLogId,
                                              pRunUser     => pRunUser,
                                              pCbsRefNo    => pCbsRefNo,
                                              pErrorFlag   => pErrorFlag,
                                              pErrorMsg    => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg :=
                            'System Error Occured . Contact with System Adminisrator.';
                        RAISE vMyException;
                END;

                IF NVL (pErrorFlag, 'N') = 'Y'
                THEN
                    pErrorMsg := 'Transaction Failed';
                    RAISE vMyException;
                ELSE
                    GOTO END_BLOCK;
                END IF;
            END;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';
            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';
            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';
            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';
            RAISE vMyException;
        ELSE
            NULL;
        END IF;

        BEGIN
            API_XML_LOG (pOprType        => 'TRANSFER',
                         pRefNo          => pDocNo,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => pContent,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        IF vOutXml1 IS NULL
        THEN
            BEGIN
                TRANSACTION_CALLBACK_API (pAcNo        => vAcNumber,
                                          pTrnAmount   => AMOUNT,
                                          pReqId       => RefNo,
                                          pLogId       => pLogId,
                                          pRunUser     => pRunUser,
                                          pCbsRefNo    => pCbsRefNo,
                                          pErrorFlag   => pErrorFlag,
                                          pErrorMsg    => pErrorMsg);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg :=
                        'System Error Occured . Contact with System Adminisrator.';
                    RAISE vMyException;
            END;

            IF NVL (pErrorFlag, 'N') = 'Y'
            THEN
                pErrorMsg := 'Transaction Failed';
                RAISE vMyException;
            ELSE
                GOTO END_BLOCK;
            END IF;
        END IF;


        BEGIN
                SELECT responseCode.CODE,
                       responseMessage.MESSAGE,
                       TRNDATE.trndate,
                       TRNID.trnid
                  INTO pResCode,
                       pResMess,
                       pCbsTranDate,
                       pCbsRefNo
                  FROM XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://fi/xsd' AS "ax2101"),
                           '//ns:doFinacleTransactionFIResponse//ax2101:responseCode'
                           PASSING vOutXml1
                           COLUMNS CODE       VARCHAR2 (1024) PATH '/ax2101:responseCode')
                       responseCode,
                       XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://fi/xsd' AS "ax2101"),
                           '//ns:doFinacleTransactionFIResponse//ax2101:responseMessage'
                           PASSING vOutXml1
                           COLUMNS MESSAGE    VARCHAR2 (1024) PATH '/ax2101:responseMessage')
                       responseMessage,
                       XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://fi/xsd' AS "ax2101"),
                           '//ns:doFinacleTransactionFIResponse//ax2101:transactionDate'
                           PASSING vOutXml1
                           COLUMNS TRNDATE    VARCHAR2 (1024) PATH '/ax2101:transactionDate')
                       trndate,
                       XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://fi/xsd' AS "ax2101"),
                           '//ns:doFinacleTransactionFIResponse//ax2101:transactionId'
                           PASSING vOutXml1
                           COLUMNS TRNID      VARCHAR2 (1024) PATH '/ax2101:transactionId')
                       trnid;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'CBS Response Parsing Problem';

                BEGIN
                    API_XML_LOG (pOprType        => 'TRANSFER',
                                 pRefNo          => pDocNo,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => pContent,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => SQLERRM,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;


        IF NVL (pResCode, '00') NOT IN ('100')
        THEN
            pErrorMsg := 'Error From CBS -' || pResMess;
            RAISE vMyException;
        END IF;

       <<END_BLOCK>>
        NULL;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;


    PROCEDURE DPS_GET_INTEREST_RATE (pAmount      IN     NUMBER,
                                     pTenor       IN     NUMBER,
                                     pScameCode   IN     VARCHAR2,
                                     pRate           OUT VARCHAR2,
                                     pErrorFlag      OUT VARCHAR2,
                                     pErrorMsg       OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vApiUrl          VARCHAR2 (1024);
        pOracleMessage   VARCHAR2 (1024);
        vFileId          NUMBER := 0;
        vMyException     EXCEPTION;
        vResCode         NUMBER;
        vResMsg          VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        pErrorFlag := 'N';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:getInterestRate>

         <!--Optional:-->

         <axis:request>

            <!--AMOUNT OF THE INTEREST RATE:-->

            <xsd:amount>'
            || pAmount
            || '</xsd:amount>  

            <!--Optional:-->
            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--SCHEME CODE OF THE PRODUCT:-->

            <xsd:schemeCode>'
            || pScameCode
            || '</xsd:schemeCode>

            <!--TENOR IN MONTHS:-->

            <xsd:tenor>'
            || pTenor
            || '</xsd:tenor>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>
            
         </axis:request>

      </axis:getInterestRate>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'DPSRATE',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'DPSRATE',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                SELECT DpsRate.RATE, DpsRate.RESCODE, DpsRate.RES_MSG
                  INTO pRate, vResCode, vResMsg
                  FROM XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://card/xsd' AS "ax2117"),
                           '//ns:getInterestRateResponse'
                           PASSING vOutXml1
                           COLUMNS RATE       VARCHAR2 (1024) PATH '//ax2117:rate',
                                   RESCODE    VARCHAR2 (1024) PATH '//ax2117:responseCode',
                                   RES_MSG    VARCHAR2 (1024) PATH '//ax2117:responseMessage')
                       DpsRate;
        END;



        IF vResCode != 100
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE DPS_SIG_CARD (pAc          IN     VARCHAR2,
                            pCustCode    IN     VARCHAR2,
                            pSigFlag        OUT VARCHAR2,
                            pErrorFlag      OUT VARCHAR2,
                            pErrorMsg       OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vApiUrl          VARCHAR2 (1024);
        pOracleMessage   VARCHAR2 (1024);
        vFileId          NUMBER := 0;
        vMyException     EXCEPTION;
        vResCode         VARCHAR2 (100);
        vResMsg          VARCHAR2 (1024);
        vSigImg          CLOB;
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'N';
        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>
   
   <soapenv:Body>

      <axis:GetCbsSignatureInfo>

         <!--Optional:-->
         
         <axis:request>

            <!--Optional:-->

            <xsd:accountId>'
            || pAc
            || '</xsd:accountId>

            <!--Optional:-->

            <xsd:customerId>'
            || pCustCode
            || '</xsd:customerId>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:GetCbsSignatureInfo>

   </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'DPSSIG',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAc,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'DPSSIG',
                         pRefNo          => NULL,
                         pDrAcNo         => pAc,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
                SELECT SigImg.RESCODE, SigImg.RES_MSG, SigImg.SIGIMG
                  INTO vResCode, vResMsg, vSigImg
                  FROM XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://fi/xsd' AS "ax233"),
                           '//ns:GetCbsSignatureInfoResponse'
                           PASSING vOutXml1
                           COLUMNS RESCODE    VARCHAR2 (1024) PATH '//ax233:responseCode',
                                   RES_MSG    VARCHAR2 (1024) PATH '//ax233:responseMessage',
                                   SIGIMG     CLOB PATH '//ax233:signatureInfoList/ax233:returnedsignature')
                       SigImg;
        END;


        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            pSigFlag := 'N';

            RAISE vMyException;
        ELSE
            IF vSigImg IS NULL
            THEN
                pSigFlag := 'N';
            ELSE
                pSigFlag := 'Y';
            END IF;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE DPS_OPEN_API (pAcNo            IN     VARCHAR2,
                            pInitdepoAmt     IN     VARCHAR2,
                            pDpsOpenDate     IN     DATE,
                            pDpsValuedDate   IN     DATE,
                            pCustCode        IN     VARCHAR2,
                            pTenureType      IN     VARCHAR2,
                            pDpsTenure       IN     VARCHAR2,
                            pAmountPerInst   IN     VARCHAR2,
                            pRmCode          IN     VARCHAR2,
                            pSchmcode        IN     VARCHAR2,
                            pAcInfoJson      IN     VARCHAR2,
                            pRunUser         IN     VARCHAR2,
                            pCbsAcNo            OUT VARCHAR2,
                            pErrorFlag          OUT VARCHAR2,
                            pErrorMsg           OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        l_envelope1      CLOB;
        l_envelope2      CLOB;
        l_envelope3      CLOB;
        vOutXml1         XMLTYPE;
        vApiUrl          VARCHAR2 (1024);
        pOracleMessage   VARCHAR2 (1024);
        vFileId          NUMBER := 0;
        vDpsOpenDate     VARCHAR2 (1024);
        vDpsValuedDate   VARCHAR2 (1024);
        vMyException     EXCEPTION;
        vNomCount        NUMBER;
        vNomAvailAble    VARCHAR2 (10);
        vCustNo          NUMBER;
        vAcType          VARCHAR2 (2);
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        glSubHeadId      VARCHAR2 (10);
        vPointId         VARCHAR2 (100);
        vSchameCode      VARCHAR2 (100);
        vSectorCode      VARCHAR2 (1024);
        vSubSecCode      VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'N';

        SELECT TO_CHAR (TO_TIMESTAMP (pDpsOpenDate),
                        'YYYY-MM-DD"T"HH24:MI:SS".""0000"'),
               TO_CHAR (TO_TIMESTAMP (pDpsValuedDate),
                        'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
          INTO vDpsOpenDate, vDpsValuedDate
          FROM DUAL;



        BEGIN
            SELECT COUNT (NOMINEE_ID)
              INTO vNomCount
              FROM EMOB.NOMINEE_MST
             WHERE AC_ID = (SELECT ac_id
                              FROM emob.mb_account_mst
                             WHERE ac_no = pAcNo);
        END;



        IF vNomCount = 0
        THEN
            vNomAvailAble := 'N';
        ELSE
            vNomAvailAble := 'Y';
        END IF;



        BEGIN
            SELECT GL_SUB_HEAD_CODE, SHORT_DESC
              INTO glSubHeadId, vSchameCode
              FROM emob.MB_PRODUCT_MST
             WHERE AC_TYPE_ID = TRIM (pSchmcode);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Product SubHead not Found or Not Matched.-' || pSchmcode;

                RAISE vMyException;
        END;

        BEGIN
            SELECT finacle_id
              INTO vPointId
              FROM emob.st_agent_point
             WHERE TRIM (point_id) = (SELECT point_id
                                        FROM emob.mb_account_mst
                                       WHERE TRIM (ac_no) = TRIM (pAcNo));
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'A/C Point Not Found.' || SQLERRM;
                RAISE vMyException;
        END;



        FOR i
            IN (SELECT a.AC_TITLE
                           AC_TITLE,
                       a.cust_no,
                       b.cust_code
                           cust_id,
                       a.AC_NATURE,
                       DECODE (a.AC_NATURE, 'C', NULL, 'SELF')
                           mpcode,
                       b.first_name
                           last_name,
                       C.GL_SUB_HEAD_CODE
                           GL_SUB_HEAD_CODE,
                       RM_CODE,
                       D.FINACLE_ID
                  FROM EMOB.MB_ACCOUNT_MST   a,
                       EMOB.MB_CUSTOMER_MST  b,
                       EMOB.MB_PRODUCT_MST   C,
                       EMOB.ST_AGENT_POINT   D
                 WHERE     AC_ID = (SELECT ac_id
                                      FROM emob.mb_account_mst
                                     WHERE ac_no = pAcNo)
                       AND a.cust_no = b.cust_no
                       AND A.AC_TYPE_ID = C.AC_TYPE_ID
                       AND A.POINT_ID = D.POINT_ID)
        LOOP
            /*'||i.FINACLE_ID||'*/



            vCustNo := i.cust_no;
            vAcType := i.AC_NATURE;
            l_envelope1 :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

    <soapenv:Header/>
    <soapenv:Body>
        <axis:openTermDepositAccount>
            <!--Optional:-->
            <axis:request>
                <xsd:acctcurr>BDT</xsd:acctcurr>
                <xsd:acctrepcode></xsd:acctrepcode>
             <!--   <xsd:acctopndt>'
                || vDpsOpenDate
                || '</xsd:acctopndt>
                <xsd:trnvaluedt>'
                || vDpsValuedDate
                || '</xsd:trnvaluedt> -->
                <xsd:acctopndt>'
                || vDpsOpenDate
                || '</xsd:acctopndt>
                <xsd:trnvaluedt>'
                || vDpsValuedDate
                || '</xsd:trnvaluedt>
                <xsd:taxcat>W</xsd:taxcat>
                <xsd:acctstmtmode></xsd:acctstmtmode>
                <xsd:acmanagerid>UBSADMIN</xsd:acmanagerid>
                <xsd:agentbankingoutlet>'
                || vPointId
                || '</xsd:agentbankingoutlet>
                <xsd:autocloseonmaturityflg>N</xsd:autocloseonmaturityflg>
                <xsd:autorenewalflg>N</xsd:autorenewalflg>
                <xsd:ccepcode></xsd:ccepcode>
                <xsd:crcashlim>99999999999999.99</xsd:crcashlim>
                <xsd:crcashlimccy>BDT</xsd:crcashlimccy>
                <xsd:crclrlim>99999999999999.99</xsd:crclrlim>
                <xsd:crclrlimccy>BDT</xsd:crclrlimccy>
                <xsd:crtxlim>99999999999999.99</xsd:crtxlim>
                <xsd:crtxlimccy>BDT</xsd:crtxlimccy>
                <xsd:custid>'
                || pCustCode
                || '</xsd:custid>
                <xsd:debitacctid></xsd:debitacctid>
                <xsd:depositcode>181</xsd:depositcode>
                <xsd:depositterm_days></xsd:depositterm_days>
                <xsd:depositterm_months>'
                || pDpsTenure
                || '</xsd:depositterm_months>
                <xsd:drcashlim>99999999999999.99</xsd:drcashlim>
                <xsd:drcashlimccy>BDT</xsd:drcashlimccy>
                <xsd:drclrlim>99999999999999.99</xsd:drclrlim>
                <xsd:drclrlimccy>BDT</xsd:drclrlimccy>
                <xsd:drtxlim>99999999999999.99</xsd:drtxlim>
                <xsd:drtxlimccy>BDT</xsd:drtxlimccy>
                <xsd:freecode6></xsd:freecode6>
                <xsd:repayacctid>'
                || pAcNo
                || '</xsd:repayacctid>
                <xsd:freecode8></xsd:freecode8>
                <xsd:freetext10></xsd:freetext10>
                <xsd:freetext3></xsd:freetext3>
                <genLedgerSubHeadCode>'
                || glSubHeadId
                || '</genLedgerSubHeadCode>
                <xsd:initialdeposit_amountvalue>'
                || pAmountPerInst
                || '</xsd:initialdeposit_amountvalue>
                <xsd:initialdeposit_currencycode>BDT</xsd:initialdeposit_currencycode>
                <xsd:loccalflg>N</xsd:loccalflg>
                <xsd:maxnumofrenewalallwd></xsd:maxnumofrenewalallwd>
                <miscFlag>1</miscFlag>
                <xsd:mopcode></xsd:mopcode>
                <xsd:nomavblflg>Y</xsd:nomavblflg>
';
        END LOOP;



        SELECT json_value (pAcInfoJson, '$.sectorCode'),
               json_value (pAcInfoJson, '$.subSecCode')
          INTO vSectorCode, vSubSecCode
          FROM DUAL;



        l_envelope2 :=
               '<nomineeContactInfoRequestList>
                    <address1>SAME AS LINK A/C</address1>
                    <address2></address2>
                    <address3>0</address3>
                    <city>ZZZ</city>
                    <country>ZZZ</country>
                    <emailAddr></emailAddr>
                    <guardianAddr1></guardianAddr1>
                    <guardianAddr2></guardianAddr2>
                    <guardianAddr3></guardianAddr3>
                    <guardianAddrType></guardianAddrType>
                    <guardianCity></guardianCity>
                    <guardianCode></guardianCode>
                    <guardianCountry></guardianCountry>
                    <guardianEmailAddr></guardianEmailAddr>
                    <guardianName></guardianName>
                    <guardianPostalCode></guardianPostalCode>
                    <guardianStateProv></guardianStateProv>
                    <guardianTelephoneNum></guardianTelephoneNum>
                    <nomineeBirthDt>1900-01-01T00: 00: 00.000</nomineeBirthDt>
                    <nomineeMinorFlg>N</nomineeMinorFlg>
                    <nomineeName>SAME AS '
            || pAcNo
            || '</nomineeName>
                    <nomineePercent>100.00</nomineePercent>
                    <postalCode>9999</postalCode>
                    <recDelFlg>N</recDelFlg>
                    <regNum>0</regNum>
                    <relType>ZZZ</relType>
                    <stateProv>ZZZ</stateProv>
                </nomineeContactInfoRequestList>';



        l_envelope3 :=
               '<xsd:operacctid></xsd:operacctid>            
                <xsd:notes></xsd:notes>
                <xsd:occupationcode>AR</xsd:occupationcode>
                <xsd:password>Cbl#2021@Agent</xsd:password>
                <xsd:renewaloption>M</xsd:renewaloption>
                <xsd:renewalterm_days></xsd:renewalterm_days>
                <xsd:renewalterm_months>'
            || pDpsTenure
            || '</xsd:renewalterm_months>
                <xsd:rmcode>'
            || pRmCode
            || '</xsd:rmcode>
                <xsd:schmcode>'
            || vSchameCode
            || '</xsd:schmcode>
                <xsd:sectorcode>'
            || vSectorCode
            || '</xsd:sectorcode>
                <xsd:smsalert></xsd:smsalert>
                <xsd:solid>777</xsd:solid>
                <xsd:srcacctid></xsd:srcacctid>
                <xsd:subsectorcode>'
            || vSubSecCode
            || '</xsd:subsectorcode>
                <xsd:trancremode>V</xsd:trancremode>
                <xsd:trnsubtype>CI</xsd:trnsubtype>
                <xsd:trntype>T</xsd:trntype>
                <xsd:username>cityagentapp</xsd:username>
                <xsd:waiverfield></xsd:waiverfield>
                <xsd:whtaxlvl>A</xsd:whtaxlvl>
                <xsd:wtaxamountscopeflg>P</xsd:wtaxamountscopeflg>
                <xsd:xferind>O</xsd:xferind>
            </axis:request>            
         </axis:openTermDepositAccount>
    </soapenv:Body>
</soapenv:Envelope>';

        l_envelope := l_envelope1 || l_envelope2 || l_envelope3;

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    API_XML_LOG (pOprType        => 'DPSOPEN',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                RAISE vMyException;
        END;

        BEGIN
            API_XML_LOG (pOprType        => 'DPSOPEN',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        --pResponse := vOutXml1.getClobVal ();
        IF vOutXml1 IS NULL
        THEN
            pErrorMsg := 'No Response Found From API';
            RAISE vMyException;
        END IF;



        BEGIN
                 SELECT dpsAc.AC_NO, dpsAc.RES_CODE, dpsAc.RES_MSG
                   INTO pCbsAcNo, vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax233"),
                            '//ns:openTermDepositAccountResponse'
                            PASSING vOutXml1
                            COLUMNS AC_NO       VARCHAR2 (1024) PATH '//ax233:accountNumber',
                                    RES_CODE    VARCHAR2 (1024) PATH '//ax233:responseCode',
                                    RES_MSG     VARCHAR2 (1024) PATH '//ax233:responseMessage')
                        dpsAc;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'DPSOPEN',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE DPS_GET_MATURITY_VALUE (pAc            IN     VARCHAR2,
                                      pMaturityVal      OUT VARCHAR2,
                                      pErrorFlag        OUT VARCHAR2,
                                      pErrorMsg         OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vApiUrl          VARCHAR2 (1024);
        pOracleMessage   VARCHAR2 (1024);
        vFileId          NUMBER := 0;
        vMyException     EXCEPTION;
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'N';

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:GetTermDepositAccount>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:accountNumber>'
            || pAc
            || '</xsd:accountNumber>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:GetTermDepositAccount>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'DPSMATU_VAL',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAc,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'DPSMATU_VAL',
                         pRefNo          => NULL,
                         pDrAcNo         => pAc,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                    SELECT response.MATURITYVAL
                      INTO pMaturityVal
                      FROM XMLTABLE (
                               XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                              'http://fi/xsd' AS "ax233"),
                               '//ns:GetTermDepositAccountResponse'
                               PASSING vOutXml1
                               COLUMNS MATURITYVAL    VARCHAR2 (1024) PATH '//ax233:maturityAmt_amountValue')
                           response;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE DPS_STANDING_INST (pInsAmount    IN     NUMBER,
                                 pTenureType   IN     VARCHAR2,
                                 pTenure       IN     NUMBER,
                                 pLinkAc       IN     VARCHAR2,
                                 pCbsAc        IN     VARCHAR2,
                                 pCustCode     IN     VARCHAR2,
                                 pRecpmId         OUT VARCHAR2,
                                 pErrorFlag       OUT VARCHAR2,
                                 pErrorMsg        OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vApiUrl          VARCHAR2 (1024);
        pOracleMessage   VARCHAR2 (1024);
        vFileId          NUMBER := 0;
        vMyException     EXCEPTION;
        vResCode         VARCHAR2 (100);
        vResMsg          VARCHAR2 (1024);
        vNextprcdate     VARCHAR2 (1024);
        vfreq_startdt    VARCHAR2 (10);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        SELECT TO_CHAR (TO_TIMESTAMP (SYSDATE),
                        'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
          INTO vNextprcdate
          FROM DUAL;



        SELECT TO_CHAR (SYSDATE, 'dd') INTO vfreq_startdt FROM DUAL;

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        pErrorFlag := 'N';
        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:OpenDPSStandingInstruction>

         <!--Optional:-->  
         
            <axis:request>
            
                <xsd:autopost>Y</xsd:autopost>

                <xsd:beneficiaryacct_acctid>'
            || pCbsAc
            || '</xsd:beneficiaryacct_acctid>

                <xsd:carryfwdallwd>Y</xsd:carryfwdallwd>

                <xsd:carryfwdlim>15</xsd:carryfwdlim>

                <xsd:chrgacct_acctid/>

                <xsd:collmodchrg>N</xsd:collmodchrg>

                <xsd:custid>'
            || pCustCode
            || '</xsd:custid>

                <xsd:dracct_acctid>'
            || pLinkAc
            || '</xsd:dracct_acctid>

                <xsd:exectime>A</xsd:exectime>

                <xsd:freq_cal/>

                <xsd:freq_holstat>N</xsd:freq_holstat>

                <xsd:freq_startdt>'
            || vfreq_startdt
            || '</xsd:freq_startdt>

                <xsd:freq_type>'
            || pTenureType
            || '</xsd:freq_type>

                <xsd:nextprcdate>'
            || vNextprcdate
            || '</xsd:nextprcdate>

                <xsd:password>Cbl#2021@Agent</xsd:password>

                <!--Zero or more repetitions:-->

                <xsd:ptInstructionList>

                    <xsd:acctId>'
            || pCbsAc
            || '</xsd:acctId>
            
                    <xsd:amtInd>F</xsd:amtInd>

                    <xsd:collFee>N</xsd:collFee>

                    <xsd:memoPadEntryFlg>N</xsd:memoPadEntryFlg>

                    <xsd:partTranRemarks></xsd:partTranRemarks>

            <!--Optional:-->
                <xsd:tranParticulars>FROM A/C '
            || pLinkAc
            || '</xsd:tranParticulars>
            
                            </xsd:ptInstructionList>
                <xsd:ptInstructionList>

                    <xsd:acctId>'
            || pLinkAc
            || '</xsd:acctId>
                    <xsd:amtInd>F</xsd:amtInd>   
                    
                    <xsd:collFee>N</xsd:collFee>  
                                      
                    <xsd:memoPadEntryFlg>N</xsd:memoPadEntryFlg> 
                                       
                    <!--Optional:-->
                    <xsd:partTranRemarks></xsd:partTranRemarks>
                    <!--Optional:-->

                    <xsd:tranParticulars>DPS EMI RD A/C: '
            || pCbsAc
            || '</xsd:tranParticulars>
            
                </xsd:ptInstructionList>

                <xsd:recpmttype>C</xsd:recpmttype>
                
                <xsd:remitamt_amountvalue>'
            || pInsAmount
            || '</xsd:remitamt_amountvalue>
            
                <xsd:remitamt_currencycode>BDT</xsd:remitamt_currencycode>

                <xsd:username>cityagentapp</xsd:username>

                <xsd:valcrncyhol>N</xsd:valcrncyhol>

                <xsd:del_tran_if_not_pstd>Y</xsd:del_tran_if_not_pstd>

                <xsd:autosuspend_flg>N</xsd:autosuspend_flg>

                <xsd:resume_after_suspend_period>Y</xsd:resume_after_suspend_period>

            </axis:request>

        </axis:OpenDPSStandingInstruction>

   </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'DPSTANDIN',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pLinkAc,
                                 pCrAcNo         => pCbsAc,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => NULL,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'DPSTANDIN',
                         pRefNo          => NULL,
                         pDrAcNo         => pLinkAc,
                         pCrAcNo         => pCbsAc,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                SELECT DpsStanding.RECPMID,
                       DpsStanding.RESCODE,
                       DpsStanding.RES_MSG
                  INTO pRecpmId, vResCode, vResMsg
                  FROM XMLTABLE (
                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                          'http://fi/xsd' AS "ax233"),
                           '//ns:OpenDPSStandingInstructionResponse'
                           PASSING vOutXml1
                           COLUMNS RECPMID    VARCHAR2 (1024) PATH '//ax233:recpmtid',
                                   RESCODE    VARCHAR2 (1024) PATH '//ax233:responseCode',
                                   RES_MSG    VARCHAR2 (1024) PATH '//ax233:responseMessage')
                       DpsStanding;
        END;

        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE GET_SAVINGS_AC (pLinkAc       IN     VARCHAR2,
                              pJsonOutput      OUT VARCHAR2,
                              pErrorFlag       OUT VARCHAR2,
                              pErrorMsg        OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vApiUrl          VARCHAR2 (1024);
        pOracleMessage   VARCHAR2 (1024);
        vFileId          NUMBER := 0;
        vMyException     EXCEPTION;
        vAdd1            VARCHAR2 (1024);
        vAdd2            VARCHAR2 (1024);
        vAdd3            VARCHAR2 (1024);
        vCity            VARCHAR2 (1024);
        vCountry         VARCHAR2 (1024);
        vPostalCode      VARCHAR2 (1024);
        vNomineeName     VARCHAR2 (1024);
        vGurAdd1         VARCHAR2 (1024);
        vGurAdd2         VARCHAR2 (1024);
        vGurCity         VARCHAR2 (1024);
        vGurPostalCode   VARCHAR2 (1024);
        vGurName         VARCHAR2 (1024);
        vResCode         VARCHAR2 (100);
        vResMsg          VARCHAR2 (1024);
        vOccupation      VARCHAR2 (1024);
        vSectorCode      VARCHAR2 (1024);
        vSubSecCode      VARCHAR2 (1024);
        vNomPercentage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        pErrorFlag := 'N';



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">



   <soapenv:Header/>



   <soapenv:Body>



      <axis:GetSavingsAccount>



         <!--Optional:-->



         <axis:request>



            <!--Optional:-->



            <xsd:accountNumber>'
            || pLinkAc
            || '</xsd:accountNumber>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Optional:-->



            <xsd:username>cityagentapp</xsd:username>



         </axis:request>



      </axis:GetSavingsAccount>



   </soapenv:Body>



</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --vApiUrl || '/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --vApiUrl || '/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'GET_SAVINGS_DTL',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pLinkAc,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => NULL,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'GET_SAVINGS_DTL',
                         pRefNo          => NULL,
                         pDrAcNo         => pLinkAc,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        BEGIN
                                SELECT GetSavingsAc.ADD1,
                                       GetSavingsAc.ADD2,
                                       GetSavingsAc.ADD3,
                                       GetSavingsAc.CITY,
                                       GetSavingsAc.COUNTRY,
                                       GetSavingsAc.POSTAL_CODE,
                                       GetSavingsAc.NOMINEE_NAME,
                                       GetSavingsAc.NOMINEE_PERCENTAGE,
                                       GetSavingsAc.NOMINEE_GUR_ADD1,
                                       GetSavingsAc.NOMINEE_GUR_ADD2,
                                       GetSavingsAc.NOMINEE_GUR_CITY,
                                       GetSavingsAc.NOMINEE_GUR_NAME,
                                       GetSavingsAc.NOMINEE_GUR_POSTAL_CODE,
                                       GetSavingsAc.RES_CODE,
                                       GetSavingsAc.RES_MSG,
                                       GetSavingsAc.OCCUPATION,
                                       GetSavingsAc.SECTOR_CODE,
                                       GetSavingsAc.SUB_SECTOR_CODE
                                  INTO vAdd1,
                                       vAdd2,
                                       vAdd3,
                                       vCity,
                                       vCountry,
                                       vPostalCode,
                                       vNomineeName,
                                       vNomPercentage,
                                       vGurAdd1,
                                       vGurAdd2,
                                       vGurCity,
                                       vGurName,
                                       vGurPostalCode,
                                       vResCode,
                                       vResMsg,
                                       vOccupation,
                                       vSectorCode,
                                       vSubSecCode
                                  FROM XMLTABLE (
                                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                          'http://fi/xsd' AS "ax233"),
                                           '//ns:GetSavingsAccountResponse'
                                           PASSING vOutXml1
                                           COLUMNS ADD1                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:addr1',
                                                   ADD2                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:addr2',
                                                   ADD3                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:addr3',
                                                   CITY                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:city',
                                                   COUNTRY                    VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:country',
                                                   POSTAL_CODE                VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:postalCode',
                                                   NOMINEE_NAME               VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeName',
                                                   NOMINEE_PERCENTAGE         VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineePercent',
                                                   NOMINEE_GUR_ADD1           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianAddr1',
                                                   NOMINEE_GUR_ADD2           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianAddr2',
                                                   NOMINEE_GUR_CITY           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianCity',
                                                   NOMINEE_GUR_NAME           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianName',
                                                   NOMINEE_GUR_POSTAL_CODE    VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianPostalCode',
                                                   RES_CODE                   VARCHAR2 (1024) PATH '//ax233:responseCode',
                                                   RES_MSG                    VARCHAR2 (1024) PATH '//ax233:responseMessage',
                                                   OCCUPATION                 VARCHAR2 (1024) PATH '//ax233:sbAcctInq_customData//ax233:occupationcode',
                                                   SECTOR_CODE                VARCHAR2 (1024) PATH '//ax233:sbAcctInq_customData//ax233:sectorcode',
                                                   SUB_SECTOR_CODE            VARCHAR2 (1024) PATH '//ax233:sbAcctInq_customData//ax233:subsectorcode')
                                       GetSavingsAc;
        END;



        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C) -' || vResMsg;



            RAISE vMyException;
        ELSE
            BEGIN
                SELECT JSON_OBJECT ('nomineeName' VALUE vNomineeName,
                                    'occupation' VALUE vOccupation,
                                    'add1' VALUE vAdd1,
                                    'add2' VALUE vAdd1,
                                    'add3' VALUE vAdd3,
                                    'city' VALUE vCity,
                                    'country' VALUE vCountry,
                                    'postalCode' VALUE vPostalCode,
                                    'nomineeName' VALUE vNomineeName,
                                    'nomineePercentage' VALUE vNomPercentage,
                                    'gurAdd1' VALUE vGurAdd1,
                                    'gurAdd2' VALUE vGurAdd2,
                                    'gurCity' VALUE vGurCity,
                                    'gurName' VALUE vGurName,
                                    'gurPostalCode' VALUE vGurPostalCode,
                                    'sectorCode' VALUE vSectorCode,
                                    'subSecCode' VALUE vSubSecCode)
                  INTO pJsonOutput
                  FROM DUAL;
            END;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE GET_TOKEN_EKPAY (pSecurityToken   OUT VARCHAR2,
                               pTokenExpTime    OUT VARCHAR2,
                               pTokenType       OUT VARCHAR2,
                               pAckTimestamp    OUT VARCHAR2,
                               pErrorFlag       OUT VARCHAR2,
                               pErrorMessage    OUT VARCHAR2)
    IS
        l_envelope     CLOB;
        vOutXml1       XMLTYPE;
        vMyException   EXCEPTION;
        vApiUrl        VARCHAR2 (1024);
        vRespCd        VARCHAR2 (1024);
        vRespMsg       VARCHAR2 (1024);
    BEGIN
        --URL Name :   http://192.168.220.53:9080/axis2/services/CBLUtilityWebServices?wsdl



        vApiUrl := 'https://services.thecitybank.com:9773'; --vApiUrl := 'http://192.168.220.53:9080';


        l_envelope :=
            '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://ekPay.utility.city/xsd">



   <soapenv:Header/>



   <soapenv:Body>



      <axis:ekPayCreateToken>



         <!--Optional:-->



         <axis:request>



            <!--Optional:-->



            <xsd:pass_key>CiTiAjnTBnK@eKp8</xsd:pass_key>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Optional:-->



            <xsd:username>cityagentapp</xsd:username>



            <!--Optional:-->



            <xsd:user_id>cityagent_sapi</xsd:user_id>



         </axis:request>



      </axis:ekPayCreateToken>



   </soapenv:Body>



</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'API Request Fail' || SQLERRM;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'EKPAY_TOKEN',
                         pRefNo          => 1,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => 8,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMessage,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        BEGIN
                       SELECT getToken.RES_CODE,
                              getToken.RES_MSG,
                              getToken.SECURITY_TOKEN,
                              getToken.TOKEN_EXP_TIME,
                              getToken.TOKEN_TYPE
                         INTO vRespCd,
                              vRespMsg,
                              pSecurityToken,
                              pTokenExpTime,
                              pTokenType
                         FROM XMLTABLE (
                                  XMLNAMESPACES (
                                      'http://ws.apache.org/axis2' AS "ns",
                                      'http://ekPay.utility.city/xsd' AS "ax276"),
                                  '//ns:ekPayCreateTokenResponse'
                                  PASSING vOutXml1
                                  COLUMNS RES_CODE          VARCHAR2 (1024) PATH '//ax276:responseCode',
                                          RES_MSG           VARCHAR2 (1024) PATH '//ax276:responseMessage',
                                          SECURITY_TOKEN    VARCHAR2 (1024) PATH '//ax276:security_token',
                                          TOKEN_EXP_TIME    VARCHAR2 (1024) PATH '//ax276:token_exp_time',
                                          TOKEN_TYPE        VARCHAR2 (1024) PATH '//ax276:token_type')
                              getToken;
        END;



        IF vRespCd != '100'
        THEN
            pErrorMessage := 'Error From CBS (C)-' || vRespMsg;



            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE EKPAY_CHECK_BALANCE (pTrxTrxId              OUT VARCHAR2,
                                   pTrxTrxTms             OUT VARCHAR2,
                                   pRespStatusAckNo       OUT VARCHAR2,
                                   pBcktBlncInfBcktBlnc   OUT VARCHAR2,
                                   pErrorFlag             OUT VARCHAR2,
                                   pErrorMessage          OUT VARCHAR2)
    IS
        l_envelope       CLOB;
        vOutXml1         XMLTYPE;
        vSecurityToken   VARCHAR2 (1024);
        vTokenExpTime    VARCHAR2 (50);
        vTokenType       VARCHAR2 (50);
        vRespCd          VARCHAR2 (50);
        vRespMsg         VARCHAR2 (1024);
        vAckTimestamp    VARCHAR2 (50);
        vRespCode        VARCHAR2 (20) := NULL;
        vMyException     EXCEPTION;



        vTrxId           VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vRefId           VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vRefno_ack       VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vTimeStamp       VARCHAR2 (50)
            :=    TO_CHAR (SYSDATE, 'RRRR-MM-DD')
               || 'T'
               || TO_CHAR (SYSDATE, 'HH24:MI:SS')
               || '+06:00';



        vContent         VARCHAR2 (32767) := NULL;



        vFileId          VARCHAR2 (1024);



        vApiUrl          VARCHAR2 (1024);
    BEGIN
        pErrorFlag := 'N';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL1' AND STATUS = 'A';



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.GET_TOKEN_EKPAY (
                pSecurityToken   => vSecurityToken,
                pTokenExpTime    => vTokenExpTime,
                pTokenType       => vTokenType,
                pAckTimestamp    => vAckTimestamp,
                pErrorFlag       => pErrorFlag,
                pErrorMessage    => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage :=
                    'Get Token API Calling Problem. - ' || SQLERRM;



                RAISE vMyException;
        END;



        IF pErrorFlag = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        l_envelope :=
               '<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://ekPay.utility.city/xsd">



   <soap:Header/>



   <soap:Body>



      <axis:ekPayCheckBalance>



         <!--Optional:-->



         <axis:request>



            <!--Optional:-->



            <xsd:accessToken>'
            || vSecurityToken
            || '</xsd:accessToken>



            <!--Optional:-->



            <xsd:nd_id>NS6321</xsd:nd_id>



            <!--Optional:-->



            <xsd:nm>CHCK_BKT_BLNC_REQ</xsd:nm>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Optional:-->



            <xsd:ref_id>'
            || vRefId
            || '</xsd:ref_id>



            <!--Optional:-->



            <xsd:refno_ack>'
            || vRefno_ack
            || '</xsd:refno_ack>



            <!--Optional:-->



            <xsd:syndct_id>s632</xsd:syndct_id>



            <!--Optional:-->



            <xsd:tms>'
            || vTimeStamp
            || '</xsd:tms>



            <!--Optional:-->



            <xsd:trxTime>'
            || vTimeStamp
            || '</xsd:trxTime>



            <!--Optional:-->



            <xsd:trx_id>'
            || vTrxId
            || '</xsd:trx_id>



            <!--Optional:-->



            <xsd:userName>cityagentapp</xsd:userName>



            <!--Optional:-->



            <xsd:ver>v1.3.0</xsd:ver>



         </axis:request>



      </axis:ekPayCheckBalance>



   </soap:Body>



</soap:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    P_VERSION            => '1.2',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'API Request Fail-' || SQLERRM;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'EKPAY_CHECK_BALANCE',
                         pRefNo          => vRefId,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMessage,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        BEGIN
                  SELECT CheckBalance.ACK_NO,
                         CheckBalance.BCKT_BLNC,
                         CheckBalance.RSP_CD,
                         CheckBalance.RSP_MSG,
                         CheckBalance.TRX_ID,
                         CheckBalance.TRX_TMS
                    INTO pRespStatusAckNo,
                         pBcktBlncInfBcktBlnc,
                         vRespCd,
                         vRespMsg,
                         pTrxTrxId,
                         pTrxTrxTms
                    FROM XMLTABLE (
                             XMLNAMESPACES (
                                 'http://ws.apache.org/axis2' AS "ns",
                                 'http://ekPay.utility.city/xsd' AS "ax280"),
                             '//ns:ekPayCheckBalanceResponse'
                             PASSING vOutXml1
                             COLUMNS ACK_NO       VARCHAR2 (1024) PATH '//ax280:ack_no',
                                     BCKT_BLNC    VARCHAR2 (1024) PATH '//ax280:bckt_blnc',
                                     RSP_CD       VARCHAR2 (1024) PATH '//ax280:rsp_cd',
                                     RSP_MSG      VARCHAR2 (1024) PATH '//ax280:rsp_msg',
                                     TRX_ID       VARCHAR2 (1024) PATH '//ax280:trx_id',
                                     TRX_TMS      VARCHAR2 (1024) PATH '//ax280:trx_tms')
                         CheckBalance;
        END;



        IF vRespCd != '0000'
        THEN
            pErrorMessage :=
                'EKPAY Message: ' || vRespCd || ' - ' || vRespMsg;



            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE EKPAY_BILL_PAYMENT (pBillerId                 VARCHAR2,
                                  pBillNo                   VARCHAR2,
                                  pBllAdd                   VARCHAR2,
                                  pMeterNo                  VARCHAR2,
                                  pBillPeriod               VARCHAR2,
                                  pBillerAcNo               VARCHAR2,
                                  pBillMobNo                VARCHAR2,
                                  pIsBillPay                VARCHAR2,
                                  pXchngCode                VARCHAR2,
                                  pLastPayDate              VARCHAR2,
                                  pRespStatusRefId          VARCHAR2,
                                  pRespStatusRefnoAck       VARCHAR2,
                                  pBllrInfBllDtFrm          VARCHAR2,
                                  pBllrInfBllDtTo           VARCHAR2,
                                  pBllrInfBllDtGnrt         VARCHAR2,
                                  pBllrInfBllDtDue          VARCHAR2,
                                  pBllrInfBllAmnt           VARCHAR2,
                                  pBllrInfBllVat            VARCHAR2,
                                  pBllrInfBllRevStmp        VARCHAR2,
                                  pBllrInfEkpayFee          VARCHAR2,
                                  pBllrInfBllLateFee        VARCHAR2,
                                  pBllrInfBllAmntTtl        VARCHAR2,
                                  pBllrInfBllLocCd          VARCHAR2,
                                  pGrandTotalAmount         NUMBER,
                                  pBillType                 VARCHAR2,
                                  pBllCstmFIdX              VARCHAR2,
                                  pBllrInfRefId             VARCHAR2,
                                  pDocNum                   VARCHAR2,
                                  pRefId                OUT VARCHAR2,
                                  pRefNoAckn            OUT VARCHAR2,
                                  pTrx_id               OUT VARCHAR2,
                                  pTrx_tms              OUT VARCHAR2,
                                  pErrorFlag            OUT VARCHAR2,
                                  pErrorMessage         OUT VARCHAR2)
    IS
        l_envelope       CLOB;

        vOutXml1         XMLTYPE;
        vSecurityToken   VARCHAR2 (1024);
        vTokenExpTime    VARCHAR2 (50);
        vTokenType       VARCHAR2 (50);
        vRespCd          VARCHAR2 (50);
        vRespMsg         VARCHAR2 (1024);
        vAckTimestamp    VARCHAR2 (50);
        vMyException     EXCEPTION;
        vRefId           VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vTrxId           VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vTimeStamp       VARCHAR2 (50)
            :=    TO_CHAR (SYSDATE, 'RRRR-MM-DD')
               || 'T'
               || TO_CHAR (SYSDATE, 'HH24:MI:SS')
               || '+06:00';



        vFileId          VARCHAR2 (1024);

        vApiUrl          VARCHAR2 (1024);
    BEGIN
        pErrorFlag := 'N';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        vApiUrl := 'https://services.thecitybank.com:9773'; ---vApiUrl := 'http://192.168.220.53:9080';



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.GET_TOKEN_EKPAY (
                pSecurityToken   => vSecurityToken,
                pTokenExpTime    => vTokenExpTime,
                pTokenType       => vTokenType,
                pAckTimestamp    => vAckTimestamp,
                pErrorFlag       => pErrorFlag,
                pErrorMessage    => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage :=
                    'Get Token API Calling Problem. - ' || SQLERRM;



                RAISE vMyException;
        END;



        IF pErrorFlag = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://ekPay.utility.city/xsd">



   <soapenv:Header/>



   <soapenv:Body>



      <axis:ekPayUpdateBillPayment>



         <!--Optional:-->



         <axis:request>



            <!--Optional:-->



            <xsd:accessToken>'
            || vSecurityToken
            || '</xsd:accessToken>



            <!--Optional:-->



            <xsd:bll_add>'
            || pBllAdd
            || '</xsd:bll_add>



            <!--Optional:-->



            <xsd:bll_amnt>'
            || pBllrInfBllAmnt
            || '</xsd:bll_amnt>



            <!--Optional:-->



            <xsd:bll_amnt_ttl>'
            || pBllrInfBllAmntTtl
            || '</xsd:bll_amnt_ttl>



            <!--Optional:-->



            <xsd:bll_dt_due>'
            || pBllrInfBllDtDue
            || '</xsd:bll_dt_due>



            <!--Optional:-->



            <xsd:bll_dt_frm>'
            || pBllrInfBllDtFrm
            || '</xsd:bll_dt_frm>



            <!--Optional:-->



            <xsd:bll_dt_gnrt>'
            || pBllrInfBllDtGnrt
            || '</xsd:bll_dt_gnrt>



            <!--Optional:-->



            <xsd:bll_dt_to>'
            || pBllrInfBllDtTo
            || '</xsd:bll_dt_to>



            <!--Optional:-->



            <xsd:bll_late_fee>'
            || pBllrInfBllLateFee
            || '</xsd:bll_late_fee>



            <!--Optional:-->



            <xsd:bll_mobno>'
            || pBillMobNo
            || '</xsd:bll_mobno>



            <!--Optional:-->



            <xsd:bll_no>'
            || pBillNo
            || '</xsd:bll_no>



            <!--Optional:-->



            <xsd:bll_period>'
            || pBillPeriod
            || '</xsd:bll_period>



            <!--Optional:-->



            <xsd:bll_typ>'
            || pBillType
            || '</xsd:bll_typ>



            <!--Optional:-->



            <xsd:bll_vat>'
            || pBllrInfBllVat
            || '</xsd:bll_vat>



            <!--Optional:-->



            <xsd:bllr_accno>'
            || pBillerAcNo
            || '</xsd:bllr_accno>



            <!--Optional:-->



            <xsd:bllr_id>'
            || pBillerId
            || '</xsd:bllr_id>



            <!--Optional:-->



            <xsd:ekpay_fee>'
            || pBllrInfEkpayFee
            || '</xsd:ekpay_fee>



            <!--Optional:-->



            <xsd:is_bll_pd>'
            || pIsBillPay
            || '</xsd:is_bll_pd>



            <!--Optional:-->



            <xsd:mode>SAPI</xsd:mode>



            <!--Optional:-->



            <xsd:nd_id>NS6321</xsd:nd_id>



            <!--Optional:-->



            <xsd:nm>UPDT_BLL_PYMNT_REQ</xsd:nm>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Optional:-->



            <xsd:pyd_amnt>'
            || pGrandTotalAmount
            || '</xsd:pyd_amnt>



            <!--Optional:-->



            <xsd:pyd_tms>'
            || vTimeStamp
            || '</xsd:pyd_tms>



            <!--Optional:-->



            <xsd:pyd_trxn_refid>'
            || vTrxId
            || '</xsd:pyd_trxn_refid>



            <!--Optional:-->



            <xsd:ref_id>'
            || pRespStatusRefId
            || '</xsd:ref_id>

        

        <!--Optional:-->



            <xsd:refno_ack>'
            || pRespStatusRefnoAck
            || '</xsd:refno_ack>



            <!--Optional:-->



            <xsd:syndct_id>s632</xsd:syndct_id>



            <!--Optional:-->



            <xsd:tms>'
            || vTimeStamp
            || '</xsd:tms>



            <!--Optional:-->



            <xsd:trx_id>'
            || vTrxId
            || '</xsd:trx_id>



            <!--Optional:-->



            <xsd:trx_tms>'
            || vTimeStamp
            || '</xsd:trx_tms>



            <!--Optional:-->



            <xsd:userName>cityagentapp</xsd:userName>



            <!--Optional:-->



            <xsd:ver>v1.3.0</xsd:ver>



         </axis:request>



      </axis:ekPayUpdateBillPayment>



   </soapenv:Body>



</soapenv:Envelope>';



        /*BEGIN



            EMOB.GLOBAL_CBS_ALL_API.EKPAY_CHECK_BALANCE (



                pTrxTrxId              => vTrxTrxId,



                pTrxTrxTms             => vTrxTrxTms,



                pRespStatusAckNo       => vRespStatusAckNo,



                pBcktBlncInfBcktBlnc   => vBcktBlncInfBcktBlnc,



                pErrorFlag             => pErrorFlag,



                pErrorMessage          => pErrorMessage);



        EXCEPTION



            WHEN OTHERS



            THEN



                pErrorMessage :=



                       'EkPay Check Bucket Balance API Calling Problem. - '



                    || SQLERRM;



                RAISE vMyException;



        END;







        IF pErrorFlag = 'Y'



        THEN



            RAISE vMyException;



        END IF;







        IF TO_NUMBER (vBcktBlncInfBcktBlnc) < pGrandTotalAmount



        THEN



            pErrorMessage :=



                'Insufficient Bank Bucket Balance: ' || vBcktBlncInfBcktBlnc;



            RAISE vMyException;



        END IF;*/
        BEGIN
            API_XML_LOG (pOprType        => 'EKPAY_BILL_PAY',
                         pRefNo          => pBllrInfRefId,
                         pDrAcNo         => pBillNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => NULL,
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMessage,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    -- P_VERSION    => '1.2',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 15,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    EMOB.PRC_TRANSACTION_FAIL_LOG (
                        pDocNum       => pDocNum,
                        pTranType     => 'EKPAY',
                        pApiError     => pErrorMessage,
                        pTranStatus   => 'U');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                BEGIN
                    API_XML_LOG (pOprType        => 'EKPAY_BILL_PAY',
                                 pRefNo          => pBllrInfRefId,
                                 pDrAcNo         => pBillNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => SQLERRM,
                                 pErrorMessage   => pErrorMessage,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMessage);
                END;

                pErrorMessage := 'API Request Fail';



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'EKPAY_BILL_PAY',
                         pRefNo          => pBllrInfRefId,
                         pDrAcNo         => pBillNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMessage,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'LOG process Calling Problem';



                RAISE vMyException;
        END;

        IF vOutXml1 IS NULL
        THEN
            BEGIN
                EMOB.PRC_TRANSACTION_FAIL_LOG (pDocNum       => pDocNum,
                                               pTranType     => 'EKPAY',
                                               pApiError     => pErrorMessage,
                                               pTranStatus   => 'U');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            pErrorMessage := 'No Response From API';
            RAISE vMyException;
        END IF;



        BEGIN
                SELECT UpdateBalance.REF_ID,
                       UpdateBalance.ACK_NO,
                       UpdateBalance.RSP_CD,
                       UpdateBalance.RSP_MSG,
                       UpdateBalance.TRX_ID,
                       UpdateBalance.TRX_TMS
                  INTO pRefId,
                       pRefNoAckn,
                       vRespCd,
                       vRespMsg,
                       pTrx_id,
                       pTrx_tms
                  FROM XMLTABLE (
                           XMLNAMESPACES (
                               'http://ws.apache.org/axis2' AS "ns",
                               'http://ekPay.utility.city/xsd' AS "ax293"),
                           '//ns:ekPayUpdateBillPaymentResponse'
                           PASSING vOutXml1
                           COLUMNS REF_ID     VARCHAR2 (1024) PATH '//ax293:ref_id',
                                   ACK_NO     VARCHAR2 (1024) PATH '//ax293:ack_no',
                                   RSP_CD     VARCHAR2 (1024) PATH '//ax293:rsp_cd',
                                   RSP_MSG    VARCHAR2 (1024) PATH '//ax293:rsp_msg',
                                   TRX_ID     VARCHAR2 (1024) PATH '//ax293:trx_id',
                                   TRX_TMS    VARCHAR2 (1024) PATH '//ax293:trx_tms')
                       UpdateBalance;
        END;



        IF vRespCd != '0000'
        THEN
            pErrorMessage := 'Error From API-' || vRespMsg;



            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE EKPAY_BILLER_INFO_SETUP (pRunUser            VARCHAR2,
                                       pErrorFlag      OUT VARCHAR2,
                                       pErrorMessage   OUT VARCHAR2)
    IS
        l_envelope       CLOB;



        vOutXml1         XMLTYPE;



        vMyException     EXCEPTION;



        vApiUrl          VARCHAR2 (1024);



        vSecurityToken   VARCHAR2 (1024);



        vTokenExpTime    VARCHAR2 (50);



        vTokenType       VARCHAR2 (50);



        vFileId          NUMBER;



        vAckTimestamp    VARCHAR2 (50);



        vCountInptPref   NUMBER := NULL;



        vTrxId           VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vTimeStamp       VARCHAR2 (50)
            :=    TO_CHAR (SYSDATE, 'RRRR-MM-DD')
               || 'T'
               || TO_CHAR (SYSDATE, 'HH24:MI:SS')
               || '+06:00';
    BEGIN
        --URL Name :   http://192.168.220.53:9080/axis2/services/CBLUtilityWebServices?wsdl



        vApiUrl := 'https://services.thecitybank.com:9773'; --vApiUrl := 'http://192.168.220.53:9080';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.GET_TOKEN_EKPAY (
                pSecurityToken   => vSecurityToken,
                pTokenExpTime    => vTokenExpTime,
                pTokenType       => vTokenType,
                pAckTimestamp    => vAckTimestamp,
                pErrorFlag       => pErrorFlag,
                pErrorMessage    => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage :=
                    'Get Token API Calling Problem. - ' || SQLERRM;



                RAISE vMyException;
        END;



        IF pErrorFlag = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://ekPay.utility.city/xsd">



   <soapenv:Header/>



   <soapenv:Body>



      <axis:ekPayFetchMDMbillers>



         <!--Optional:-->



         <axis:request>



            <!--Optional:-->



            <xsd:accessToken>'
            || vSecurityToken
            || '</xsd:accessToken>



            <!--Optional:-->



            <xsd:nd_id>NS6321</xsd:nd_id>



            <!--Optional:-->



            <xsd:nm>FETCH_MDM_DATA_REQ</xsd:nm>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Optional:-->



            <xsd:tms>'
            || vTimeStamp
            || '</xsd:tms>



            <!--Optional:-->



            <xsd:trx_id>'
            || vTrxId
            || '</xsd:trx_id>



            <!--Optional:-->



            <xsd:trx_tms>'
            || vTimeStamp
            || '</xsd:trx_tms>



            <!--Optional:-->



            <xsd:username>cityagentapp</xsd:username>



            <!--Optional:-->



            <xsd:ver>v1.3.0</xsd:ver>



         </axis:request>



      </axis:ekPayFetchMDMbillers>



   </soapenv:Body>



</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                =>
                        vApiUrl || '/cApps/services/CBLUtilityWebServices',
                    p_action             =>
                           vApiUrl
                        || '/cApps/services/CBLUtilityWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'EKPAY_BILLER_INFO',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => SQLERRM,
                                 pErrorMessage   => pErrorMessage,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMessage);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMessage := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'EKPAY_BILLER_INFO',
                         pRefNo          => NULL,
                         pDrAcNo         => NULL,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMessage,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
            DELETE FROM EMOB.EKPAY_INPUT_PREF;

            DELETE FROM EMOB.EKPAY_BILLER_INFO;
        END;



        BEGIN
            FOR I
                IN (                SELECT billerInfo.BILLR_ID
                                               AS BILLR_ID,
                                           billerInfo.BILLR_NM
                                               AS BILLR_NM,
                                           billerInfo.EXPR_TM
                                               AS EXPR_TM,
                                           billerInfo.FULL_NM
                                               AS FULL_NM,
                                           billerInfo.INPUT_PREF
                                               AS INPUT_PREF,
                                           billerInfo.IS_ACPT_ANY_AMT
                                               AS IS_ACPT_ANY_AMT,
                                           billerInfo.IS_AMT_FXD
                                               AS IS_AMT_FXD,
                                           billerInfo.IS_FTCH_BILL_AVLBL
                                               AS IS_FTCH_BILL_AVLBL,
                                           billerInfo.IS_FTCH_BILL_MNDTRY
                                               AS IS_FTCH_BILL_MNDTRY,
                                           billerInfo.SRVC_ID
                                               AS SRVC_ID,
                                           billerInfo.SRVC_NM
                                               AS SRVC_NM,
                                           billerInfo.SRVC_TYP
                                               AS SRVC_TYP,
                                           billerInfo.STTS
                                               AS STTS
                                      FROM XMLTABLE (
                                               XMLNAMESPACES (
                                                   'http://ws.apache.org/axis2' AS "ns",
                                                   'http://ekPay.utility.city/xsd' AS "ax280"),
                                               '//ns:ekPayFetchMDMbillersResponse//ax280:responseData'
                                               PASSING vOutXml1
                                               COLUMNS BILLR_ID               VARCHAR2 (1024) PATH '//ax280:bllr_id',
                                                       BILLR_NM               VARCHAR2 (1024) PATH '//ax280:bllr_nm',
                                                       EXPR_TM                VARCHAR2 (1024) PATH '//ax280:expr_tm',
                                                       FULL_NM                VARCHAR2 (1024) PATH '//ax280:full_nm',
                                                       INPUT_PREF             VARCHAR2 (1024) PATH '//ax280:inpt_pref',
                                                       IS_ACPT_ANY_AMT        VARCHAR2 (1024) PATH '//ax280:is_acpt_any_amt',
                                                       IS_AMT_FXD             VARCHAR2 (1024) PATH '//ax280:is_amt_fxd',
                                                       IS_FTCH_BILL_AVLBL     VARCHAR2 (1024) PATH '//ax280:is_ftch_bill_avlbl',
                                                       IS_FTCH_BILL_MNDTRY    VARCHAR2 (1024) PATH '//ax280:is_ftch_bill_mndtry',
                                                       SRVC_ID                VARCHAR2 (1024) PATH '//ax280:srvc_id',
                                                       SRVC_NM                VARCHAR2 (1024) PATH '//ax280:srvc_nm',
                                                       SRVC_TYP               VARCHAR2 (1024) PATH '//ax280:srvc_typ',
                                                       STTS                   VARCHAR2 (1024) PATH '//ax280:stts')
                                           billerInfo)
            LOOP
                INSERT INTO EMOB.EKPAY_BILLER_INFO (BLLR_ID,
                                                    SRVC_NM,
                                                    BLLR_NM,
                                                    FULL_NM,
                                                    STTS,
                                                    IS_FTCH_BILL_MNDTRY,
                                                    IS_FTCH_BILL_AVLBL,
                                                    IS_AMT_FXD,
                                                    --IS_ACPT_QCKPAY,



                                                    IS_ACPT_ANY_AMT,
                                                    EXPR_TM,
                                                    SRVC_ID,
                                                    SRVC_TYP,
                                                    CREATE_BY,
                                                    INPUT_PREF)
                     VALUES (I.BILLR_ID,
                             I.SRVC_NM,
                             I.BILLR_NM,
                             I.FULL_NM,
                             I.STTS,
                             I.IS_FTCH_BILL_MNDTRY,
                             I.IS_FTCH_BILL_AVLBL,
                             I.IS_AMT_FXD,
                             I.IS_ACPT_ANY_AMT,
                             I.EXPR_TM,
                             I.SRVC_ID,
                             I.SRVC_TYP,
                             pRunUser,
                             I.INPUT_PREF);
            END LOOP;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE FETCH_BILL_INFO (pBillerId                 VARCHAR2,
                               pBillNo                   VARCHAR2,
                               pBllType                  VARCHAR2,
                               pBillPeriod               VARCHAR2,
                               pMeterNo                  VARCHAR2,
                               pBillerAcNo               VARCHAR2,
                               pBillMobNo                VARCHAR2,
                               pXchngCode                VARCHAR2,
                               pLastPayDate              VARCHAR2,
                               pBillCstmFIdX             VARCHAR2,
                               pIsBllPd              OUT VARCHAR2,
                               pTrxId                OUT VARCHAR2,
                               pTrxTms               OUT VARCHAR2,
                               pRespStatusRefId      OUT VARCHAR2,
                               pRespStatusRefnoAck   OUT VARCHAR2,
                               pBllrInfBllNo         OUT VARCHAR2,
                               pBllrInfBllrAccno     OUT VARCHAR2,
                               pBllrInfBllMobno      OUT VARCHAR2,
                               pBllrInfBllAdd        OUT VARCHAR2,
                               pBllrInfBllTyp        OUT VARCHAR2,
                               pBllrInfBllDtFrm      OUT VARCHAR2,
                               pBllrInfBllDtTo       OUT VARCHAR2,
                               pBllrInfBllDtGnrt     OUT VARCHAR2,
                               pBllrInfBllDtDue      OUT VARCHAR2,
                               pBllrInfBllAmnt       OUT VARCHAR2,
                               pBllrInfBllVat        OUT VARCHAR2,
                               pBllrInfEkpayFee      OUT VARCHAR2,
                               pBllrInfBllLateFee    OUT VARCHAR2,
                               pBllrInfBllAmntTtl    OUT VARCHAR2,
                               pBllrInfBllBillerId   OUT VARCHAR2,
                               pErrorFlag            OUT VARCHAR2,
                               pErrorMessage         OUT VARCHAR2)
    IS
        l_envelope         CLOB;
        vOutXml1           XMLTYPE;
        vSecurityToken     VARCHAR2 (1024);
        vTokenExpTime      VARCHAR2 (50);
        vTokenType         VARCHAR2 (50);
        vAckTimestamp      VARCHAR2 (50);
        vMyException       EXCEPTION;

        vRefId             VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vTrxId             VARCHAR2 (32)
            := TO_CHAR (
                   TRUNC (
                       DBMS_RANDOM.VALUE (1,
                                          99999999999999999999999999999999)));



        vTimeStamp         VARCHAR2 (50)
            :=    TO_CHAR (SYSDATE, 'RRRR-MM-DD')
               || 'T'
               || TO_CHAR (SYSDATE, 'HH24:MI:SS')
               || '+06:00';

        vResponseCode      VARCHAR2 (1024);
        vResponseMessage   VARCHAR2 (1024);
        vRspCd             VARCHAR2 (1024);
        vRspMsg            VARCHAR2 (1024);
        vIsBllPd           VARCHAR2 (1024);
        vFileId            VARCHAR2 (1024);
        vApiUrl            VARCHAR2 (1024);
    BEGIN
        pIsBllPd := 'N';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        /*SELECT PATH_DIR
        into vApiUrl
        FROM GUMS.MB_GLOBAL_PATH
        WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';*/

        vApiUrl := 'https://services.thecitybank.com:9773'; --'http://192.168.220.53:9080'

        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.GET_TOKEN_EKPAY (
                pSecurityToken   => vSecurityToken,
                pTokenExpTime    => vTokenExpTime,
                pTokenType       => vTokenType,
                pAckTimestamp    => vAckTimestamp,
                pErrorFlag       => pErrorFlag,
                pErrorMessage    => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage :=
                    'Get Token API Calling Problem. - ' || SQLERRM;

                RAISE vMyException;
        END;

        IF pErrorFlag = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://ekPay.utility.city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:ekPayFetchBill>

         <!--Optional:-->
         
         <axis:request>

            <!--Optional:-->

            <xsd:accessToken>'
            || vSecurityToken
            || '</xsd:accessToken>

            <!--Optional:-->

            <xsd:bill_mobno>'
            || pBillMobNo
            || '</xsd:bill_mobno> 

            <!--Optional:-->

            <xsd:bll_no>'
            || pBillNo
            || '</xsd:bll_no>

            <!--Optional:-->

            <xsd:bll_period>'
            || pBillPeriod
            || '</xsd:bll_period>

            <!--Optional:-->

            <xsd:bll_typ>'
            || pBllType
            || '</xsd:bll_typ>
            
            <!--Optional:-->

            <xsd:bllr_accno>'
            || pBillerAcNo
            || '</xsd:bllr_accno>
            
            <!--Optional:-->
            
            <xsd:bllr_id>'
            || pBillerId
            || '</xsd:bllr_id>

            <!--Optional:-->

            <xsd:mode>SAPI</xsd:mode>

            <!--Optional:-->

            <xsd:nd_id>NS6321</xsd:nd_id>

            <!--Optional:-->

            <xsd:nm>FETCH_BLL_REQ</xsd:nm>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:ref_id>'
            || vRefId
            || '</xsd:ref_id>

            <!--Optional:-->

            <xsd:syndct_id>s632</xsd:syndct_id>

            <!--Optional:-->

            <xsd:tms>'
            || vTimeStamp
            || '</xsd:tms>

            <!--Optional:-->

            <xsd:trx_id>'
            || vTrxId
            || '</xsd:trx_id>

            <!--Optional:-->

            <xsd:trx_tms>'
            || vTimeStamp
            || '</xsd:trx_tms>

            <!--Optional:-->

            <xsd:userName>cityagentapp</xsd:userName>

            <!--Optional:-->

            <xsd:ver>v1.3.0</xsd:ver>

         </axis:request>

      </axis:ekPayFetchBill>

   </soapenv:Body>

</soapenv:Envelope>';

        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                =>
                        vApiUrl || '/cApps/services/CBLUtilityWebServices',
                    p_action             =>
                           vApiUrl
                        || '/cApps/services/CBLUtilityWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'Error: API Request Fail-' || SQLERRM;

                /*BEGIN

                      API_XML_LOG (pOprType        => 'EKPAY_BILL_FATCH',
                                   pRefNo          => vRefId,
                                   pDrAcNo         => pBillNo,
                                   pCrAcNo         => NULL,
                                   pFileId         => vFileId,
                                   pInXMl          => l_envelope,
                                   pOutXml         => vOutXml1.getClobVal (),
                                   pDbMessage      => pErrorMessage,
                                   pErrorMessage   => pErrorMessage,
                                   pLogId          => NULL,
                                   pNotifyFlag     => pErrorFlag,
                                   pNotifyMsg      => pErrorMessage);
                  EXCEPTION
                      WHEN OTHERS
                      THEN
                          pErrorMessage := 'LOG process Calling Problem'||SQLERRM;
                          RAISE vMyException;
                  END;*/

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'EKPAY_BILL_FATCH',
                         pRefNo          => vRefId,
                         pDrAcNo         => pBillNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMessage,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMessage);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMessage := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
                         SELECT billFetch.BLL_ADD              AS BLL_ADD,
                                billFetch.BLL_AMNT             AS BLL_AMNT,
                                billFetch.BLL_AMT_TTL          AS BLL_AMT_TTL,
                                billFetch.BLL_DT_DUE           AS BLL_DT_DUE,
                                billFetch.BLL_DT_FRM           AS BLL_DT_FRM,
                                billFetch.BLL_DT_GNRT          AS BLL_DT_GNRT,
                                billFetch.BLL_DT_TO            AS BLL_DT_TO,
                                billFetch.BLL_LATE_FEE         AS BLL_LATE_FEE,
                                billFetch.BLL_MOBNO            AS BLL_MOBNO,
                                billFetch.BLL_NO               AS BLL_NO,
                                billFetch.BLL_TYP              AS BLL_TYP,
                                billFetch.BLL_VAT              AS BLL_VAT,
                                billFetch.BLLR_ACCNO           AS BLLR_ACCNO,
                                billFetch.BLLR_ID              AS BLLR_ID,
                                billFetch.EKPAY_FEE            AS EKPAY_FEE,
                                billFetch.IS_BLL_PD            AS IS_BLL_PD,
                                billFetch.REFNO_ID             AS REFNO_ID,
                                billFetch.REFNO_ACK            AS REFNO_ACK,
                                billFetch.RESPONSE_CODE        AS RESPONSE_CODE,
                                billFetch.RESPONSE_MESSAGE     AS RESPONSE_MESSAGE,
                                billFetch.RSP_CD               AS RSP_CD,
                                billFetch.RSP_MSG              AS RSP_MSG,
                                billFetch.TRX_ID               AS TRX_ID,
                                billFetch.TRX_TMS              AS TRX_TMS
                           INTO pBllrInfBllAdd,
                                pBllrInfBllAmnt,
                                pBllrInfBllAmntTtl,
                                pBllrInfBllDtDue,
                                pBllrInfBllDtFrm,
                                pBllrInfBllDtGnrt,
                                pBllrInfBllDtTo,
                                pBllrInfBllLateFee,
                                pBllrInfBllMobno,
                                pBllrInfBllNo,
                                pBllrInfBllTyp,
                                pBllrInfBllVat,
                                pBllrInfBllrAccno,
                                pBllrInfBllBillerId,
                                pBllrInfEkpayFee,
                                vIsBllPd,
                                pRespStatusRefId,
                                pRespStatusRefnoAck,
                                vResponseCode,
                                vResponseMessage,
                                vRspCd,
                                vRspMsg,
                                pTrxId,
                                pTrxTms
                           FROM XMLTABLE (
                                    XMLNAMESPACES (
                                        'http://ws.apache.org/axis2' AS "ns",
                                        'http://ekPay.utility.city/xsd' AS "ax293"),
                                    '//ns:ekPayFetchBillResponse'
                                    PASSING vOutXml1
                                    COLUMNS BLL_ADD             VARCHAR2 (1024) PATH '//ax293:bll_add',
                                            BLL_AMNT            VARCHAR2 (1024) PATH '//ax293:bll_amnt',
                                            BLL_AMT_TTL         VARCHAR2 (1024) PATH '//ax293:bll_amnt_ttl',
                                            BLL_DT_DUE          VARCHAR2 (1024) PATH '//ax293:bll_dt_due',
                                            BLL_DT_FRM          VARCHAR2 (1024) PATH '//ax293:bll_dt_frm',
                                            BLL_DT_GNRT         VARCHAR2 (1024) PATH '//ax293:bll_dt_gnrt',
                                            BLL_DT_TO           VARCHAR2 (1024) PATH '//ax293:bll_dt_to',
                                            BLL_LATE_FEE        VARCHAR2 (1024) PATH '//ax293:bll_late_fee',
                                            BLL_MOBNO           VARCHAR2 (1024) PATH '//ax293:bll_mobno',
                                            BLL_NO              VARCHAR2 (1024) PATH '//ax293:bll_no',
                                            BLL_TYP             VARCHAR2 (1024) PATH '//ax293:bll_typ',
                                            BLL_VAT             VARCHAR2 (1024) PATH '//ax293:bll_vat',
                                            BLLR_ACCNO          VARCHAR2 (1024) PATH '//ax293:bllr_accno',
                                            BLLR_ID             VARCHAR2 (1024) PATH '//ax293:bllr_id',
                                            EKPAY_FEE           VARCHAR2 (1024) PATH '//ax293:ekpay_fee',
                                            IS_BLL_PD           VARCHAR2 (1024) PATH '//ax293:is_bll_pd',
                                            REFNO_ID            VARCHAR2 (1024) PATH '//ax293:ref_id',
                                            REFNO_ACK           VARCHAR2 (1024) PATH '//ax293:refno_ack',
                                            RESPONSE_CODE       VARCHAR2 (1024) PATH '//ax293:responseCode',
                                            RESPONSE_MESSAGE    VARCHAR2 (1024) PATH '//ax293:responseMessage',
                                            RSP_CD              VARCHAR2 (1024) PATH '//ax293:rsp_cd',
                                            RSP_MSG             VARCHAR2 (1024) PATH '//ax293:rsp_msg',
                                            TRX_ID              VARCHAR2 (1024) PATH '//ax293:trx_id',
                                            TRX_TMS             VARCHAR2 (1024) PATH '//ax293:trx_tms')
                                billFetch;
        END;

        IF vRspCd != '0000'
        THEN
            pErrorMessage := vRspMsg;
            RAISE vMyException;
        END IF;


        IF vRspCd = '0000'
        THEN
            IF vIsBllPd = 'Y'
            THEN
                pIsBllPd := vIsBllPd;
                pErrorMessage := 'This Bill Has Already Paid.';
                RAISE vMyException;
            END IF;
        END IF;



        IF vResponseCode != '100'
        THEN
            pErrorMessage := 'Error From API:-' || vResponseMessage;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE MINI_STATEMENT_API (pAcNo             IN     VARCHAR2,
                                  pCbNumber         IN     VARCHAR2,
                                  pLogId            IN     VARCHAR2,
                                  pAvailableBalne      OUT VARCHAR2,
                                  pOutletAddress       OUT VARCHAR2,
                                  pAcHolderAdress      OUT VARCHAR2,
                                  pResponse            OUT VARCHAR2,
                                  pErrorFlag           OUT VARCHAR2,
                                  pErrorMsg            OUT VARCHAR2)
    IS
        vOutXml1         XMLTYPE;
        l_envelope       CLOB;
        vApiUrl          VARCHAR2 (1024);
        vOracleMsg       VARCHAR2 (1024);
        vMyException     EXCEPTION;
        vResMsg          VARCHAR2 (3000);
        vResCode         VARCHAR2 (10);
        vFileId          NUMBER := 0;
        vCustName        VARCHAR2 (1024);
        vContact         VARCHAR2 (100);
        vBranchCode      VARCHAR2 (100);
        vAcTypeID        NUMBER;                                      ---Miaze
        vProductFor      VARCHAR2 (10);                                --Miaze
        vProductCode     VARCHAR2 (100);                               --Miaze
        vActualBal       NUMBER;
        pAccountStatus   VARCHAR2 (100);
        vAddLine1        VARCHAR2 (1024);
        vAddLine2        VARCHAR2 (1024);
        vDistrict        VARCHAR2 (100);
        vDivName         VARCHAR2 (100);
        vPostalCode      VARCHAR2 (100);
        vCbNumber        VARCHAR2 (100);
    BEGIN
        pErrorFlag := 'N';

        BEGIN
            SELECT AREA_NAME, AC_TYPE_ID
              INTO pOutletAddress, vAcTypeID       --vAcTypeID change by MIAZE
              FROM EMOB.MB_CUSTOMER_MST  a,
                   EMOB.MB_ACCOUNT_MST   b,
                   EMOB.ST_AGENT_POINT   c
             WHERE     a.CUST_NO = b.CUST_NO
                   AND b.AC_NO = pAcNo
                   AND c.POINT_ID = b.POINT_ID;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Outlet Address Finding Problem' || SQLERRM;

                RAISE vMyException;
        END;

        BEGIN
            SELECT NVL (PRODUCT_FOR, 'C')     PRODUCT_FOR
              INTO vProductFor
              FROM EMOB.MB_PRODUCT_MST
             WHERE AC_TYPE_ID = vAcTypeID;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Error: Customer for Type Findings Problem';
                RAISE vMyException;
        END;

        IF TRIM (vProductFor) = 'C'
        THEN           ------------Added by MIAZE for Islamic And Conventional
            BEGIN
                EMOB.GLOBAL_CBS_ALL_API.CUST_INQUIRY_API (
                    pCustId       => pCbNumber,
                    pName         => vCustName,
                    pContact      => vContact,
                    pAddress      => pAcHolderAdress,
                    pBranchCode   => vBranchCode,
                    pErrorFlag    => pErrorFlag,
                    pErrorMsg     => pErrorMsg);

                IF NVL (pErrorFlag, 'N') = 'Y'
                THEN
                    pErrorMsg := pErrorMsg;

                    RAISE vMyException;
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg :=
                        'Account Holder Address Finding Problem' || SQLERRM;

                    RAISE vMyException;
            END;
        ------Change made by MIAZE for ISlamic and Conventional---
        ELSE
            BEGIN
                EMOB.GLOBAL_CBS_ALL_API.IW_GET_AC_DETAILS (
                    pAcNo               => pAcNo,
                    pLogId              => pLogId,
                    pAccountName        => vCustName,
                    pAvailableBalance   => pAvailableBalne,
                    pActualBalance      => vActualBal,
                    pAccountStatus      => pAccountStatus,
                    pAddressLineOne     => vAddLine1,
                    pAddressLineTwo     => vAddLine2,
                    pConatactNumber     => vContact,
                    pDistrictName       => vDistrict,
                    pDivisionName       => vDivName,
                    pPostalCode         => vPostalCode,
                    pProductCode        => vProductCode,
                    pCustomerId         => vCbNumber,
                    pBranchCode         => vBranchCode,
                    pErrorFlag          => pErrorFlag,
                    pErrorMsg           => pErrorMsg);

                IF NVL (pErrorFlag, 'N') = 'Y'
                THEN
                    pErrorMsg := pErrorMsg;

                    RAISE vMyException;
                END IF;

                pAcHolderAdress :=
                       vAddLine1
                    || ' , '
                    || vAddLine2
                    || '-'
                    || vPostalCode
                    || ' , '
                    || vDistrict
                    || ' , '
                    || vDivName;
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg :=
                        'Account Holder Address Finding Problem for Islamic';

                    RAISE vMyException;
            END;
        END IF;

        -----End Modification-------



        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        /* ENVELOPE GENERATE */



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>
   <soapenv:Body>

      <axis:getCASAMiniStatement>

         <!--Optional:-->

        <axis:request>

        <!--Optional:-->

        <xsd:accountNumber>'
            || pAcNo
            || '</xsd:accountNumber>

        <!--Optional:-->

        <xsd:cbsCustomerID>'
            || pCbNumber
            || '</xsd:cbsCustomerID>

        <!--Optional:-->

        <xsd:password>Cbl#2021@Agent</xsd:password>

        <!--Optional:-->

        <xsd:username>cityagentapp</xsd:username>

        </axis:request>

      </axis:getCASAMiniStatement>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10);
        /*vOutXml1 :=
            APEX_WEB_SERVICE.make_request (
                p_url                => vApiUrl || '/cApps/services/CBLWebServices',
                p_action             =>
                    vApiUrl || '/cApps/services/CBLWebServices?wsdl',
                p_envelope           => l_envelope,
                p_transfer_timeout   => 10,
                p_wallet_path        => 'file:/u01/wallets',
                p_wallet_pwd         => 'citybank123');*/
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail' || SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'MINI_STATEMENT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => pAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'MINI_STATEMENT',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => pAcNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => vOracleMsg,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;



        BEGIN
                 SELECT rescode.RES_CODE, resmsg.RES_MSG, BAL.BALANCE
                   INTO vResCode, vResMsg, pAvailableBalne
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax2119"),
                            '//ns:getCASAMiniStatementResponse//ax2119:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax2119:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax2119"),
                            '//ns:getCASAMiniStatementResponse//ax2119:responseData'
                            PASSING vOutXml1
                            COLUMNS BALANCE     VARCHAR2 (1024) PATH '/ax2119:responseData/ax2119:availableBalance')
                        BAL,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://city/xsd' AS "ax2119"),
                            '//ns:getCASAMiniStatementResponse//ax2119:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax2119:responseMessage')
                        resmsg;
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    API_XML_LOG (pOprType        => 'MINI_STATEMENT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => pAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => vOracleMsg,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                pErrorMsg := 'XML Parsing Problem' || SQLERRM;

                RAISE vMyException;
        END;



        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS(C) - ' || vResMsg;

            RAISE vMyException;
        END IF;



        BEGIN
            SELECT JSON_OBJECT (
                       KEY 'data' VALUE
                           (         SELECT JSON_ARRAYAGG (
                                                JSON_OBJECT (
                                                    KEY 'DATE' VALUE
                                                        res_date.tran_date,
                                                    KEY 'DESCRIPTION' VALUE
                                                        res_date.description,
                                                    KEY 'DEPSOIT' VALUE
                                                        res_date.deposit_amt,
                                                    KEY 'WITHDRAW' VALUE
                                                        res_date.withdraw_amt))
                                       FROM XMLTABLE (
                                                XMLNAMESPACES (
                                                    'http://ws.apache.org/axis2'
                                                        AS "ns",
                                                    'http://city/xsd' AS "ax2119"),
                                                '//ns:getCASAMiniStatementResponse//ax2119:transactionList'
                                                PASSING vOutXml1
                                                COLUMNS deposit_amt     VARCHAR2 (100) PATH '//ax2119:deposit',
                                                        withdraw_amt    VARCHAR2 (100) PATH '//ax2119:withdraw',
                                                        description     VARCHAR2 (100) PATH '//ax2119:description',
                                                        tran_date       VARCHAR2 (100) PATH '//ax2119:transactionDate')
                                            res_date))
              INTO pResponse
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Json Build Problem' || SQLERRM;
                RAISE vMyException;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE GET_CURRENT_AC (pLinkAc       IN     VARCHAR2,
                              pJsonOutput      OUT VARCHAR2,
                              pErrorFlag       OUT VARCHAR2,
                              pErrorMsg        OUT VARCHAR2)
    IS
        l_envelope       CLOB;

        vOutXml1         XMLTYPE;

        vApiUrl          VARCHAR2 (1024);

        pOracleMessage   VARCHAR2 (1024);

        vFileId          NUMBER := 0;

        vMyException     EXCEPTION;

        vAdd1            VARCHAR2 (1024);

        vAdd2            VARCHAR2 (1024);

        vAdd3            VARCHAR2 (1024);

        vCity            VARCHAR2 (1024);

        vCountry         VARCHAR2 (1024);

        vPostalCode      VARCHAR2 (1024);

        vNomineeName     VARCHAR2 (1024);

        vGurAdd1         VARCHAR2 (1024);

        vGurAdd2         VARCHAR2 (1024);

        vGurCity         VARCHAR2 (1024);

        vGurPostalCode   VARCHAR2 (1024);

        vGurName         VARCHAR2 (1024);

        vResCode         VARCHAR2 (100);

        vResMsg          VARCHAR2 (1024);

        vOccupation      VARCHAR2 (1024);

        vSectorCode      VARCHAR2 (1024);

        vSubSecCode      VARCHAR2 (1024);

        vNomPercentage   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        pErrorFlag := 'N';



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:GetCurrentAccount>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:accountNumber>'
            || pLinkAc
            || '</xsd:accountNumber>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:GetCurrentAccount>

   </soapenv:Body>

</soapenv:Envelope>';



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => -vApiUrl || '/CBLFIWebServices', --vApiUrl || '/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', -- vApiUrl || '/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'GET_CURRENT_DTL',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pLinkAc,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => NULL,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'GET_CURRENT_DTL',
                         pRefNo          => NULL,
                         pDrAcNo         => pLinkAc,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
                                SELECT GetSavingsAc.ADD1,
                                       GetSavingsAc.ADD2,
                                       GetSavingsAc.ADD3,
                                       GetSavingsAc.CITY,
                                       GetSavingsAc.COUNTRY,
                                       GetSavingsAc.POSTAL_CODE,
                                       GetSavingsAc.NOMINEE_NAME,
                                       GetSavingsAc.NOMINEE_PERCENTAGE,
                                       GetSavingsAc.NOMINEE_GUR_ADD1,
                                       GetSavingsAc.NOMINEE_GUR_ADD2,
                                       GetSavingsAc.NOMINEE_GUR_CITY,
                                       GetSavingsAc.NOMINEE_GUR_NAME,
                                       GetSavingsAc.NOMINEE_GUR_POSTAL_CODE,
                                       GetSavingsAc.RES_CODE,
                                       GetSavingsAc.RES_MSG,
                                       GetSavingsAc.OCCUPATION,
                                       GetSavingsAc.SECTOR_CODE,
                                       GetSavingsAc.SUB_SECTOR_CODE
                                  INTO vAdd1,
                                       vAdd2,
                                       vAdd3,
                                       vCity,
                                       vCountry,
                                       vPostalCode,
                                       vNomineeName,
                                       vNomPercentage,
                                       vGurAdd1,
                                       vGurAdd2,
                                       vGurCity,
                                       vGurName,
                                       vGurPostalCode,
                                       vResCode,
                                       vResMsg,
                                       vOccupation,
                                       vSectorCode,
                                       vSubSecCode
                                  FROM XMLTABLE (
                                           XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                          'http://fi/xsd' AS "ax233"),
                                           '//ns:GetCurrentAccountResponse'
                                           PASSING vOutXml1
                                           COLUMNS ADD1                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:addr1',
                                                   ADD2                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:addr2',
                                                   ADD3                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:addr3',
                                                   CITY                       VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:city',
                                                   COUNTRY                    VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:country',
                                                   POSTAL_CODE                VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:postalCode',
                                                   NOMINEE_NAME               VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeName',
                                                   NOMINEE_PERCENTAGE         VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineePercent',
                                                   NOMINEE_GUR_ADD1           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianAddr1',
                                                   NOMINEE_GUR_ADD2           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianAddr2',
                                                   NOMINEE_GUR_CITY           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianCity',
                                                   NOMINEE_GUR_NAME           VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianName',
                                                   NOMINEE_GUR_POSTAL_CODE    VARCHAR2 (1024) PATH '//ax233:nomineeInfoRecList//ax233:nomineeGuardianPostalCode',
                                                   RES_CODE                   VARCHAR2 (1024) PATH '//ax233:responseCode',
                                                   RES_MSG                    VARCHAR2 (1024) PATH '//ax233:responseMessage',
                                                   OCCUPATION                 VARCHAR2 (1024) PATH '//ax233:caAcctInq_customData//ax233:occupationcode',
                                                   SECTOR_CODE                VARCHAR2 (1024) PATH '//ax233:caAcctInq_customData//ax233:sectorcode',
                                                   SUB_SECTOR_CODE            VARCHAR2 (1024) PATH '//ax233:caAcctInq_customData//ax233:subsectorcode')
                                       GetSavingsAc;
        END;



        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C)- ' || vResMsg;

            RAISE vMyException;
        ELSE
            BEGIN
                SELECT JSON_OBJECT ('nomineeName' VALUE vNomineeName,
                                    'occupation' VALUE vOccupation,
                                    'add1' VALUE vAdd1,
                                    'add2' VALUE vAdd1,
                                    'add3' VALUE vAdd3,
                                    'city' VALUE vCity,
                                    'country' VALUE vCountry,
                                    'postalCode' VALUE vPostalCode,
                                    'nomineeName' VALUE vNomineeName,
                                    'nomineePercentage' VALUE vNomPercentage,
                                    'gurAdd1' VALUE vGurAdd1,
                                    'gurAdd2' VALUE vGurAdd2,
                                    'gurCity' VALUE vGurCity,
                                    'gurName' VALUE vGurName,
                                    'gurPostalCode' VALUE vGurPostalCode,
                                    'sectorCode' VALUE vSectorCode,
                                    'subSecCode' VALUE vSubSecCode)
                  INTO pJsonOutput
                  FROM DUAL;
            END;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE CUST_INQUIRY_DTL_API (pAcNo               VARCHAR2,
                                    pResponseJson   OUT VARCHAR2,
                                    pErrorFlag      OUT VARCHAR2,
                                    pErrorMsg       OUT VARCHAR2)
    IS
        vOutXml          CLOB;
        l_envelope       CLOB;
        l_envelope1      CLOB;
        vOutXml1         XMLTYPE;
        vOutXml2         XMLTYPE;
        vResCode         VARCHAR2 (10);
        vResMsg          VARCHAR2 (1024);
        vFileId          NUMBER;
        vApiUrl          VARCHAR2 (1024);
        vMyException     EXCEPTION;
        pOracleMessage   VARCHAR2 (1024);

        vJsonOutput      VARCHAR2 (3000);

        vAcNo            VARCHAR2 (20);

        vCustCode        VARCHAR2 (100);

        vSubSectorCode   VARCHAR2 (20);

        vResponseJson    VARCHAR2 (5000);

        vAcName          VARCHAR2 (1024);

        vFinacleId       VARCHAR2 (100);

        vPrefFlag        VARCHAR2 (1);

        vPrefFlag1       VARCHAR2 (1);

        vPrefFlag2       VARCHAR2 (1);

        vPrefFlag3       VARCHAR2 (1);

        vPhoneOrEmail    VARCHAR2 (500);

        vPhoneOrEmail1   VARCHAR2 (500);

        vPhoneOrEmail2   VARCHAR2 (500);

        vPhoneOrEmail3   VARCHAR2 (500);

        vMail            VARCHAR2 (500);

        vMail1           VARCHAR2 (500);

        vMail2           VARCHAR2 (500);

        vMail3           VARCHAR2 (500);

        vPhone           VARCHAR2 (500);

        vPhone1          VARCHAR2 (500);

        vPhone2          VARCHAR2 (500);

        vPhone3          VARCHAR2 (500);

        vJsonPhone       VARCHAR2 (500);

        vJsonMail        VARCHAR2 (500);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        -- ENVELOPE GENERATE ---

        pErrorFlag := 'S';

        BEGIN
            SELECT CUST_CODE
              INTO vCustCode
              FROM EMOB.MB_CUSTOMER_MST A, EMOB.MB_ACCOUNT_MST B
             WHERE A.CUST_NO = B.CUST_NO AND B.AC_NO = pAcNo;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                pErrorMsg := 'Customer Info. Not Found on ABS.';

                RAISE vMyException;
            WHEN OTHERS
            THEN
                pErrorMsg := 'Customer Info. Finding Problem.';

                RAISE vMyException;
        END;



        BEGIN
            SELECT A.AC_TITLE, B.FINACLE_ID
              INTO vAcName, vFinacleId
              FROM EMOB.MB_ACCOUNT_MST A, EMOB.ST_AGENT_POINT B
             WHERE A.POINT_ID = B.POINT_ID AND A.AC_NO = pAcNo;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'A/C Title and Finacle Id Finding Probelm.';

                RAISE vMyException;
        END;



        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">



   <soapenv:Header/>



   <soapenv:Body>



      <axis:GetCbsCustomerInfo>



         <!--Optional:-->



         <axis:request>



            <!--Optional:-->



            <xsd:customerId>'
            || vCustCode
            || '</xsd:customerId>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Optional:-->



            <xsd:username>cityagentapp</xsd:username>



         </axis:request>



      </axis:GetCbsCustomerInfo>



   </soapenv:Body>



</soapenv:Envelope>';



        l_envelope1 :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:getAccountDetails>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:accountNumber>'
            || pAcNo
            || '</xsd:accountNumber>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:getAccountDetails>

   </soapenv:Body>

</soapenv:Envelope>';


        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'CUS_QUERY_DTL',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'CUS_QUERY_DTL',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        BEGIN
            vOutXml2 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope1,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'AC_QUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope1,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF NVL (pErrorFlag, 'N') = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
            API_XML_LOG (pOprType        => 'AC_QUERY',
                         pRefNo          => pAcNo,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope1,
                         pOutXml         => vOutXml2.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF NVL (pErrorFlag, 'N') = 'Y'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
                  SELECT responsedata.SUBSECTOR
                    INTO vSubSectorCode
                    FROM XMLTABLE (
                             XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                            'http://city/xsd' AS "ax2359"),
                             '//ns:getAccountDetailsResponse//ax2359:responseData//ax2359:prodcutCode'
                             PASSING vOutXml2
                             COLUMNS SUBSECTOR    VARCHAR2 (1024) PATH '/ax2359:prodcutCode')
                         responsedata;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'AC_QUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope1,
                                 pOutXml         => vOutXml2.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                IF NVL (pErrorFlag, 'N') = 'Y'
                THEN
                    RAISE vMyException;
                END IF;



                RAISE vMyException;
        END;



        -------Parse Email Phone

        BEGIN
                      SELECT response.PREFFALG,
                             response.PREFFALG1,
                             response.PREFFALG2,
                             response.PREFFALG3,
                             response.PHONEOREMAIL,
                             response.PHONEOREMAIL1,
                             response.PHONEOREMAIL2,
                             response.PHONEOREMAIL3,
                             response.EMAIL,
                             response.EMAIL1,
                             response.EMAIL2,
                             response.EMAIL3,
                             response.PHONE,
                             response.PHONE1,
                             response.PHONE2,
                             response.PHONE3,
                             response.RSCODE,
                             response.RSMSG
                        INTO vPrefFlag,
                             vPrefFlag1,
                             vPrefFlag2,
                             vPrefFlag3,
                             vPhoneOrEmail,
                             vPhoneOrEmail1,
                             vPhoneOrEmail2,
                             vPhoneOrEmail3,
                             vMail,
                             vMail1,
                             vMail2,
                             vMail3,
                             vPhone,
                             vPhone1,
                             vPhone2,
                             vPhone3,
                             vResCode,
                             vResMsg
                        FROM XMLTABLE (
                                 XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                'http://fi/xsd' AS "ax219"),
                                 '//ns:GetCbsCustomerInfoResponse'
                                 PASSING vOutXml1
                                 COLUMNS PREFFALG         VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:prefFlag',
                                         PREFFALG1        VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:prefFlag',
                                         PREFFALG2        VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:prefFlag',
                                         PREFFALG3        VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[4]//ax219:prefFlag',
                                         PHONEOREMAIL     VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:phoneOrEmail',
                                         PHONEOREMAIL1    VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:phoneOrEmail',
                                         PHONEOREMAIL2    VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:phoneOrEmail',
                                         PHONEOREMAIL3    VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[4]//ax219:phoneOrEmail',
                                         EMAIL            VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:emailInfo',
                                         EMAIL1           VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:emailInfo',
                                         EMAIL2           VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:emailInfo',
                                         EMAIL3           VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[4]//ax219:emailInfo',
                                         PHONE            VARCHAR2 (20) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:phoneNumLocalCode',
                                         PHONE1           VARCHAR2 (20) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:phoneNumLocalCode',
                                         PHONE2           VARCHAR2 (20) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:phoneNumLocalCode',
                                         PHONE3           VARCHAR2 (20) PATH '//ax219:phoneEmailInfoResponses[4]//ax219:phoneNumLocalCode',
                                         RSCODE           VARCHAR2 (1024) PATH '//ax219:responseCode',
                                         RSMSG            VARCHAR2 (1024) PATH '//ax219:responseMessage')
                             response;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CUS_QUERY_DTL',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        -----End Parse Email Phone
        IF vPrefFlag = 'Y' AND vPhoneOrEmail = 'EMAIL'
        THEN
            vJsonMail := vMail;
        ELSIF vPrefFlag1 = 'Y' AND vPhoneOrEmail1 = 'EMAIL'
        THEN
            vJsonMail := vMail1;
        ELSIF vPrefFlag2 = 'Y' AND vPhoneOrEmail2 = 'EMAIL'
        THEN
            vJsonMail := vMail2;
        ELSIF vPrefFlag3 = 'Y' AND vPhoneOrEmail3 = 'EMAIL'
        THEN
            vJsonMail := vMail3;
        ELSE
            vJsonMail := 'No Email Found.';
        END IF;

        IF vPrefFlag = 'Y' AND vPhoneOrEmail = 'PHONE'
        THEN
            vJsonPhone := vPhone;
        ELSIF vPrefFlag1 = 'Y' AND vPhoneOrEmail1 = 'PHONE'
        THEN
            vJsonPhone := vPhone1;
        ELSIF vPrefFlag2 = 'Y' AND vPhoneOrEmail2 = 'PHONE'
        THEN
            vJsonPhone := vPhone2;
        ELSIF vPrefFlag3 = 'Y' AND vPhoneOrEmail3 = 'PHONE'
        THEN
            vJsonPhone := vPhone3;
        ELSE
            vJsonMail := 'No Phone No. Found.';
        END IF;



        BEGIN
                      SELECT json_object (
                                 'custName' VALUE response.CUST_NAME,
                                 'custNid' VALUE
                                     DECODE (response.DOCCODE,
                                             'NID', response.NID,
                                             response.DOCCODE1, 'NID',
                                             response.NID1),
                                 'custTin' VALUE
                                     DECODE (response.DOCCODE,
                                             'ETIN', response.TIN,
                                             response.DOCCODE1, 'ETIN',
                                             response.TIN1),
                                 'custMail' VALUE vJsonMail,
                                 'custPhone' VALUE vJsonPhone,
                                 'presentAddress' VALUE
                                     json_object (
                                         'addLine1' VALUE response.PADD1,
                                         'addLine2' VALUE response.PADD2,
                                         'city' VALUE response.PCITY,
                                         'country' VALUE response.PCOUNTRY,
                                         'postalCode' VALUE response.PPOST_CODE,
                                         'state' VALUE response.PSTATE),
                                 'workAddress' VALUE
                                     json_object (
                                         'addLine1' VALUE response.WADD1,
                                         'addLine2' VALUE response.WADD2,
                                         'city' VALUE response.WCITY,
                                         'country' VALUE response.WCOUNTRY,
                                         'postalCode' VALUE response.WPOST_CODE,
                                         'state' VALUE response.WSTATE),
                                 'permanentAddress' VALUE
                                     json_object (
                                         'addLine1' VALUE response.HADD1,
                                         'addLine2' VALUE response.HADD2,
                                         'city' VALUE response.HCITY,
                                         'country' VALUE response.HCOUNTRY,
                                         'postalCode' VALUE response.HPOST_CODE,
                                         'state' VALUE response.HSTATE),
                                 'fatherName' VALUE response.FATHERNAME,
                                 'motherName' VALUE response.MOTHERNAME,
                                 'maritalStatus' VALUE response.MARITALSTATUS,
                                 'spouseName' VALUE response.SPOUSENAME,
                                 'dateOfBirth' VALUE response.DOB,
                                 'sectorCode' VALUE SUBSTR (vSubSectorCode, 0, 1),
                                 'subSectorCode' VALUE vSubSectorCode,
                                 'acTitle' VALUE vAcName,
                                 'finacleId' VALUE vFinacleId,
                                 'profession' VALUE response.EMPSTATUS,
                                 'employer' VALUE response.EMPNAME),
                             response.RSCODE,
                             response.RSMSG
                        INTO pResponseJson, vResCode, vResMsg
                        FROM XMLTABLE (
                                 XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                                'http://fi/xsd' AS "ax219"),
                                 '//ns:GetCbsCustomerInfoResponse'
                                 PASSING vOutXml1
                                 COLUMNS CUST_NAME        VARCHAR2 (1024) PATH '//ax219:customerName',
                                         DOCCODE          VARCHAR2 (30) PATH '//ax219:entityDocDetailsResponses[1]//ax219:docCode',
                                         DOCCODE1         VARCHAR2 (30) PATH '//ax219:entityDocDetailsResponses[2]//ax219:docCode',
                                         NID              VARCHAR2 (17) PATH '//ax219:entityDocDetailsResponses[1]//ax219:referenceNum',
                                         NID1             VARCHAR2 (17) PATH '//ax219:entityDocDetailsResponses[2]//ax219:referenceNum',
                                         TIN              VARCHAR2 (30) PATH '//ax219:entityDocDetailsResponses[1]//ax219:referenceNum',
                                         TIN1             VARCHAR2 (30) PATH '//ax219:entityDocDetailsResponses[2]//ax219:referenceNum',
                                         PREFFALG         VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:prefFlag',
                                         PREFFALG1        VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:prefFlag',
                                         PREFFALG2        VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:prefFlag',
                                         PHONEOREMAIL     VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:phoneOrEmail',
                                         PHONEOREMAIL1    VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:phoneOrEmail',
                                         PHONEOREMAIL2    VARCHAR2 (30) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:phoneOrEmail',
                                         EMAIL            VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:emailInfo',
                                         EMAIL1           VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:emailInfo',
                                         EMAIL2           VARCHAR2 (1024) PATH '//ax219:phoneEmailInfoResponses[3]//ax219:emailInfo',
                                         PHONE            VARCHAR2 (20) PATH '//ax219:phoneEmailInfoResponses[1]//ax219:phoneNumLocalCode',
                                         PHONE1           VARCHAR2 (20) PATH '//ax219:phoneEmailInfoResponses[2]//ax219:phoneNumLocalCode',
                                         PADD1            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[1]//ax219:addrLine1',
                                         PADD2            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[1]//ax219:addrLine2',
                                         PCITY            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[1]//ax219:city',
                                         PCOUNTRY         VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[1]//ax219:country',
                                         PPOST_CODE       VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[1]//ax219:postalCode',
                                         PSTATE           VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[1]//ax219:state',
                                         WADD1            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[2]//ax219:addrLine1',
                                         WADD2            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[2]//ax219:addrLine2',
                                         WCITY            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[2]//ax219:city',
                                         WCOUNTRY         VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[2]//ax219:country',
                                         WPOST_CODE       VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[2]//ax219:postalCode',
                                         WSTATE           VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[2]//ax219:state',
                                         HADD1            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[3]//ax219:addrLine1',
                                         HADD2            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[3]//ax219:addrLine2',
                                         HCITY            VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[3]//ax219:city',
                                         HCOUNTRY         VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[3]//ax219:country',
                                         HPOST_CODE       VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[3]//ax219:postalCode',
                                         HSTATE           VARCHAR2 (1024) PATH '//ax219:retCustAddressInfoResponses[3]//ax219:state',
                                         FATHERNAME       VARCHAR2 (1024) PATH '//ax219:fatherName',
                                         MOTHERNAME       VARCHAR2 (1024) PATH '//ax219:motherName',
                                         MARITALSTATUS    VARCHAR2 (1024) PATH '//ax219:maritalStatus',
                                         SPOUSENAME       VARCHAR2 (1024) PATH '//ax219:spouseName',
                                         DOB              VARCHAR2 (1024) PATH '//ax219:birthDate',
                                         RSCODE           VARCHAR2 (1024) PATH '//ax219:responseCode',
                                         RSMSG            VARCHAR2 (1024) PATH '//ax219:responseMessage',
                                         EMPSTATUS        VARCHAR2 (1024) PATH '//ax219:employmentStatus',
                                         EMPNAME          VARCHAR2 (1024) PATH '//ax219:nameOfEmployer')
                             response;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'CUS_QUERY_DTL',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF NVL (vResCode, '00') != 100
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE FD_OPEN_API (pAcNo            IN     VARCHAR2,
                           pInitdepoAmt     IN     VARCHAR2,
                           pDpsOpenDate     IN     DATE,
                           pDpsValuedDate   IN     DATE,
                           pCustCode        IN     VARCHAR2,
                           pTenureType      IN     VARCHAR2,
                           pDpsTenure       IN     VARCHAR2,
                           pAmountPerInst   IN     VARCHAR2,
                           pRmCode          IN     VARCHAR2,
                           pSchmcode        IN     VARCHAR2,
                           pRunUser         IN     VARCHAR2,
                           pAutoRenew       IN     VARCHAR2,
                           pRenewType       IN     VARCHAR2,
                           pSectorCode      IN     VARCHAR2,
                           pSubsectorcode   IN     VARCHAR2,
                           pFreeCode        IN     VARCHAR2,
                           pDepositCode     IN     VARCHAR2,
                           pExciseAmount    IN     NUMBER,
                           pExciseRemarks   IN     VARCHAR2,
                           pCbsAcNo            OUT VARCHAR2,
                           pErrorFlag          OUT VARCHAR2,
                           pErrorMsg           OUT VARCHAR2)
    IS
        l_envelope                CLOB;

        l_envelope1               CLOB;

        l_envelope2               CLOB;

        l_envelope3               CLOB;

        l_envelope4               CLOB;

        vOutXml1                  XMLTYPE;

        vApiUrl                   VARCHAR2 (1024);

        pOracleMessage            VARCHAR2 (1024);

        vFileId                   NUMBER := 0;

        vDpsOpenDate              VARCHAR2 (1024);

        vDpsValuedDate            VARCHAR2 (1024);

        vMyException              EXCEPTION;

        vNomCount                 NUMBER;

        vNomAvailAble             VARCHAR2 (10);

        vCustNo                   NUMBER;

        vAcType                   VARCHAR2 (2);

        vAge                      NUMBER;

        vMinorflag                VARCHAR2 (10);

        vResCode                  VARCHAR2 (10);

        vResMsg                   VARCHAR2 (1024);

        glSubHeadId               VARCHAR2 (10);

        vSchmcode                 VARCHAR2 (20);

        vPointId                  VARCHAR2 (100);

        vRenewCurCode             VARCHAR2 (10);

        vRenewSchmCode            VARCHAR2 (20);

        vDailyTenure              VARCHAR2 (10);

        vMonthlyTenure            VARCHAR2 (10);

        vAutocloseonmaturityflg   VARCHAR2 (1);

        vAutoRenew                VARCHAR2 (1);

        vRepayacctid              VARCHAR2 (20) := NULL;

        vIntcracct                VARCHAR2 (20) := NULL;

        vRenewaloption            VARCHAR2 (20) := NULL;

        vRDailyTenure             VARCHAR2 (10) := NULL;

        vRMonthlyTenure           VARCHAR2 (10) := NULL;

        vFdrGl                    VARCHAR2 (20);

        vAmttype                  VARCHAR2 (1);

        vCollchrgs                VARCHAR2 (1);

        vDelflg                   VARCHAR2 (1);

        vFixedReview              VARCHAR2 (1);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        pErrorFlag := 'N';



        SELECT TO_CHAR (TO_TIMESTAMP (pDpsOpenDate),
                        'YYYY-MM-DD"T"HH24:MI:SS".""0000"'),
               TO_CHAR (TO_TIMESTAMP (pDpsValuedDate),
                        'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
          INTO vDpsOpenDate, vDpsValuedDate
          FROM DUAL;



        BEGIN
            SELECT COUNT (NOMINEE_ID)
              INTO vNomCount
              FROM EMOB.NOMINEE_MST
             WHERE AC_ID = (SELECT ac_id
                              FROM emob.mb_account_mst
                             WHERE ac_no = pAcNo);
        END;



        IF vNomCount = 0
        THEN
            vNomAvailAble := 'N';
        ELSE
            vNomAvailAble := 'Y';
        END IF;



        BEGIN
            SELECT GL_SUB_HEAD_CODE, SHORT_DESC, FIXED_RENEW
              INTO glSubHeadId, vSchmcode, vFixedReview
              FROM emob.MB_PRODUCT_MST
             WHERE TRIM (AC_TYPE_ID) = TRIM (pSchmcode);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Product SubHead not Found or Not Matched.';

                RAISE vMyException;
        END;



        BEGIN
            SELECT finacle_id
              INTO vPointId
              FROM emob.st_agent_point
             WHERE TRIM (point_id) = (SELECT point_id
                                        FROM emob.mb_account_mst
                                       WHERE TRIM (ac_no) = TRIM (pAcNo));
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'A/C Point Not Found.' || SQLERRM;

                RAISE vMyException;
        END;



        IF pTenureType = 'D'
        THEN
            vDailyTenure := pDpsTenure;

            vMonthlyTenure := NULL;
        ELSIF pTenureType = 'M'
        THEN
            vDailyTenure := NULL;

            vMonthlyTenure := pDpsTenure;
        END IF;



        IF pAutoRenew = 'U'
        THEN
            vRenewCurCode := 'BDT';

            vRenewSchmCode := vSchmcode;

            vAutocloseonmaturityflg := 'N';

            vAutoRenew := 'U';

            vRenewaloption := pRenewType;

            vRDailyTenure := vDailyTenure;

            vRMonthlyTenure := vMonthlyTenure;



            IF vFixedReview = 'M'
            THEN
                vIntcracct := NULL;
            ELSE
                vIntcracct := pAcNo;
            END IF;
        ELSE
            vAutocloseonmaturityflg := 'Y';

            vAutoRenew := 'N';

            vRepayacctid := pAcNo;

            vAmttype := 'F';

            vCollchrgs := 'N';

            vDelflg := 'N';



            BEGIN
                SELECT FDR_GL_AC INTO vFdrGl FROM EMOB.MB_GLOBAL_RULE;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    pErrorMsg := 'FDR Gl A/C Not Found.';

                    RAISE vMyException;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'FDR Gl A/C Finding Problem.';

                    RAISE vMyException;
            END;
        END IF;



        FOR i
            IN (SELECT a.AC_TITLE
                           AC_TITLE,
                       a.cust_no,
                       b.cust_code
                           cust_id,
                       a.AC_NATURE,
                       DECODE (a.AC_NATURE, 'C', NULL, 'SELF')
                           mpcode,
                       b.first_name
                           last_name,
                       C.GL_SUB_HEAD_CODE
                           GL_SUB_HEAD_CODE,
                       RM_CODE,
                       D.FINACLE_ID
                  FROM EMOB.MB_ACCOUNT_MST   a,
                       EMOB.MB_CUSTOMER_MST  b,
                       EMOB.MB_PRODUCT_MST   C,
                       EMOB.ST_AGENT_POINT   D
                 WHERE     AC_ID = (SELECT ac_id
                                      FROM emob.mb_account_mst
                                     WHERE ac_no = pAcNo)
                       AND a.cust_no = b.cust_no
                       AND A.AC_TYPE_ID = C.AC_TYPE_ID
                       AND A.POINT_ID = D.POINT_ID)
        LOOP
            /*'||i.FINACLE_ID||'*/



            vCustNo := i.cust_no;

            vAcType := i.AC_NATURE;



            l_envelope1 :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">

    <soapenv:Header/>

    <soapenv:Body>

        <axis:openTermDepositAccount>

            <!--Optional:-->

            <axis:request>

                <xsd:acctcurr>BDT</xsd:acctcurr>

                <xsd:acctrepcode></xsd:acctrepcode>

                <acctprefint></acctprefint>

             <xsd:acctopndt>'
                || vDpsOpenDate
                || '</xsd:acctopndt>

                <xsd:trnvaluedt>'
                || vDpsValuedDate
                || '</xsd:trnvaluedt>

                <xsd:taxcat>W</xsd:taxcat>

                <xsd:acctstmtmode></xsd:acctstmtmode>

                <xsd:acmanagerid>UBSADMIN</xsd:acmanagerid>

                <xsd:agentbankingoutlet>'
                || vPointId
                || '</xsd:agentbankingoutlet>

                <xsd:autocloseonmaturityflg>'
                || vAutocloseonmaturityflg
                || '</xsd:autocloseonmaturityflg>

                <xsd:autorenewalflg>'
                || vAutoRenew
                || '</xsd:autorenewalflg>

                <xsd:ccepcode></xsd:ccepcode>

                <xsd:crcashlim>99999999999999.99</xsd:crcashlim>

                <xsd:crcashlimccy>BDT</xsd:crcashlimccy>

                <xsd:crclrlim>99999999999999.99</xsd:crclrlim>

                <xsd:crclrlimccy>BDT</xsd:crclrlimccy>

                <xsd:crtxlim>99999999999999.99</xsd:crtxlim>

                <xsd:crtxlimccy>BDT</xsd:crtxlimccy>

                <xsd:custid>'
                || pCustCode
                || '</xsd:custid>

                <xsd:debitacctid>'
                || pAcNo
                || '</xsd:debitacctid>

                <xsd:intcracct>'
                || vIntcracct
                || '</xsd:intcracct>

                <xsd:depositcode>'
                || pDepositCode
                || '</xsd:depositcode>

                <xsd:depositterm_days>'
                || vDailyTenure
                || '</xsd:depositterm_days>

                <xsd:depositterm_months>'
                || vMonthlyTenure
                || '</xsd:depositterm_months>

                <xsd:drcashlim>99999999999999.99</xsd:drcashlim>

                <xsd:drcashlimccy>BDT</xsd:drcashlimccy>

                <xsd:drclrlim>99999999999999.99</xsd:drclrlim>

                <xsd:drclrlimccy>BDT</xsd:drclrlimccy>

                <xsd:drtxlim>99999999999999.99</xsd:drtxlim>

                <xsd:drtxlimccy>BDT</xsd:drtxlimccy>

                <xsd:freecode6>'
                || pFreeCode
                || '</xsd:freecode6>

                <xsd:repayacctid>'
                || vRepayacctid
                || '</xsd:repayacctid>

                <xsd:freecode8></xsd:freecode8>

                <xsd:freetext10></xsd:freetext10>

                <xsd:freetext3></xsd:freetext3>

                <genLedgerSubHeadCode>'
                || glSubHeadId
                || '</genLedgerSubHeadCode>

                <xsd:initialdeposit_amountvalue>'
                || pAmountPerInst
                || '</xsd:initialdeposit_amountvalue>

                <xsd:initialdeposit_currencycode>BDT</xsd:initialdeposit_currencycode>

                <xsd:loccalflg>N</xsd:loccalflg>

                <xsd:maxnumofrenewalallwd></xsd:maxnumofrenewalallwd>

                <miscFlag>1</miscFlag>

                <xsd:mopcode></xsd:mopcode>

';
        END LOOP;



        l_envelope2 :=
               '

               <xsd:nomavblflg>Y</xsd:nomavblflg>

               <nomineeContactInfoRequestList>

                    <address1>SAME AS LINK A/C</address1>

                    <address2></address2>

                    <address3>0</address3>

                    <city>ZZZ</city>

                    <country>ZZZ</country>

                    <emailAddr></emailAddr>

                    <guardianAddr1></guardianAddr1>

                    <guardianAddr2></guardianAddr2>

                    <guardianAddr3></guardianAddr3>

                    <guardianAddrType></guardianAddrType>

                    <guardianCity></guardianCity>

                    <guardianCode></guardianCode>

                    <guardianCountry></guardianCountry>

                    <guardianEmailAddr></guardianEmailAddr>

                    <guardianName></guardianName>

                    <guardianPostalCode></guardianPostalCode>

                    <guardianStateProv></guardianStateProv>

                    <guardianTelephoneNum></guardianTelephoneNum>

                    <nomineeBirthDt>1900-01-01T00: 00: 00.000</nomineeBirthDt>

                    <nomineeMinorFlg>N</nomineeMinorFlg>

                    <nomineeName>SAME AS '
            || pAcNo
            || '</nomineeName>

                    <nomineePercent>100.00</nomineePercent>

                    <postalCode>9999</postalCode>

                    <recDelFlg>N</recDelFlg>

                    <regNum>0</regNum>

                    <relType>ZZZ</relType>

                    <stateProv>ZZZ</stateProv>

                </nomineeContactInfoRequestList>

                <xsd:operacctid></xsd:operacctid>';



        --END IF;



        l_envelope3 :=
               '<xsd:pymtTOInstAddList>

                   <xsd:acctcurrency>BDT</xsd:acctcurrency>

                   <xsd:acctid>'
            || vFdrGl
            || '</xsd:acctid>

                   <xsd:amttype>'
            || vAmttype
            || '</xsd:amttype>

                   <xsd:collchrgs>'
            || vCollchrgs
            || '</xsd:collchrgs>

                   <xsd:delflg>'
            || vDelflg
            || '</xsd:delflg>

                   <xsd:pymtamountvalue>'
            || pExciseAmount
            || '</xsd:pymtamountvalue>

                   <xsd:pymtcurrencycode>BDT</xsd:pymtcurrencycode>

                   <xsd:tranparticulars>'
            || pExciseRemarks
            || '</xsd:tranparticulars>

                </xsd:pymtTOInstAddList>';



        l_envelope4 :=
               '<xsd:notes></xsd:notes>

                <xsd:occupationcode>AR</xsd:occupationcode>

                <xsd:password>Cbl#2021@Agent</xsd:password>

                <xsd:renewaloption>'
            || vRenewaloption
            || '</xsd:renewaloption>

                <xsd:renewalterm_days>'
            || vRDailyTenure
            || '</xsd:renewalterm_days>

                <xsd:renewalterm_months>'
            || vRMonthlyTenure
            || '</xsd:renewalterm_months>

                <xsd:renewalCurCode>'
            || vRenewCurCode
            || '</xsd:renewalCurCode>

                <!--Optional:-->

                <xsd:renewalSchmCode>'
            || vRenewSchmCode
            || '</xsd:renewalSchmCode>

                <xsd:rmcode>'
            || pRmCode
            || '</xsd:rmcode>

                <xsd:schmcode>'
            || vSchmcode
            || '</xsd:schmcode>

                <xsd:sectorcode>'
            || pSectorCode
            || '</xsd:sectorcode>

                <xsd:smsalert></xsd:smsalert>

                <xsd:solid>777</xsd:solid>

                <xsd:srcacctid></xsd:srcacctid>

                <xsd:subsectorcode>'
            || pSubsectorcode
            || '</xsd:subsectorcode>

                <xsd:trancremode>V</xsd:trancremode>

                <xsd:trnsubtype>CI</xsd:trnsubtype>

                <xsd:trntype>T</xsd:trntype>

                <xsd:username>cityagentapp</xsd:username>

                <xsd:waiverfield></xsd:waiverfield>

                <xsd:whtaxlvl>A</xsd:whtaxlvl>

                <xsd:wtaxamountscopeflg>P</xsd:wtaxamountscopeflg>

                <xsd:xferind>O</xsd:xferind>

            </axis:request>            

         </axis:openTermDepositAccount>

    </soapenv:Body>

</soapenv:Envelope>';



        IF pAutoRenew = 'U'
        THEN
            l_envelope := l_envelope1 || l_envelope2 || l_envelope4;
        ELSE
            IF pExciseAmount = 0
            THEN
                l_envelope := l_envelope1 || l_envelope2 || l_envelope4;
            ELSE
                l_envelope :=
                    l_envelope1 || l_envelope2 || l_envelope3 || l_envelope4;
            END IF;
        END IF;



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', -- --'/cApps/services/CBLFIWebServices',
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 10 /*,
                     p_wallet_path        => 'file:/u01/wallets',
                     p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'FDOPEN',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'FDOPEN',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => NULL,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        --pResponse := vOutXml1.getClobVal ();

        BEGIN
                 SELECT dpsAc.AC_NO, dpsAc.RES_CODE, dpsAc.RES_MSG
                   INTO pCbsAcNo, vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax233"),
                            '//ns:openTermDepositAccountResponse'
                            PASSING vOutXml1
                            COLUMNS AC_NO       VARCHAR2 (1024) PATH '//ax233:accountNumber',
                                    RES_CODE    VARCHAR2 (1024) PATH '//ax233:responseCode',
                                    RES_MSG     VARCHAR2 (1024) PATH '//ax233:responseMessage')
                        dpsAc;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'FDOPEN',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;

                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF vResCode != '100'
        THEN
            pErrorMsg := 'Error From CBS (C)-' || vResMsg;

            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE SERVICE_DATA_SEND_LWF (pRequestId     IN     NUMBER,
                                     pAcNo          IN     VARCHAR2,
                                     pRequestJson   IN     VARCHAR2,
                                     pToken         IN     VARCHAR2,
                                     pResponse         OUT VARCHAR2,
                                     pErrorFlag        OUT VARCHAR2,
                                     pErrorMsg         OUT VARCHAR2)
    IS
        l_clob         CLOB;

        vFileId        NUMBER;

        vMyException   EXCEPTION;

        vApiStatus     VARCHAR2 (10);

        vApiMessage    VARCHAR2 (1024);

        vApiUrl        VARCHAR2 (1024);
    BEGIN
        --vToken := EMOB.get_token_lwf;

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'LWF_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        apex_web_service.g_request_headers (2).name := 'Authorization';

        apex_web_service.g_request_headers (2).VALUE := 'Bearer ' || pToken;



        BEGIN
            API_XML_LOG (pOprType        => 'SERVICE_DATA_LWF',
                         pRefNo          => NULL,
                         pDrAcNo         => pRequestId,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => pRequestJson,
                         pOutXml         => NULL,
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/citybank/intgr/external/api/maintenance/caseStart/agentCustomer',
                    p_http_method        => 'POST',
                    p_body               => pRequestJson,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/lwf_wallets',
                    p_wallet_pwd         => 'City1234#');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail';

                BEGIN
                    API_XML_LOG (pOprType        => 'SERVICE_DATA_LWF',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => pRequestJson,
                                 pOutXml         => l_clob,
                                 pDbMessage      => SQLERRM,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'SERVICE_DATA_LWF',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => pRequestJson,
                         pOutXml         => l_clob,
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        BEGIN
            IF REGEXP_LIKE (l_clob, '^[[:digit:]]+$')
            THEN
                pResponse := TO_CHAR (l_clob);
            ELSE
                APEX_JSON.parse (l_clob);

                vApiStatus := NVL (APEX_JSON.get_varchar2 ('status'), '000');

                vApiMessage := APEX_JSON.get_varchar2 ('message');



                pErrorMsg := 'For A/C No: (' || pAcNo || ') ,' || vApiMessage;

                RAISE vMyException;
            END IF;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE SERVICE_IMG_SEND_LWF (pRequestId   IN     NUMBER,
                                    pAcNo        IN     VARCHAR2,
                                    pToken       IN     VARCHAR2,
                                    pAppAId      IN     VARCHAR2,
                                    pFileName    IN     VARCHAR2,
                                    pBlob        IN     BLOB,
                                    pErrorFlag      OUT VARCHAR2,
                                    pErrorMsg       OUT VARCHAR2)
    IS
        l_clob                  CLOB;

        vFileId                 NUMBER;

        vMyException            EXCEPTION;

        l_attachment            BLOB;

        l_mime_type             VARCHAR2 (255);

        p_request_body          CLOB;

        l_newline               VARCHAR2 (50) := CHR (13) || CHR (10);

        lco_boundary   CONSTANT VARCHAR2 (30) := 'AaB03x';

        l_start                 TIMESTAMP;

        vDataFormat             VARCHAR2 (1024);

        vFileType               VARCHAR2 (1024);

        vErr                    VARCHAR2 (1024);

        vApiUrl                 VARCHAR2 (1024);
    BEGIN
        --vToken := EMOB.get_token_lwf;

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'LWF_URL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT SUBSTR (pFileName, INSTR (pFileName, '.') + 1)
          INTO vFileType
          FROM DUAL;



        IF vFileType = 'pdf'
        THEN
            vDataFormat := 'data:application/pdf;base64,';
        ELSE
            vDataFormat := 'data:image/jpeg;base64,';
        END IF;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE :=
            'multipart/form-data; boundary=AaB03x';

        apex_web_service.g_request_headers (2).name := 'Authorization';

        apex_web_service.g_request_headers (2).VALUE := 'Bearer ' || pToken;

        p_request_body :=
               l_newline
            || '--'
            || lco_boundary
            || l_newline
            || 'Content-Disposition: form-data; name="file"; filename="'
            || pFileName
            || '"'
            || l_newline
            || 'Content-Type: '
            || l_mime_type
            || l_newline
            || 'Content-Transfer-Encoding: binary'
            || l_newline
            ||                                                              --
               l_newline
            || vDataFormat
            || apex_web_service.blob2clobbase64 (pBlob)
            || l_newline
            || '--'
            || lco_boundary
            || '--';

        l_start := SYSTIMESTAMP;



        BEGIN
            API_XML_LOG (pOprType        => 'SERVICE_IMG_LWF',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => p_request_body,
                         pOutXml         => NULL,
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        BEGIN
            l_clob :=
                apex_web_service.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/citybank/intgr/external/api/fileUpload?appId='
                        || pAppAId
                        || '&remarks=test',
                    p_http_method        => 'POST',
                    p_body               => p_request_body,
                    p_body_blob          => l_attachment,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/lwf_wallets',
                    p_wallet_pwd         => 'City1234#');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'SERVICE_IMG_LWF',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => p_request_body,
                                 pOutXml         => NULL,
                                 pDbMessage      => SQLERRM,
                                 pErrorMessage   => pErrorMsg,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'SERVICE_IMG_LWF',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => p_request_body,
                         pOutXml         => TO_CHAR (l_clob),
                         pDbMessage      => SQLERRM,
                         pErrorMessage   => pErrorMsg,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE GET_INTEREST_RATE (pAmount       IN     NUMBER,
                                 pTenorType    IN     VARCHAR2,
                                 pTenor        IN     NUMBER,
                                 pScameCode    IN     VARCHAR2,
                                 pProductFor   IN     VARCHAR2 DEFAULT NULL,
                                 pRate            OUT VARCHAR2,
                                 pErrorFlag       OUT VARCHAR2,
                                 pErrorMsg        OUT VARCHAR2)
    IS
        l_envelope       CLOB;

        vOutXml1         XMLTYPE;

        vApiUrl          VARCHAR2 (1024);

        pOracleMessage   VARCHAR2 (1024);

        vFileId          NUMBER := 0;

        vMyException     EXCEPTION;

        vResCode         NUMBER;

        vResMsg          VARCHAR2 (1024);
    BEGIN
        IF NVL (pProductFor, 'C') = 'C'
        THEN
            SELECT PATH_DIR
              INTO vApiUrl
              FROM GUMS.MB_GLOBAL_PATH
             WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';



            vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

            pErrorFlag := 'N';
            l_envelope :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://city/xsd">

   <soapenv:Header/>

   <soapenv:Body>

      <axis:getInterestRateBySchemeCode>

         <!--Optional:-->

         <axis:request>

            <!--Optional:-->

            <xsd:amount>'
                || pAmount
                || '</xsd:amount>

            <!--Optional:-->

            <xsd:currencyCode>BDT</xsd:currencyCode>

            <!--Optional:-->

            <xsd:password>Cbl#2021@Agent</xsd:password>

            <!--Optional:-->

            <xsd:schemeCode>'
                || pScameCode
                || '</xsd:schemeCode>

            <!--Optional:-->

            <xsd:tenor>'
                || pTenor
                || '</xsd:tenor>

            <!--Optional:-->

            <xsd:tenorType>'
                || pTenorType
                || '</xsd:tenorType>

            <!--Optional:-->

            <xsd:username>cityagentapp</xsd:username>

         </axis:request>

      </axis:getInterestRateBySchemeCode>

   </soapenv:Body>

</soapenv:Envelope>';



            BEGIN
                vOutXml1 :=
                    APEX_WEB_SERVICE.make_request (
                        p_url                => vApiUrl || '/CBLFIWebServices', -- --'/cApps/services/CBLFIWebServices',
                        p_action             => vApiUrl || '/CBLFIWebServices?wsdl', --'/cApps/services/CBLFIWebServices?wsdl',
                        p_envelope           => l_envelope,
                        p_transfer_timeout   => 10 /*,
                         p_wallet_path        => 'file:/u01/wallets',
                         p_wallet_pwd         => 'citybank123'*/
                                                  );
            EXCEPTION
                WHEN OTHERS
                THEN
                    pOracleMessage := SQLERRM;

                    pErrorMsg := 'API Request Fail';



                    BEGIN
                        API_XML_LOG (pOprType        => 'INTEREST_RATE',
                                     pRefNo          => NULL,
                                     pDrAcNo         => NULL,
                                     pCrAcNo         => NULL,
                                     pFileId         => vFileId,
                                     pInXMl          => l_envelope,
                                     pOutXml         => NULL,
                                     pDbMessage      => pOracleMessage,
                                     pErrorMessage   => pErrorMsg,
                                     pNotifyFlag     => pErrorFlag,
                                     pNotifyMsg      => pErrorMsg);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            pOracleMessage := SQLERRM;
                            pErrorMsg := 'LOG process Calling Problem';
                            RAISE vMyException;
                    END;

                    RAISE vMyException;
            END;

            BEGIN
                API_XML_LOG (pOprType        => 'INTEREST_RATE',
                             pRefNo          => NULL,
                             pDrAcNo         => NULL,
                             pCrAcNo         => NULL,
                             pFileId         => vFileId,
                             pInXMl          => l_envelope,
                             pOutXml         => vOutXml1.getClobVal (),
                             pDbMessage      => NULL,
                             pErrorMessage   => pErrorMsg,
                             pNotifyFlag     => pErrorFlag,
                             pNotifyMsg      => pErrorMsg);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := 'LOG process Calling Problem';
                    RAISE vMyException;
            END;



            BEGIN
                    SELECT DpsRate.RATE, DpsRate.RESCODE, DpsRate.RES_MSG
                      INTO pRate, vResCode, vResMsg
                      FROM XMLTABLE (
                               XMLNAMESPACES (
                                   'http://ws.apache.org/axis2' AS "ns",
                                   'http://card/xsd' AS "ax2117"),
                               '//ns:getInterestRateBySchemeCodeResponse'
                               PASSING vOutXml1
                               COLUMNS RATE       VARCHAR2 (1024) PATH '//ax2117:rate',
                                       RESCODE    VARCHAR2 (1024) PATH '//ax2117:responseCode',
                                       RES_MSG    VARCHAR2 (1024) PATH '//ax2117:responseMessage')
                           DpsRate;
            END;



            IF vResCode != 100
            THEN
                pErrorMsg := 'Error From CBS (C)- ' || vResMsg;

                RAISE vMyException;
            END IF;
        -----End for Conventional below api for Islamic--
        ELSE
            BEGIN
                EMOB.GLOBAL_CBS_ALL_API.IW_PROD_RATIO_INQUIRY (
                    productId      => pScameCode,
                    pClientRatio   => pRate,
                    pErrorFlag     => pErrorFlag,
                    pErrorMsg      => pErrorMsg);
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg :=
                        'Balance Inquiry API Calling Problem.-' || SQLERRM;
                    RAISE vMyException;
            END;

            IF NVL (pErrorFlag, 'N') = 'Y'
            THEN
                pErrorMsg := pErrorMsg;
                RAISE vMyException;
            END IF;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;

    ------Conventional End and Islamic Start From Below-----


    PROCEDURE IW_CIF_CREATION_API (pCustNo          VARCHAR2,
                                   pLogId           VARCHAR2,
                                   pAppUser         VARCHAR2,
                                   pResCode     OUT VARCHAR2,
                                   pCustId      OUT VARCHAR2,
                                   pErrorFlag   OUT VARCHAR2,
                                   pErrorMsg    OUT VARCHAR2)
    IS
        vIssueDateId              NUMBER;
        vExpiryDateId             NUMBER;
        vIssuePlaceId             NUMBER;
        vFileId                   NUMBER;
        vApiUrl                   VARCHAR2 (1024);
        l_Age                     NUMBER;
        vMyException              EXCEPTION;
        pOracleMessage            VARCHAR2 (1024);
        l_json                    CLOB;
        l_permanentAddress        CLOB;
        l_presentAddress          CLOB;
        l_documents_obj           JSON_OBJECT_T;
        l_documents_arr           JSON_ARRAY_T;
        l_alternateMobileNumber   VARCHAR2 (11);
        l_birthPlaceId            NUMBER;
        l_email                   VARCHAR2 (100);
        l_fathersLastName         VARCHAR2 (100);
        l_firstName               VARCHAR2 (100);
        l_gender                  VARCHAR2 (10);
        l_lastName                VARCHAR2 (100);
        vErrorMsg                 VARCHAR2 (1024);
        l_maritalStatus           VARCHAR2 (10);
        l_mobileNumber            VARCHAR2 (11);
        l_mothersLastName         VARCHAR2 (100);
        l_dateOfBirth             VARCHAR2 (1024);
        l_spouseName              VARCHAR2 (100);
        l_custType                VARCHAR2 (10);
        l_referenceNumber         VARCHAR2 (1024);
        l_ageClassification       VARCHAR2 (10);
        l_title                   VARCHAR2 (20);
        l_clob                    CLOB;
        l_source_fnd              VARCHAR2 (1024);
        l_source_income           NUMBER;
        l_monthly_income          NUMBER;
        vNIDVerfed                VARCHAR2 (100);
        vOccupation               VARCHAR2 (100);
        vOccupationId             VARCHAR2 (100);
        vSectorCode               VARCHAR2 (100);
        vClobDocJson              CLOB;
        vClobDocJsonArray         CLOB;
        vOther                    CLOB;
        vLoopCount                NUMBER := 1;
        vConcat                   VARCHAR2 (10);
        vDocCount                 NUMBER;
        v_rescode                 VARCHAR2 (10);
        v_resmsg                  VARCHAR2 (1024);
        l_status                  VARCHAR2 (1024);
        l_religion                NUMBER;
        l_resident                VARCHAR2 (50);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;


        pErrorFlag := 'N';



        FOR I
            IN (SELECT a.ADDRESS_TYPE      ADDRESS_TYPE,
                       a.ADD_LINE1         L1,
                       a.ADD_LINE2         L2,
                       a.POSTAL_CODE       PC,
                       c.IW_SHORT_CODE     CITY_CO,
                       d.IW_SHORT_CODE     STATE_CO,
                       e.SHORT_CODE        UPA
                  FROM EMOB.MB_ADDRESS_MST   a,
                       EMOB.ST_ADDRESS_TYPE  b,
                       emob.MB_CITY_INFO     c,
                       emob.MB_STATE_INFO    d,
                       EMOB.IW_UPAZILA       e
                 WHERE     ref_no = pCustNo
                       AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                       AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                       AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                       AND a.UPAZILA_CODE = e.ID
                       AND c.STATE_IW_ID = d.IW_ID
                       AND c.IW_ID = e.DISTRICT_ID)
        LOOP
            IF I.ADDRESS_TYPE = 'PER'
            THEN
                l_permanentAddress :=
                       '{

            "addressLine": "'
                    || I.L1
                    || '",

            "addressLineTwo": "'
                    || I.L2
                    || '",

            "countryCode": "BD",

            "district": "'
                    || I.CITY_CO
                    || '",

            "division": "'
                    || I.STATE_CO
                    || '",

            "postCode": "'
                    || I.PC
                    || '",

            "upazilla": "'
                    || I.UPA
                    || '"

        }';
            END IF;



            IF I.ADDRESS_TYPE = 'PRS'
            THEN
                l_presentAddress :=
                       '{

            "addressLine": "'
                    || I.L1
                    || '",

            "addressLineTwo": "'
                    || I.L2
                    || '",

            "countryCode": "BD",

            "district": "'
                    || I.CITY_CO
                    || '",

            "division": "'
                    || I.STATE_CO
                    || '",

            "postCode": "'
                    || I.PC
                    || '",

            "upazilla": "'
                    || I.UPA
                    || '"

            }';
            END IF;
        END LOOP;



        l_documents_arr := NEW JSON_ARRAY_T;


        SELECT COUNT (A.DOCMENT_NO)
          INTO vDocCount
          FROM EMOB.MB_DOCUMENT_MST          A,
               EMOB.ST_DOCUMENT_TYPE         B,
               emob.IW_ST_DOC_PROPERTY_TYPE  C
         WHERE     UPPER (A.DOCUMENT_TYPE) = UPPER (B.DOC_TYPE)
               AND B.IW_DOC_TYPE_ID = C.DOCUMENT_TYPE_ID
               AND NVL (C.DOC_NO, 'N') = 'Y'
               AND CUST_NO = pCustNo;

        FOR J
            IN (SELECT A.DOCMENT_NO                             AS DOC_NO,
                       TO_CHAR (A.ISSUE_DATE, 'YYYY-MM-DD')     ISSUE_DATE,
                       TO_CHAR (A.EXPIRE_DATE, 'YYYY-MM-DD')    EXPIRE_DATE,
                       (SELECT CITY_NAME
                          FROM EMOB.MB_CITY_INFO
                         WHERE CITY_CODE = A.ISSUE_PLACE)       ISSUE_PLACE,
                       CASE
                           WHEN     B.IW_DOC_TYPE_ID = 4
                                AND LENGTH (A.DOCMENT_NO) = 10
                           THEN
                               37
                           ELSE
                               B.IW_DOC_TYPE_ID
                       END                                      DOC_TYPE_ID,
                       CASE
                           WHEN     B.IW_DOC_TYPE_ID = 4
                                AND LENGTH (A.DOCMENT_NO) = 10
                           THEN
                               54
                           ELSE
                               C.ID
                       END                                      AS ID
                  FROM MB_DOCUMENT_MST               A,
                       ST_DOCUMENT_TYPE              B,
                       emob.IW_ST_DOC_PROPERTY_TYPE  C
                 WHERE     UPPER (A.DOCUMENT_TYPE) = UPPER (B.DOC_TYPE)
                       AND B.IW_DOC_TYPE_ID = C.DOCUMENT_TYPE_ID
                       AND NVL (C.DOC_NO, 'N') = 'Y'
                       AND CUST_NO = pCustNo)
        LOOP
            IF J.DOC_TYPE_ID IN (4, 37)
            THEN
                vNIDVerfed := 'YES';
            END IF;

            vIssueDateId := NULL;
            vExpiryDateId := NULL;
            vIssuePlaceId := NULL;

            BEGIN
                SELECT ID
                  INTO vIssueDateId
                  FROM EMOB.IW_ST_DOC_PROPERTY_TYPE
                 WHERE     DOCUMENT_TYPE_ID = J.DOC_TYPE_ID
                       AND PROPERTY_LABEL IN
                               ('ISSUE DATE',
                                'NID ISSUE DATE',
                                'TRADE LICENSE ISSUE DATE');
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Issue Date Finding Problem.';
                    RAISE vMyException;
            END;

            BEGIN
                SELECT ID
                  INTO vExpiryDateId
                  FROM EMOB.IW_ST_DOC_PROPERTY_TYPE
                 WHERE     DOCUMENT_TYPE_ID = J.DOC_TYPE_ID
                       AND PROPERTY_LABEL = 'EXPIRY DATE';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Expiry Date Finding Problem.';
                    RAISE vMyException;
            END;

            BEGIN
                SELECT ID
                  INTO vIssuePlaceId
                  FROM EMOB.IW_ST_DOC_PROPERTY_TYPE
                 WHERE     DOCUMENT_TYPE_ID = J.DOC_TYPE_ID
                       AND PROPERTY_LABEL = 'ISSUE PLACE';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Issue Place Finding Problem.';
                    RAISE vMyException;
            END;


            vOther := NULL;

            IF vIssueDateId IS NOT NULL
            THEN
                vOther :=
                       ',{"documentPropertyTypeId": '
                    || vIssueDateId
                    || ',

                            "propertyValue": "'
                    || J.ISSUE_DATE
                    || '"

                          }';
            END IF;

            IF vExpiryDateId IS NOT NULL
            THEN
                vOther :=
                       vOther
                    || ',{"documentPropertyTypeId": '
                    || vExpiryDateId
                    || ',

                            "propertyValue": "'
                    || J.EXPIRE_DATE
                    || '"

                          }';
            END IF;

            IF vIssuePlaceId IS NOT NULL
            THEN
                vOther :=
                       vOther
                    || ',{"documentPropertyTypeId": '
                    || vIssuePlaceId
                    || ',

                            "propertyValue": "'
                    || J.ISSUE_PLACE
                    || '"

                          }';
            END IF;

            vConcat := NULL;

            IF vDocCount = 1
            THEN
                vConcat := NULL;
            ELSIF vDocCount > 1 AND vDocCount != vLoopCount
            THEN
                vConcat := ',';
            END IF;

            /*  l_documents_obj :=
                  JSON_OBJECT_T.parse (*/
            vClobDocJson :=
                   '{
                        "documentTypeId": '
                || J.DOC_TYPE_ID
                || ',

                        "files": [
                          {
                            "id": "9dfda045-ecc0-4f17-9820-db8d48555bb4",
                            "type": "JPG"
                          }
                        ],

                        "properties": [
                          {
                            "documentPropertyTypeId": '
                || J.ID
                || ',
                            "propertyValue": "'
                || J.DOC_NO
                || '"}'
                || vOther
                || '],

                        "verificationDetails": "ok",

                        "verified": true
                    }'
                || vConcat;

            vClobDocJsonArray := vClobDocJsonArray || vClobDocJson;
            vLoopCount := vLoopCount + 1;

            l_documents_arr.append (l_documents_obj);
        END LOOP;

        BEGIN
            SELECT FIRST_NAME
                       nme2,
                   LAST_NAME
                       nme,
                   FATHER_NAME,
                   MOTHER_NAME,
                   TO_CHAR (CUST_DOB, 'YYYY-MM-DD')
                       CUST_DOB,
                   DECODE (GENDER, 'M', 'MALE', 'FEMALE'),
                   DECODE (MARITUAL_STATUS,
                           'SINGL', 'UNMARRIED',
                           'MARID', 'MARRIED',
                           'MAR', 'MARRIED',
                           'SNG', 'UNMARRIED'),
                   SPOUSE_NAME,
                   MOBILE_NO,
                   NVL (MOBILE_NO2, 'N/A'),
                   MAIL_ID,
                   DECODE (AGN_TYPE, 'PRS', 'IND', AGN_TYPE),
                   TRUNC (
                         MONTHS_BETWEEN (
                             TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                             TO_DATE (TO_CHAR (CUST_DOB, 'DD/MM/YYYY'),
                                      'DD/MM/RRRR'))
                       / 12),
                   (SELECT IW_ID
                      FROM EMOB.MB_CITY_INFO
                     WHERE UPPER (CITY_CODE) = UPPER (A.CITY)),
                   CUST_TITTLE,
                   ---  SECTOR_CODE,
                   (SELECT CODDES
                      FROM EMOB.STCODMAS
                     WHERE     HARCOD = 'OCC'
                           AND SOFCOD = OCCUPATION_CODE
                           AND ACTFLG = 'Y')
                       OCCUPATON,
                   (SELECT SECCOD
                      FROM EMOB.STCODMAS
                     WHERE     HARCOD = 'OCC'
                           AND SOFCOD = OCCUPATION_CODE
                           AND ACTFLG = 'Y')
                       OCCUPATON_ID,
                   SC_FUND,
                   SOURCE_ID,
                   NVL (MONTHLY_INCOME, 0),
                   REF_NO_IW,
                   DECODE (RELIGIOUS_CODE,
                           'MUS', 1,
                           'HIN', 2,
                           'CHR', 3,
                           'BUD', 4,
                           'OTH', 5,
                           6),
                   DECODE (RESIDENT,  'R', 'RESIDENT',  'N', 'NON-RESIDENT'),
                   (SELECT SECTOR_CODE
                      FROM EMOB.ST_SECTOR_CODE
                     WHERE SRLNO = SECTOR_CODE)
                       SECTOR_CODE
              INTO l_firstName,
                   l_lastName,
                   l_fathersLastName,
                   l_mothersLastName,
                   l_dateOfBirth,
                   l_gender,
                   l_maritalStatus,
                   l_spouseName,
                   l_mobileNumber,
                   l_alternateMobileNumber,
                   l_email,
                   l_custType,
                   l_Age,
                   l_birthPlaceId,
                   l_title,
                   ---  l_sectorCode,
                   vOccupation,
                   vOccupationId,
                   l_source_fnd,
                   l_source_income,
                   l_monthly_income,
                   l_referenceNumber,
                   l_religion,
                   l_resident,
                   vSectorCode
              FROM emob.mb_customer_mst A
             WHERE cust_no = pCustNo;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Customer Info. finding Problem';
                RAISE vMyException;
        END;

        IF l_Age >= 60
        THEN
            l_ageClassification := 'SENIOR';
        ELSIF l_Age >= 18 AND l_Age < 60
        THEN
            l_ageClassification := 'MAJOR';
        ELSE
            l_ageClassification := 'MINOR';
        END IF;



        l_json :=
               '{

    "additionalField1": "N/A",

    "additionalField2": "N/A",

    "additionalField3": "N/A",

    "additionalField4": "N/A",

    "additionalField5": "N/A",

    "channelCode": "AB",

    "clientAddress": "N/A",

    "customerBranchId": 777,

    "customerClassId": 3,

    "referenceNumber": "'
            || l_referenceNumber
            || '",

    "requestId": "'
            || l_referenceNumber
            || '",

    "individual": {

        "additionalField1": "N/A",

        "additionalField2": "N/A",

        "additionalField3": "N/A",

        "additionalField4": "N/A",

        "additionalField5": "N/A",

        "ageClassification": "'
            || l_ageClassification
            || '",

        "alternateMobileNumber": "'
            || l_alternateMobileNumber
            || '",

        "bankId": 0,

        "birthCountryId": 19,

        "birthPlaceId": '
            || l_birthPlaceId
            || ',

        "classificationId": 0,

        "countryCode": "88",

        "countryCodeForAlterMobile": "88",

        "creditCardNumber": "N/A",

        "creditCardType": "N/A",

        "dateOfBirth": "'
            || l_dateOfBirth
            || '",

        "documents":[

        '
            || vClobDocJsonArray                  ---l_documents_arr.to_string
            || '],

        "email": "'
            || l_email
            || '",

        "email2": "N/A",

        "fathersFirstName": "",

        "fathersLastName": "'
            || l_fathersLastName
            || '",

        "fathersMiddleName": "",

        "firstName": "'
            || l_firstName
            || '",

        "foreignAccountTaxComplianceActId": 0,

        "foreignAddress": "",

        "foreignBirthPlace": "",

        "foreignCity": "",

        "foreignPostOffice": "",

        "foreignState": "",

        "gender": "'
            || l_gender
            || '",

        "guardianId": "N/A",

        "lastName": "'
            || l_lastName
            || '",

        "mailingAddress": "PRESENT_ADDRESS",

        "maritalStatus": "'
            || l_maritalStatus
            || '",

        "middleName": "",

        "mobileNumber": "'
            || l_mobileNumber
            || '",

        "monthlyIncome": '
            || l_monthly_income
            || ',

        "mothersFirstName": "",

        "mothersLastName": "'
            || l_mothersLastName
            || '",

        "mothersMiddleName": "",

        "nationality": "Bangladeshi",

        "passportNumber": "",

        "permanentAddress":'
            || l_permanentAddress
            || ',

        "phoneNumber": "",

        "presentAddress":'
            || l_presentAddress
            || ',

        "professionalAddress": {

			"addressLine": "",

			"addressLineTwo": "",

			"countryCode": "",

			"district": "",

			"division": "",

			"postCode": "",

			"upazilla": ""

		},

        "relationWithGuardian": "N/A",

        "religionId": '
            || l_religion
            || ',

        "residenceStatus": "'
            || l_resident
            || '",

        "sourceOfFunds": [

            {

                "description": "'
            || l_source_fnd
            || '",

                "sourceId": '
            || l_source_income
            || '

            }

        ],

        "spouseName": "'
            || l_spouseName
            || '",

        "title": "'
            || l_title
            || '",

        "visaType": "",

        "visaValidity": ""

    },
   "occupations": [
    {
      "description": "'
            || vOccupation
            || '",
      "id": 0,
      "individualId": 0,
      "occupationTypeId": '
            || vOccupationId
            || '
    }
  ],
    "password": "Cbl$4321",

    "sectorCode": "'
            || vSectorCode
            || '",

    "shortName": "",

    "userName": "islamic_agentapp",
    "varifiedNIDReceived": "'
            || vNIDVerfed
            || '"
}';



        BEGIN
            API_XML_LOG (pOprType        => 'IW_CIF_CREATION',
                         pRefNo          => l_mobileNumber,
                         pDrAcNo         => pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/AgentBanking/CustomerCreation',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 30,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CIF_CREATION',
                                 pRefNo          => l_mobileNumber,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_CIF_CREATION',
                         pRefNo          => l_mobileNumber,
                         pDrAcNo         => pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CIF_CREATION',
                                 pRefNo          => l_mobileNumber,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => l_status,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API:' || v_resmsg;

            RAISE vMyException;
        ELSE
            pResCode := v_rescode;

            pCustId := APEX_JSON.get_varchar2 ('customerId');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_CIF_CREATION_API_JNT (pCustNo          VARCHAR2,
                                       pLogId           VARCHAR2,
                                       pAppUser         VARCHAR2,
                                       pResCode     OUT VARCHAR2,
                                       pCustId      OUT VARCHAR2,
                                       pErrorFlag   OUT VARCHAR2,
                                       pErrorMsg    OUT VARCHAR2)
    IS
        vFileId                   NUMBER;

        vApiUrl                   VARCHAR2 (1024);

        vCustCat                  VARCHAR2 (100);

        vMyException              EXCEPTION;

        pOracleMessage            VARCHAR2 (1024);

        l_request                 CLOB;

        l_permanentAddress        CLOB;

        l_presentAddress          CLOB;

        l_documents_obj           JSON_OBJECT_T;

        l_documents_obj1          JSON_OBJECT_T;

        l_documents_arr           JSON_ARRAY_T;

        l_applicants_arr          JSON_ARRAY_T;

        l_alternateMobileNumber   VARCHAR2 (11);

        l_birthPlaceId            NUMBER;

        l_email                   VARCHAR2 (100);

        l_fathersLastName         VARCHAR2 (100);

        l_firstName               VARCHAR2 (100);

        jl_firstName              VARCHAR2 (100);

        l_gender                  VARCHAR2 (10);

        l_lastName                VARCHAR2 (100);

        l_maritalStatus           VARCHAR2 (10);

        l_mobileNumber            VARCHAR2 (11);

        l_mothersLastName         VARCHAR2 (100);

        l_dateOfBirth             VARCHAR2 (1024);

        l_spouseName              VARCHAR2 (100);

        l_custType                VARCHAR2 (10);

        l_referenceNumber         VARCHAR2 (1024);
        l_ageClassification       VARCHAR2 (10);
        l_title                   VARCHAR2 (20);
        l_clob                    CLOB;
        l_sectorCode              VARCHAR2 (10);
        jl_sectorCode             VARCHAR2 (10);
        l_source_fnd              VARCHAR2 (1024);
        l_source_income           NUMBER;
        l_count                   NUMBER := 0;
        l_monthly_income          NUMBER;
        v_rescode                 VARCHAR2 (10);
        v_resmsg                  VARCHAR2 (1024);
        l_religion                NUMBER;
        l_resident                VARCHAR2 (50);
        vErrorMsg                 VARCHAR2 (1024);
        l_status                  VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        pErrorFlag := 'N';



        l_documents_arr := NEW JSON_ARRAY_T;

        l_applicants_arr := NEW JSON_ARRAY_T;



        FOR K IN (  SELECT GURDIAN_CUST_NO
                      FROM EMOB.MB_CUSTOMER_GURDIAN_INFO
                     WHERE CUST_NO = pCustNo
                  ORDER BY SUBSTR (REL_TYPE, 1, 1) ASC)
        LOOP
            FOR I
                IN (SELECT a.ADDRESS_TYPE      ADDRESS_TYPE,
                           a.ADD_LINE1         L1,
                           a.ADD_LINE2         L2,
                           a.POSTAL_CODE       PC,
                           c.IW_SHORT_CODE     CITY_CO,
                           d.IW_SHORT_CODE     STATE_CO,
                           e.SHORT_CODE        UPA
                      FROM EMOB.MB_ADDRESS_MST   a,
                           EMOB.ST_ADDRESS_TYPE  b,
                           emob.MB_CITY_INFO     c,
                           emob.MB_STATE_INFO    d,
                           EMOB.IW_UPAZILA       e
                     WHERE     ref_no = pCustNo
                           AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                           AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                           AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                           AND a.UPAZILA_CODE = e.ID
                           AND c.STATE_IW_ID = d.IW_ID
                           AND c.IW_ID = e.DISTRICT_ID)
            LOOP
                IF I.ADDRESS_TYPE = 'PER'
                THEN
                    l_permanentAddress :=
                           '{

            "addressLine": "'
                        || I.L1
                        || '",

            "addressLineTwo": "'
                        || I.L2
                        || '",

            "countryCode": "BD",

            "district": "'
                        || I.CITY_CO
                        || '",

            "division": "'
                        || I.STATE_CO
                        || '",

            "postCode": "'
                        || I.PC
                        || '",

            "upazilla": "'
                        || I.UPA
                        || '"

            }';
                END IF;



                IF I.ADDRESS_TYPE = 'PRS'
                THEN
                    l_presentAddress :=
                           '{

            "addressLine": "'
                        || I.L1
                        || '",

            "addressLineTwo": "'
                        || I.L2
                        || '",

            "countryCode": "BD",

            "district": "'
                        || I.CITY_CO
                        || '",

            "division": "'
                        || I.STATE_CO
                        || '",

            "postCode": "'
                        || I.PC
                        || '",

            "upazilla": "'
                        || I.UPA
                        || '"

            }';
                END IF;
            END LOOP;



            FOR J
                IN (SELECT A.DOCMENT_NO    AS DOC_NO,
                           --B.IW_DOC_TYPE_ID,     AS DOC_TYPE_ID,

                           CASE
                               WHEN     B.IW_DOC_TYPE_ID = 4
                                    AND LENGTH (A.DOCMENT_NO) = 10
                               THEN
                                   37
                               ELSE
                                   B.IW_DOC_TYPE_ID
                           END             DOC_TYPE_ID,
                           CASE
                               WHEN     B.IW_DOC_TYPE_ID = 4
                                    AND LENGTH (A.DOCMENT_NO) = 10
                               THEN
                                   54
                               ELSE
                                   C.ID
                           END             AS ID
                      FROM MB_DOCUMENT_MST               A,
                           ST_DOCUMENT_TYPE              B,
                           emob.IW_ST_DOC_PROPERTY_TYPE  C
                     WHERE     UPPER (A.DOCUMENT_TYPE) = UPPER (B.DOC_TYPE)
                           AND B.IW_DOC_TYPE_ID = C.DOCUMENT_TYPE_ID
                           AND NVL (C.DOC_NO, 'N') = 'Y'
                           AND CUST_NO = K.GURDIAN_CUST_NO)
            LOOP
                l_documents_obj :=
                    JSON_OBJECT_T.parse (
                           '{

                        "documentTypeId": '
                        || J.DOC_TYPE_ID
                        || ',

                        "files": [

                          {

                            "id": "9dfda045-ecc0-4f17-9820-db8d48555bb4",

                            "type": "JPG"

                          }

                        ],

                        "properties": [

                          {

                            "documentPropertyTypeId": '
                        || J.ID
                        || ',

                            "propertyValue": "'
                        || J.DOC_NO
                        || '"

                          }

                        ],

                        "verificationDetails": "ok",

                        "verified": true

                    

                    }');



                l_documents_arr.append (l_documents_obj);
            END LOOP;



            BEGIN
                SELECT FIRST_NAME
                           nme2,
                       LAST_NAME
                           nme,
                       FATHER_NAME,
                       MOTHER_NAME,
                       TO_CHAR (CUST_DOB, 'YYYY-MM-DD')
                           CUST_DOB,
                       DECODE (GENDER, 'M', 'MALE', 'FEMALE'),
                       DECODE (MARITUAL_STATUS,
                               'SINGL', 'UNMARRIED',
                               'MARID', 'MARRIED',
                               'MAR', 'MARRIED',
                               'SNG', 'UNMARRIED'),
                       SPOUSE_NAME,
                       MOBILE_NO,
                       MOBILE_NO2,
                       MAIL_ID,
                       DECODE (AGN_TYPE, 'PRS', 'IND', 'JNT'),
                       AGN_TYPE,
                       NVL ((SELECT IW_ID
                               FROM EMOB.MB_CITY_INFO
                              WHERE UPPER (CITY_CODE) = UPPER (A.CITY)),
                            0),
                       CUST_TITTLE,
                       (SELECT SECTOR_CODE
                          FROM EMOB.ST_SECTOR_CODE
                         WHERE SRLNO = SECTOR_CODE)
                           SECTOR_CODE,
                       SC_FUND,
                       NVL (SOURCE_ID, 0),
                       NVL (MONTHLY_INCOME, 0),
                       DECODE (RELIGIOUS_CODE,
                               'MUS', 1,
                               'HIN', 2,
                               'CHR', 3,
                               'BUD', 4,
                               'OTH', 5,
                               6),
                       DECODE (RESIDENT,
                               'R', 'RESIDENT',
                               'N', 'NON-RESIDENT')
                  INTO l_firstName,
                       l_lastName,
                       l_fathersLastName,
                       l_mothersLastName,
                       l_dateOfBirth,
                       l_gender,
                       l_maritalStatus,
                       l_spouseName,
                       l_mobileNumber,
                       l_alternateMobileNumber,
                       l_email,
                       l_custType,
                       vCustCat,
                       l_birthPlaceId,
                       l_title,
                       l_sectorCode,
                       l_source_fnd,
                       l_source_income,
                       l_monthly_income,
                       l_religion,
                       l_resident
                  FROM emob.mb_customer_mst A
                 WHERE cust_no = K.GURDIAN_CUST_NO;
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Customer Info. finding Problem';

                    RAISE vMyException;
            END;



            IF vCustCat = 'INM'
            THEN
                l_ageClassification := 'MINOR';
            ELSE
                l_ageClassification := 'MAJOR';
            END IF;

            l_count := l_count + 1;

            l_documents_obj1 :=
                JSON_OBJECT_T.parse (
                       '{ "applicantTypeId":'
                    || l_count
                    || ',

                              "individual":{

                                    "additionalField1": "",

                                    "additionalField2": "",

                                    "additionalField3": "",

                                    "additionalField4": "",

                                    "additionalField5": "",

                                    "ageClassification": "'
                    || l_ageClassification
                    || '",

                                    "alternateMobileNumber": "'
                    || l_alternateMobileNumber
                    || '",

                                    "bankId": 0,

                                    "birthCountryId": 19,

                                    "birthPlaceId": '
                    || l_birthPlaceId
                    || ',

                                    "classificationId": 0,

                                    "countryCode": "88",

                                    "countryCodeForAlterMobile": "88",

                                    "creditCardNumber": "N/A",

                                    "creditCardType": "N/A",

                                    "dateOfBirth": "'
                    || l_dateOfBirth
                    || '",

                                    "documents":'
                    || l_documents_arr.to_string
                    || ',

                                    "email": "'
                    || l_email
                    || '",

                                    "email2": "N/A",

                                    "fathersFirstName": "",

                                    "fathersLastName": "'
                    || l_fathersLastName
                    || '",

                                    "fathersMiddleName": "",

                                    "firstName": "'
                    || l_firstName
                    || '",

                                    "foreignAccountTaxComplianceActId": 0,

                                    "foreignAddress": "",

                                    "foreignBirthPlace": "",

                                    "foreignCity": "",

                                    "foreignPostOffice": "",

                                    "foreignState": "",

                                    "gender": "'
                    || l_gender
                    || '",

                                    "guardianId": "N/A",

                                    "lastName": "'
                    || l_lastName
                    || '",

                                    "mailingAddress": "PRESENT_ADDRESS",

                                    "maritalStatus": "'
                    || l_maritalStatus
                    || '",

                                    "middleName": "",

                                    "mobileNumber": "'
                    || l_mobileNumber
                    || '",

                                    "monthlyIncome": '
                    || l_monthly_income
                    || ',

                                    "mothersFirstName": "",

                                    "mothersLastName": "'
                    || l_mothersLastName
                    || '",

                                    "mothersMiddleName": "",

                                    "nationality": "Bangladeshi",

                                    "passportNumber": "",

                                    "permanentAddress": '
                    || l_permanentAddress
                    || ',

                                    "phoneNumber": "'
                    || l_mobileNumber
                    || '",

                                    "presentAddress":'
                    || l_presentAddress
                    || ',

                                    "professionalAddress": {

                                        "addressLine": "",

                                        "addressLineTwo": "",

                                        "countryCode": "",

                                        "district": "",

                                        "division": "",

                                        "postCode": "",

                                        "upazilla": ""

                                    },

                                    "relationWithGuardian": "N/A",

                                    "religionId": '
                    || l_religion
                    || ',

                                    "residenceStatus": "'
                    || l_resident
                    || '",

                                    "sourceOfFunds": [

                                        {

                                            "description": "'
                    || l_source_fnd
                    || '",

                                            "sourceId": '
                    || l_source_income
                    || '

                                        }

                                    ],

                                    "spouseName": "'
                    || l_spouseName
                    || '",

                                    "title": "'
                    || l_title
                    || '",

                                    "visaType": "string",

                                    "visaValidity": "string"

                              }

                            }');



            l_applicants_arr.append (l_documents_obj1);

            l_documents_arr := NEW JSON_ARRAY_T;
        END LOOP;



        BEGIN
            SELECT FIRST_NAME,
                   (SELECT SECTOR_CODE
                      FROM EMOB.ST_SECTOR_CODE
                     WHERE SRLNO = SECTOR_CODE)    SECTOR_CODE,
                   REF_NO_IW
              INTO jl_firstName, jl_sectorCode, l_referenceNumber
              FROM emob.mb_customer_mst A
             WHERE cust_no = pCustNo;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Customer Info. finding Problem';
                RAISE vMyException;
        END;



        l_request :=
               '{

        "additionalField1": "",

        "additionalField2": "",

        "additionalField3": "",

        "additionalField4": "",

        "additionalField5": "",

        "applicants": '
            || l_applicants_arr.to_string
            || ',
        "businessUnitId": 8,
        "channelCode": "AB",

        "clientAddress": "",

        "customerBranchId": 777,

        "customerName": "'
            || jl_firstName
            || '",

        "customerType": "",

        "password": "Cbl$4321",

        "sectorCode": "'
            || jl_sectorCode
            || '",

        "shortName": "",
        "customerClassId": 3,

        "requestId": "'
            || l_referenceNumber
            || '",

        "referenceNumber": "'
            || l_referenceNumber
            || '",

        "userName": "islamic_agentapp"

    }';



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            API_XML_LOG (pOprType        => 'IW_CIF_CREATION_JNT',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_request,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                        vApiUrl || '/AgentBanking/JointCustomerCreation',
                    p_http_method        => 'POST',
                    p_body               => l_request,
                    p_transfer_timeout   => 30,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CIF_CREATION_JNT',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_request,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_CIF_CREATION_JNT',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_request,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CIF_CREATION',
                                 pRefNo          => l_mobileNumber,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => l_status,
                                 pFileId         => vFileId,
                                 pInXMl          => l_request,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API :' || v_resmsg;

            RAISE vMyException;
        ELSE
            pResCode := v_rescode;

            pCustId := APEX_JSON.get_varchar2 ('customerId');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_CIF_CREATION_API_ORG (pCustNo          VARCHAR2,
                                       pLogId           VARCHAR2,
                                       pAppUser         VARCHAR2,
                                       pResCode     OUT VARCHAR2,
                                       pCustId      OUT VARCHAR2,
                                       pErrorFlag   OUT VARCHAR2,
                                       pErrorMsg    OUT VARCHAR2)
    IS
        vFileId                    NUMBER;

        vApiUrl                    VARCHAR2 (1024);

        vMyException               EXCEPTION;

        pOracleMessage             VARCHAR2 (1024);

        l_request                  CLOB;

        l_permanentAddress         CLOB;

        l_factoryAddress           CLOB;

        l_registeredAddress        CLOB;

        l_businessAddress          CLOB;

        l_presentAddress           CLOB;

        l_documents_obj            JSON_OBJECT_T;

        l_documents_obj1           JSON_OBJECT_T;

        l_documents_obj2           JSON_OBJECT_T;

        l_idocuments_obj           JSON_OBJECT_T;

        l_owner_arr                JSON_ARRAY_T;

        l_documents_arr            JSON_ARRAY_T;

        l_documents_arr1           JSON_ARRAY_T;

        l_documents_arr2           JSON_ARRAY_T;

        l_idocuments_arr           JSON_ARRAY_T;

        l_applicants_arr           JSON_ARRAY_T;

        l_owner_obj                JSON_OBJECT_T;

        l_alternateMobileNumber    VARCHAR2 (11);

        l_Age                      NUMBER;

        l_birthPlaceId             NUMBER;

        l_email                    VARCHAR2 (100);

        l_fathersLastName          VARCHAR2 (100);

        l_firstName                VARCHAR2 (100);

        l_gender                   VARCHAR2 (10);

        l_lastName                 VARCHAR2 (100);

        l_maritalStatus            VARCHAR2 (10);

        l_mobileNumber             VARCHAR2 (11);

        l_mothersLastName          VARCHAR2 (100);

        l_dateOfBirth              VARCHAR2 (1024);

        l_spouseName               VARCHAR2 (100);

        l_custType                 VARCHAR2 (10);

        l_referenceNumber          VARCHAR2 (1024);

        l_title                    VARCHAR2 (20);

        l_clob                     CLOB;

        l_sectorCode               VARCHAR2 (10);

        l_source_fnd               VARCHAR2 (1024);

        l_source_income            NUMBER;

        l_monthly_income           NUMBER;

        v_rescode                  VARCHAR2 (10);

        v_resmsg                   VARCHAR2 (1024);

        l_owner_type               VARCHAR2 (10);

        l_owner_type_id            NUMBER;

        l_netWorth                 NUMBER;

        l_permanentManpower        NUMBER;

        l_yearlyTurnover           NUMBER;

        l_ipermanentAddress        CLOB;

        l_ipresentAddress          CLOB;

        l_ifirstName               VARCHAR2 (100);

        l_ilastName                VARCHAR2 (100);

        l_ifathersLastName         VARCHAR2 (100);

        l_imothersLastName         VARCHAR2 (200);

        l_idateOfBirth             VARCHAR2 (1024);

        l_igender                  VARCHAR2 (10);

        l_imaritalStatus           VARCHAR2 (10);

        l_ispouseName              VARCHAR2 (100);

        l_imobileNumber            VARCHAR2 (11);

        l_ialternateMobileNumber   VARCHAR2 (11);

        l_iemail                   VARCHAR2 (100);

        l_icustType                VARCHAR2 (10);

        l_iAge                     NUMBER;

        l_ibirthPlaceId            VARCHAR2 (1024);

        l_ititle                   VARCHAR2 (20);

        l_isectorCode              VARCHAR2 (10);

        l_isource_fnd              VARCHAR2 (1024);

        l_isource_income           NUMBER;

        l_imonthly_income          NUMBER;

        l_iowner_type              VARCHAR2 (20);

        l_iowner_type_id           NUMBER;

        l_ipermanentManpower       NUMBER;

        l_iyearlyTurnover          NUMBER;

        l_ageClassification        VARCHAR2 (20);

        l_companyName              VARCHAR2 (1024);

        l_company_Name             VARCHAR2 (1024);

        l_org_type                 NUMBER;

        l_orgType                  NUMBER;

        l_contractualManpower      NUMBER;

        l_bus_type                 NUMBER;

        l_risk_score               NUMBER;

        l_religion                 NUMBER;

        l_resident                 VARCHAR2 (100);

        l_ireligion                NUMBER;

        l_iresident                VARCHAR2 (100);

        vErrorMsg                  VARCHAR2 (1024);

        l_status                   VARCHAR2 (1024);

        l_percentage               NUMBER := 0;

        l_sharePercentage          NUMBER;
        vIssueDateId               NUMBER;
        vExpiryDateId              NUMBER;
        vIssuePlaceId              NUMBER;
        vNIDVerfed                 VARCHAR2 (100);
        vOther                     CLOB;
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        pErrorFlag := 'N';

        l_documents_arr := NEW JSON_ARRAY_T;
        l_documents_arr1 := NEW JSON_ARRAY_T;
        l_documents_arr2 := NEW JSON_ARRAY_T;
        l_applicants_arr := NEW JSON_ARRAY_T;
        l_owner_arr := NEW JSON_ARRAY_T;
        l_idocuments_arr := NEW JSON_ARRAY_T;



        FOR I
            IN (SELECT a.ADDRESS_TYPE      ADDRESS_TYPE,
                       a.ADD_LINE1         L1,
                       a.ADD_LINE2         L2,
                       a.POSTAL_CODE       PC,
                       c.IW_SHORT_CODE     CITY_CO,
                       d.IW_SHORT_CODE     STATE_CO,
                       e.SHORT_CODE        UPA
                  FROM EMOB.MB_ADDRESS_MST   a,
                       EMOB.ST_ADDRESS_TYPE  b,
                       emob.MB_CITY_INFO     c,
                       emob.MB_STATE_INFO    d,
                       EMOB.IW_UPAZILA       e
                 WHERE     ref_no = pCustNo
                       AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                       AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                       AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                       AND a.UPAZILA_CODE = e.ID
                       AND c.STATE_IW_ID = d.IW_ID
                       AND c.IW_ID = e.DISTRICT_ID)
        LOOP
            IF I.ADDRESS_TYPE = 'FAC'
            THEN
                l_factoryAddress :=
                       '{

            "addressLine": "'
                    || I.L1
                    || '",

            "addressLineTwo": "'
                    || I.L2
                    || '",

            "countryCode": "BD",

            "district": "'
                    || I.CITY_CO
                    || '",

            "division": "'
                    || I.STATE_CO
                    || '",

            "postCode": "'
                    || I.PC
                    || '",

            "upazilla": "'
                    || I.UPA
                    || '"

            }';
            END IF;



            IF I.ADDRESS_TYPE = 'REG'
            THEN
                l_registeredAddress :=
                       '{

            "addressLine": "'
                    || I.L1
                    || '",

            "addressLineTwo": "'
                    || I.L2
                    || '",

            "countryCode": "BD",

            "district": "'
                    || I.CITY_CO
                    || '",

            "division": "'
                    || I.STATE_CO
                    || '",

            "postCode": "'
                    || I.PC
                    || '",

            "upazilla": "'
                    || I.UPA
                    || '"

            }';
            END IF;



            IF I.ADDRESS_TYPE = 'BUS'
            THEN
                l_businessAddress :=
                       '{

            "addressLine": "'
                    || I.L1
                    || '",

            "addressLineTwo": "'
                    || I.L2
                    || '",

            "countryCode": "BD",

            "district": "'
                    || I.CITY_CO
                    || '",

            "division": "'
                    || I.STATE_CO
                    || '",

            "postCode": "'
                    || I.PC
                    || '",

            "upazilla": "'
                    || I.UPA
                    || '"

            }';
            END IF;
        END LOOP;



        IF l_factoryAddress IS NULL
        THEN
            l_factoryAddress := '{

            "addressLine": "",

            "addressLineTwo": "",

            "countryCode": "",

            "district": "",

            "division": "",

            "postCode": "",

            "upazilla": ""

            }';
        END IF;



        FOR J
            IN (SELECT A.DOCMENT_NO                          AS DOC_NO,
                       CASE
                           WHEN     B.IW_DOC_TYPE_ID = 4
                                AND LENGTH (A.DOCMENT_NO) = 10
                           THEN
                               37
                           ELSE
                               B.IW_DOC_TYPE_ID
                       END                                   DOC_TYPE_ID,
                       CASE
                           WHEN     B.IW_DOC_TYPE_ID = 4
                                AND LENGTH (A.DOCMENT_NO) = 10
                           THEN
                               54
                           ELSE
                               C.ID
                       END                                   AS ID,
                       A.ISSUE_DATE,
                       (SELECT CITY_NAME
                          FROM EMOB.MB_CITY_INFO
                         WHERE CITY_CODE = A.ISSUE_PLACE)    ISSUE_PLACE, --A.ISSUE_PLACE,
                       A.EXPIRE_DATE
                  FROM MB_DOCUMENT_MST               A,
                       ST_DOCUMENT_TYPE              B,
                       emob.IW_ST_DOC_PROPERTY_TYPE  C
                 WHERE     UPPER (A.DOCUMENT_TYPE) = UPPER (B.DOC_TYPE)
                       AND B.IW_DOC_TYPE_ID = C.DOCUMENT_TYPE_ID
                       AND NVL (C.DOC_NO, 'N') = 'Y'
                       AND CUST_NO = pCustNo)
        LOOP
            IF J.DOC_TYPE_ID IN (4, 37)
            THEN
                vNIDVerfed := 'YES';
            END IF;

            vIssueDateId := NULL;
            vExpiryDateId := NULL;
            vIssuePlaceId := NULL;

            BEGIN
                SELECT ID
                  INTO vIssueDateId
                  FROM EMOB.IW_ST_DOC_PROPERTY_TYPE
                 WHERE     DOCUMENT_TYPE_ID = J.DOC_TYPE_ID
                       AND PROPERTY_LABEL IN ('ISSUE DATE',
                                              'NID ISSUE DATE',
                                              'TRADE LICENSE ISSUE DATE',
                                              'REGISTRATION_DATE');
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Issue Date Finding Problem.';
                    RAISE vMyException;
            END;

            BEGIN
                SELECT ID
                  INTO vExpiryDateId
                  FROM EMOB.IW_ST_DOC_PROPERTY_TYPE
                 WHERE     DOCUMENT_TYPE_ID = J.DOC_TYPE_ID
                       AND PROPERTY_LABEL = 'EXPIRY DATE';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Expiry Date Finding Problem.';
                    RAISE vMyException;
            END;

            BEGIN
                SELECT ID
                  INTO vIssuePlaceId
                  FROM EMOB.IW_ST_DOC_PROPERTY_TYPE
                 WHERE     DOCUMENT_TYPE_ID = J.DOC_TYPE_ID
                       AND PROPERTY_LABEL = 'ISSUE PLACE';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    pErrorMsg := 'Issue Place Finding Problem.';
                    RAISE vMyException;
            END;


            vOther := NULL;

            IF vIssueDateId IS NOT NULL
            THEN
                vOther :=
                       ',{"documentPropertyTypeId": '
                    || vIssueDateId
                    || ',

                            "propertyValue": "'
                    || J.ISSUE_DATE
                    || '"

                          }';
            END IF;

            IF vExpiryDateId IS NOT NULL
            THEN
                vOther :=
                       vOther
                    || ',{"documentPropertyTypeId": '
                    || vExpiryDateId
                    || ',

                            "propertyValue": "'
                    || J.EXPIRE_DATE
                    || '"

                          }';
            END IF;

            IF vIssuePlaceId IS NOT NULL
            THEN
                vOther :=
                       vOther
                    || ',{"documentPropertyTypeId": '
                    || vIssuePlaceId
                    || ',

                            "propertyValue": "'
                    || J.ISSUE_PLACE
                    || '"

                          }';
            END IF;

            l_documents_obj1 :=
                JSON_OBJECT_T.parse (
                       '{

                        "documentTypeId": '
                    || J.DOC_TYPE_ID
                    || ',

                        "files": [

                          {

                            "id": "9dfda045-ecc0-4f17-9820-db8d48555bb4",

                            "type": "JPG"

                          }

                        ],

                        "properties": [

                          {

                            "documentPropertyTypeId": '
                    || J.ID
                    || ',

                            "propertyValue": "'
                    || J.DOC_NO
                    || '"

                          }
                       '
                    || vOther
                    || '
                        ],

                        "verificationDetails": "ok",

                        "verified": true

                    

                    }');



            l_documents_arr1.append (l_documents_obj1);
        END LOOP;

        BEGIN
            SELECT FIRST_NAME
                       nme2,
                   LAST_NAME
                       nme,
                   FATHER_NAME,
                   MOTHER_NAME,
                   TO_CHAR (CUST_DOB, 'YYYY-MM-DD')
                       CUST_DOB,
                   DECODE (GENDER, 'M', 'MALE', 'FEMALE'),
                   DECODE (MARITUAL_STATUS,
                           'SINGL', 'UNMARRIED',
                           'MARID', 'MARRIED',
                           'MAR', 'MARRIED',
                           'SNG', 'UNMARRIED'),
                   SPOUSE_NAME,
                   MOBILE_NO,
                   MOBILE_NO2,
                   MAIL_ID,
                   DECODE (AGN_TYPE, 'PRS', 'IND', 'JNT'),
                   TRUNC (
                         MONTHS_BETWEEN (
                             TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                             TO_DATE (TO_CHAR (CUST_DOB, 'DD/MM/YYYY'),
                                      'DD/MM/RRRR'))
                       / 12),
                   NVL ((SELECT IW_ID
                           FROM EMOB.MB_CITY_INFO
                          WHERE UPPER (CITY_CODE) = UPPER (A.CITY)),
                        0),
                   CUST_TITTLE,
                   SECTOR_CODE,
                   SC_FUND,
                   NVL (SOURCE_ID, 0),
                   NVL (MONTHLY_INCOME, 0),
                   OWNER_TYPE,
                   NVL (OWNER_ID, 0),
                   NVL (PER_MANP, 0),
                   NVL (ANNUAL_TO, 0),
                   NVL (CONTRACT_MANP, 0),
                   NVL (BUS_TYPE, 0),
                   (SELECT RISK_SCORE
                      FROM EMOB.BUSINESS_TYPE
                     WHERE ID = A.BUS_TYPE),
                   NVL (NET_WRTH, 0),
                   NVL (ORG_TYPE, 0),
                   COMP_NAME,
                   REF_NO_IW,
                   DECODE (RELIGIOUS_CODE,
                           'MUS', 1,
                           'HIN', 2,
                           'CHR', 3,
                           'BUD', 4,
                           'OTH', 5,
                           6),
                   DECODE (RESIDENT,  'R', 'RESIDENT',  'N', 'NON-RESIDENT')
              INTO l_firstName,
                   l_lastName,
                   l_fathersLastName,
                   l_mothersLastName,
                   l_dateOfBirth,
                   l_gender,
                   l_maritalStatus,
                   l_spouseName,
                   l_mobileNumber,
                   l_alternateMobileNumber,
                   l_email,
                   l_custType,
                   l_Age,
                   l_birthPlaceId,
                   l_title,
                   l_sectorCode,
                   l_source_fnd,
                   l_source_income,
                   l_monthly_income,
                   l_owner_type,
                   l_owner_type_id,
                   l_permanentManpower,
                   l_yearlyTurnover,
                   l_contractualManpower,
                   l_bus_type,
                   l_risk_score,
                   l_netWorth,
                   l_orgType,
                   l_company_Name,
                   l_referenceNumber,
                   l_religion,
                   l_resident
              FROM emob.mb_customer_mst A
             WHERE cust_no = pCustNo;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Customer Info. finding Problem - 1';
                RAISE vMyException;
        END;



        FOR K IN (SELECT GURDIAN_CUST_NO, SHARE_PERCENT
                    FROM EMOB.MB_CUSTOMER_GURDIAN_INFO
                   WHERE CUST_NO = pCustNo)
        LOOP
            BEGIN
                SELECT FIRST_NAME
                           nme2,
                       LAST_NAME
                           nme,
                       FATHER_NAME,
                       MOTHER_NAME,
                       TO_CHAR (CUST_DOB, 'YYYY-MM-DD')
                           CUST_DOB,
                       DECODE (GENDER, 'M', 'MALE', 'FEMALE'),
                       DECODE (MARITUAL_STATUS,
                               'SINGL', 'UNMARRIED',
                               'MARID', 'MARRIED',
                               'MAR', 'MARRIED',
                               'SNG', 'UNMARRIED'),
                       SPOUSE_NAME,
                       MOBILE_NO,
                       MOBILE_NO2,
                       MAIL_ID,
                       DECODE (AGN_TYPE, 'PRS', 'IND', AGN_TYPE),
                       TRUNC (
                             MONTHS_BETWEEN (
                                 TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                                 TO_DATE (TO_CHAR (CUST_DOB, 'DD/MM/YYYY'),
                                          'DD/MM/RRRR'))
                           / 12),
                       NVL ((SELECT IW_ID
                               FROM EMOB.MB_CITY_INFO
                              WHERE UPPER (CITY_CODE) = UPPER (A.CITY)),
                            0),
                       CUST_TITTLE,
                       SECTOR_CODE,
                       SC_FUND,
                       NVL (SOURCE_ID, 0),
                       NVL (MONTHLY_INCOME, 0),
                       OWNER_TYPE,
                       NVL (OWNER_ID, 0),
                       NVL (PER_MANP, 0),
                       NVL (ANNUAL_TO, 0),
                       COMP_NAME,
                       NVL (ORG_TYPE, 0),
                       DECODE (RELIGIOUS_CODE,
                               'MUS', 1,
                               'HIN', 2,
                               'CHR', 3,
                               'BUD', 4,
                               'OTH', 5,
                               6),
                       DECODE (RESIDENT,
                               'R', 'RESIDENT',
                               'N', 'NON-RESIDENT')
                  INTO l_ifirstName,
                       l_ilastName,
                       l_ifathersLastName,
                       l_imothersLastName,
                       l_idateOfBirth,
                       l_igender,
                       l_imaritalStatus,
                       l_ispouseName,
                       l_imobileNumber,
                       l_ialternateMobileNumber,
                       l_iemail,
                       l_icustType,
                       l_iAge,
                       l_ibirthPlaceId,
                       l_ititle,
                       l_isectorCode,
                       l_isource_fnd,
                       l_isource_income,
                       l_imonthly_income,
                       l_iowner_type,
                       l_iowner_type_id,
                       l_ipermanentManpower,
                       l_iyearlyTurnover,
                       l_companyName,
                       l_org_type,
                       l_ireligion,
                       l_iresident
                  FROM emob.mb_customer_mst A
                 WHERE cust_no = K.GURDIAN_CUST_NO;
            EXCEPTION
                WHEN OTHERS
                THEN
                    pErrorMsg :=
                           'Customer Info. finding Problem - '
                        || K.GURDIAN_CUST_NO
                        || SQLERRM;

                    RAISE vMyException;
            END;



            IF l_iAge >= 60
            THEN
                l_ageClassification := 'SENIOR';
            ELSIF l_iAge >= 18 AND l_iAge < 60
            THEN
                l_ageClassification := 'MAJOR';
            ELSE
                l_ageClassification := 'MINOR';
            END IF;



            FOR m
                IN (SELECT a.ADDRESS_TYPE      ADDRESS_TYPE,
                           a.ADD_LINE1         L1,
                           a.ADD_LINE2         L2,
                           a.POSTAL_CODE       PC,
                           c.IW_SHORT_CODE     CITY_CO,
                           d.IW_SHORT_CODE     STATE_CO,
                           e.SHORT_CODE        UPA
                      FROM EMOB.MB_ADDRESS_MST   a,
                           EMOB.ST_ADDRESS_TYPE  b,
                           emob.MB_CITY_INFO     c,
                           emob.MB_STATE_INFO    d,
                           EMOB.IW_UPAZILA       e
                     WHERE     ref_no = K.GURDIAN_CUST_NO
                           AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                           AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                           AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                           AND a.UPAZILA_CODE = e.ID
                           AND c.STATE_IW_ID = d.IW_ID
                           AND c.IW_ID = e.DISTRICT_ID)
            LOOP
                IF m.ADDRESS_TYPE = 'PER'
                THEN
                    l_ipermanentAddress :=
                           '{

            "addressLine": "'
                        || m.L1
                        || '",

            "addressLineTwo": "'
                        || m.L2
                        || '",

            "countryCode": "BD",

            "district": "'
                        || m.CITY_CO
                        || '",

            "division": "'
                        || m.STATE_CO
                        || '",

            "postCode": "'
                        || m.PC
                        || '",

            "upazilla": "'
                        || m.UPA
                        || '"

            }';
                END IF;



                IF m.ADDRESS_TYPE = 'PRS'
                THEN
                    l_ipresentAddress :=
                           '{

            "addressLine": "'
                        || m.L1
                        || '",

            "addressLineTwo": "'
                        || m.L2
                        || '",

            "countryCode": "BD",

            "district": "'
                        || m.CITY_CO
                        || '",

            "division": "'
                        || m.STATE_CO
                        || '",

            "postCode": "'
                        || m.PC
                        || '",

            "upazilla": "'
                        || m.UPA
                        || '"

            }';
                END IF;
            END LOOP;



            FOR n
                IN (SELECT A.DOCMENT_NO    AS DOC_NO,
                           CASE
                               WHEN     B.IW_DOC_TYPE_ID = 4
                                    AND LENGTH (A.DOCMENT_NO) = 10
                               THEN
                                   37
                               ELSE
                                   B.IW_DOC_TYPE_ID
                           END             DOC_TYPE_ID,
                           CASE
                               WHEN     B.IW_DOC_TYPE_ID = 4
                                    AND LENGTH (A.DOCMENT_NO) = 10
                               THEN
                                   54
                               ELSE
                                   C.ID
                           END             AS ID
                      FROM MB_DOCUMENT_MST               A,
                           ST_DOCUMENT_TYPE              B,
                           emob.IW_ST_DOC_PROPERTY_TYPE  C
                     WHERE     UPPER (A.DOCUMENT_TYPE) = UPPER (B.DOC_TYPE)
                           AND B.IW_DOC_TYPE_ID = C.DOCUMENT_TYPE_ID
                           AND NVL (C.DOC_NO, 'N') = 'Y'
                           AND CUST_NO = K.GURDIAN_CUST_NO)
            LOOP
                l_idocuments_obj :=
                    JSON_OBJECT_T.parse (
                           '{

                        "documentTypeId": '
                        || n.DOC_TYPE_ID
                        || ',

                        "files": [

                          {

                            "id": "9dfda045-ecc0-4f17-9820-db8d48555bb4",

                            "type": "JPG"

                          }

                        ],

                        "properties": [

                          {

                            "documentPropertyTypeId": '
                        || n.ID
                        || ',

                            "propertyValue": "'
                        || n.DOC_NO
                        || '"

                          }

                        ],

                        "verificationDetails": "ok",

                        "verified": true

                    

                    }');



                l_idocuments_arr.append (l_idocuments_obj);
            END LOOP;

            l_sharePercentage := K.SHARE_PERCENT;
            l_percentage := l_percentage + l_sharePercentage;

            l_owner_obj :=
                JSON_OBJECT_T.parse (
                       '

            {   

                "additionalField1": "",

                "additionalField2": "",

                "additionalField3": "",

                "additionalField4": "",

                "additionalField5": "",

				"ageClassification": "'
                    || l_ageClassification
                    || '",

                "alternateMobileNumber": "'
                    || l_ialternateMobileNumber
                    || '",

                "bankId": 0,

                "birthCountryId": 19,

				"birthPlaceId": '
                    || l_ibirthPlaceId
                    || ',

                "classificationId": 3,

                "countryCode": "88",

                "countryCodeForAlterMobile": "88",

                "creditCardNumber": "",

                "creditCardType": "",

				"dateOfBirth": "'
                    || l_idateOfBirth
                    || '",

				"documents":'
                    || l_idocuments_arr.to_string
                    || ',

                "email": "'
                    || l_iemail
                    || '",

                "email2": "",

				"fathersFirstName": "",

				"fathersLastName": "'
                    || l_ifathersLastName
                    || '",

				"fathersMiddleName": "",

				"firstName": "'
                    || l_ifirstName
                    || '",

                "foreignAccountTaxComplianceActId": 0,

                "foreignAddress": "",

                "foreignBirthPlace": "",

                "foreignCity": "",

                "foreignPostOffice": "",

                "foreignState": "",

				"gender": "'
                    || l_igender
                    || '",

                "guardianId": "",

				"lastName": "'
                    || l_ilastName
                    || '",

				"mailingAddress": "PRESENT_ADDRESS",

				"maritalStatus": "'
                    || l_imaritalStatus
                    || '",

				"middleName": "",

				"mobileNumber": "'
                    || l_imobileNumber
                    || '",

				"monthlyIncome": '
                    || l_imonthly_income
                    || ',

				"mothersFirstName": "",

				"mothersLastName": "'
                    || l_imothersLastName
                    || '",

				"mothersMiddleName": "",

				"nationality": "Bangladeshi",

				"passportNumber": "",

				"permanentAddress":'
                    || l_ipermanentAddress
                    || ',

                "phoneNumber": "'
                    || l_imobileNumber
                    || '",

				"presentAddress":'
                    || l_ipresentAddress
                    || ',

				"professionalAddress": {

					"addressLine": "",

					"addressLineTwo": "",

					"countryCode": "",

					"district": "",

					"division": "",

					"postCode": "",

					"upazilla": ""

				},

				"relationWithGuardian": "",

				"religionId": '
                    || l_ireligion
                    || ',

                "residenceStatus": "'
                    || l_iresident
                    || '",

				"sourceOfFunds": [

					{

						"description": "'
                    || l_isource_fnd
                    || '",

						"sourceId": '
                    || l_isource_income
                    || '

					}

				],

				"spouseName": "'
                    || l_ispouseName
                    || '",

				"title": "'
                    || l_ititle
                    || '",

                "visaType": "",

			    "visaValidity": "",

			    "sharePercentage": '
                    || l_sharePercentage
                    || '

            }

            ');



            l_owner_arr.append (l_owner_obj);

            l_idocuments_arr := NEW JSON_ARRAY_T;
        END LOOP;



        IF l_percentage NOT IN (100)
        THEN
            pErrorMsg := 'Shared Percentage Must be 100%.';

            RAISE vMyException;
        END IF;



        IF l_owner_type IN ('IND')
        THEN
            l_request :=
                   '{

                "additionalField1": "",

                "additionalField2": "",

                "additionalField3": "",

                "additionalField4": "",

                "additionalField5": "",

                "channelCode": "AB",

                "clientAddress": "",

                "csType": "I",

                "customerBranch": 777,

                "customerName": "'
                || l_firstName
                || '",

                "customerType": "I",

                "individualOwners":'
                || l_owner_arr.to_string
                || ',

                "organization":{

                    "businessAddress":'
                || l_businessAddress
                || ',

                    "businessDetails": {

                        "businessesTypes": [

                        {

                            "id": '
                || l_bus_type
                || ',

                            "name": "'
                || l_company_Name
                || '",

                            "riskScore": '
                || l_risk_score
                || '

                        }

                        ],

                        "contractualManpower":0,

                        "countryOfOrigin": 88,

                        "monthlyTurnover": 0,

                        "netWorth": 0,

                        "otherInformation": "",

                        "permanentManpower": 0,

                        "typeOfProductAndService": "",

                        "yearlyTurnover": 0

                    },

                    "countryCode": "88",

                    "countryOfOrigin": 19,

                    "documents":'
                || l_documents_arr1.to_string
                || ',

                    "email": "'
                || l_email
                || '",

                    "factoryAddress":'
                || l_factoryAddress
                || ',

                    "mailingAddress": "BUSINESS_ADDRESS",

                    "mobileNumber": "'
                || l_mobileNumber
                || '",
                 "countryCodeForAlterMobile": "88",
                 "alternateMobileNumber": "'
                || l_alternateMobileNumber
                || '",
                    "name": "'
                || l_firstName
                || '",

                    "organizationTypeId": '
                || l_orgType
                || ',

                    "registeredAddress":'
                || l_registeredAddress
                || ',

                    "sourceOfFunds": [

                    {

                        "description": "'
                || l_source_fnd
                || '",

                         "sourceId": '
                || l_source_income
                || '

                    }

                 ]

                },

                "organizationOwners": [

                {

                    "businessAddress":'
                || l_businessAddress
                || ',

                    "businessDetails": 

                    {

                        "businessesTypes": [

                        {

                            "id": '
                || l_bus_type
                || ',

                            "name": "'
                || l_company_Name
                || '",

                            "riskScore": '
                || l_risk_score
                || '

                        }

                       ],

                        "contractualManpower": 0,

                        "countryOfOrigin": 88,

                        "monthlyTurnover": 0,

                        "netWorth":0,

                        "otherInformation": "",

                        "permanentManpower": 0,

                        "typeOfProductAndService": "",

                        "yearlyTurnover": 0

                    },

                    "countryCode": "88",

                    "countryOfOrigin": 19,

                    "documents":'
                || l_documents_arr2.to_string
                || ',

                    "email": "'
                || l_email
                || '",

                    "factoryAddress":'
                || l_factoryAddress
                || ',

                    "mailingAddress": "BUSINESS_ADDRESS",

                    "mobileNumber": "'
                || l_mobileNumber
                || '",

                    "name": "'
                || l_firstName
                || '",

                    "organizationTypeId": '
                || l_orgType
                || ',

                    "registeredAddress":'
                || l_registeredAddress
                || ',

                    "sourceOfFunds": [

                    {

                        "description": "'
                || l_source_fnd
                || '",

                        "sourceId": '
                || l_source_income
                || '

                    }

                    ]

                }

              ],

                "ownerType": "INDIVIDUAL",

                "ownerTypeId": '
                || l_owner_type_id
                || ',

                "password": "Cbl$4321",

                "requestId": "'
                || l_referenceNumber
                || '",

                "sectorCode": "'
                || l_sectorCode
                || '",

                "shortName": "",

                "userName": "islamic_agentapp"

            }';
        END IF;



        IF l_owner_type IN ('ORG')
        THEN
            l_request :=
                   '

            {

                "additionalField1": "",

                "additionalField2": "",

                "additionalField3": "",

                "additionalField4": "",

                "additionalField5": "",

                "channelCode": "AB",

                "clientAddress": "",

                "customerBranch": "777",

                "customerName": "'
                || l_firstName
                || '",

                "customerType": "O",

                "csType":"O",

                "organization":{

                    "businessAddress":'
                || l_businessAddress
                || ',

                    "businessDetails": {

                    "businessesTypes": [

                        {

                            "id": '
                || l_bus_type
                || ',

                            "name": "'
                || l_company_Name
                || '",

                            "riskScore": '
                || l_risk_score
                || '

                        }

                    ],

                    "contractualManpower": 0,

                    "countryOfOrigin": 0,

                    "monthlyTurnover": '
                || l_monthly_income
                || ',

                    "netWorth":0,

                    "otherInformation": "",

                    "permanentManpower": 0,

                    "typeOfProductAndService": "",

                    "yearlyTurnover": '
                || l_yearlyTurnover
                || '

                    },

                    "countryCode": "88",

                    "countryOfOrigin": 0,

                    "documents": '
                || l_documents_arr.to_string
                || ',

                    "email":"'
                || l_email
                || '",

                    "factoryAddress":'
                || l_factoryAddress
                || ',

                    "mailingAddress": "BUSINESS_ADDRESS",

                    "mobileNumber": "'
                || l_mobileNumber
                || '",
                 "countryCodeForAlterMobile": "88",
                 "alternateMobileNumber": "'
                || l_alternateMobileNumber
                || '",
                    "name": "'
                || l_company_Name
                || '",

                    "organizationTypeId": '
                || l_orgType
                || ',

                    "registeredAddress": '
                || l_registeredAddress
                || ',

                    "sourceOfFunds": [

                        {

                            "description": "'
                || l_source_fnd
                || '",

                            "sourceId": '
                || l_source_income
                || '

                        }

                    ]

                },

                "organizationOwners": [

                {

                    "businessAddress":'
                || l_businessAddress
                || ',

                    "businessDetails": {

                        "businessesTypes": [

                        {

                            "id": '
                || l_bus_type
                || ',

                            "name": "'
                || l_company_Name
                || '",

                            "riskScore": '
                || l_risk_score
                || '

                        }

                        ],

                        "contractualManpower":0,

                        "countryOfOrigin": 0,

                        "monthlyTurnover":0,

                        "netWorth":0,

                        "otherInformation": "",

                        "permanentManpower": 0,

                        "typeOfProductAndService": "",

                        "yearlyTurnover": 0

                    },

                    "countryCode": "88",

                    "countryOfOrigin": 0,

                    "documents": '
                || l_documents_arr.to_string
                || ',

                    "email":"'
                || l_email
                || '",

                    "factoryAddress":'
                || l_factoryAddress
                || ',

                    "mailingAddress": "BUSINESS_ADDRESS",

                    "mobileNumber": "'
                || l_mobileNumber
                || '",

                    "name": "'
                || l_company_Name
                || '",

                    "organizationTypeId": '
                || l_orgType
                || ',

                    "registeredAddress": '
                || l_registeredAddress
                || ',

                    "sourceOfFunds": [

                    {

                            "description": "'
                || l_source_fnd
                || '",

                            "sourceId": '
                || l_source_income
                || '

                    }

                  ]

                }

              ],

                "ownerType": "ORGANIZATION",

                "ownerTypeId": '
                || l_owner_type_id
                || ',

                "password": "Cbl$4321",

                "sectorCode": "",
                "businessUnitId": 8,

                "shortName": "",

                "referenceNumber": "'
                || l_referenceNumber
                || '",

                "requestId": "'
                || l_referenceNumber
                || '",

                "userName": "islamic_agentapp"

            }

            ';
        END IF;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            API_XML_LOG (pOprType        => 'IW_CIF_CREATION_ORG',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_request,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/AgentBanking/OrganizationCustomerCreation',
                    p_http_method        => 'POST',
                    p_body               => l_request,
                    p_transfer_timeout   => 30,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CIF_CREATION_ORG',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_request,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        BEGIN
            API_XML_LOG (pOprType        => 'IW_CIF_CREATION_ORG',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_request,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CIF_CREATION',
                                 pRefNo          => l_mobileNumber,
                                 pDrAcNo         => pCustNo,
                                 pCrAcNo         => l_status,
                                 pFileId         => vFileId,
                                 pInXMl          => l_request,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API: ' || v_resmsg;

            RAISE vMyException;
        ELSE
            pResCode := v_rescode;

            pCustId := APEX_JSON.get_varchar2 ('customerId');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE WI_ACCOUENT_OPEN_API (pAcId            VARCHAR2,
                                    pLogId           VARCHAR2,
                                    pAppUser         VARCHAR2,
                                    pResCode     OUT VARCHAR2,
                                    pAcNo        OUT VARCHAR2,
                                    pErrorFlag   OUT VARCHAR2,
                                    pErrorMsg    OUT VARCHAR2)
    IS
        vOutXml           CLOB;
        l_envelope        VARCHAR2 (32700);
        l_envelope1       VARCHAR2 (32700);
        l_envelope2       VARCHAR2 (32700);
        l_envelope3       VARCHAR2 (32700);
        vCustNo           NUMBER;
        vAcType           VARCHAR2 (2);
        vOutXml1          XMLTYPE;
        vResCode          VARCHAR2 (50);
        vResMsg           VARCHAR2 (1024);
        vFileId           NUMBER;
        vApiUrl           VARCHAR2 (1024);
        vMinorflag        VARCHAR2 (10);
        vNomCount         NUMBER;
        vNomAvailAble     VARCHAR2 (10);
        vAge              VARCHAR2 (10);
        vOperatoerCount   NUMBER := 1;
        vOprType          VARCHAR2 (1024);
        vOcuCode          VARCHAR2 (100);
        vMyException      EXCEPTION;
        pOracleMessage    VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        -- ENVELOPE GENERATE ---
        pErrorFlag := 'N';



        BEGIN
            SELECT COUNT (NOMINEE_ID)
              INTO vNomCount
              FROM EMOB.NOMINEE_MST
             WHERE AC_ID = pAcId;
        END;



        IF vNomCount = 0
        THEN
            vNomAvailAble := 'N';
        ELSE
            vNomAvailAble := 'Y';
        END IF;



        --- 2251923125001



        FOR i
            IN (SELECT a.AC_TITLE
                           AC_TITLE,
                       a.cust_no,
                       b.cust_code
                           cust_id,
                       a.AC_NATURE,
                       DECODE (a.AC_NATURE, 'C', NULL, 'SELF')
                           mpcode,
                       b.first_name
                           last_name,
                       C.GL_SUB_HEAD_CODE
                           GL_SUB_HEAD_CODE,
                       RM_CODE,
                       D.FINACLE_ID
                  FROM EMOB.MB_ACCOUNT_MST   a,
                       EMOB.MB_CUSTOMER_MST  b,
                       EMOB.MB_PRODUCT_MST   C,
                       EMOB.ST_AGENT_POINT   D
                 WHERE     AC_ID = pAcId
                       AND a.cust_no = b.cust_no
                       AND A.AC_TYPE_ID = C.AC_TYPE_ID
                       AND A.POINT_ID = D.POINT_ID)
        LOOP
            /*'||i.FINACLE_ID||'*/



            vCustNo := i.cust_no;



            vAcType := i.AC_NATURE;



            l_envelope :=
                   '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://fi/xsd">



   <soapenv:Header/>



   <soapenv:Body>



      <axis:OpenCurrentAccount>



         <!--Optional:-->



     <axis:request>



            <!--Optional:-->



            <xsd:accountCurrency>BDT</xsd:accountCurrency>



            <!--Optional:-->



            <xsd:accountName>'
                || i.AC_TITLE
                || '</xsd:accountName>



            <!--Optional:-->



            <xsd:accountShortName></xsd:accountShortName>



            <!--Optional:-->



            <xsd:acctstmtcal>G</xsd:acctstmtcal>



            <!--Optional:-->



            <xsd:acctstmtholstat>N</xsd:acctstmtholstat>



            <!--Optional:-->



            <xsd:acctstmtmode>P</xsd:acctstmtmode>



           <!--Optional:-->



            <xsd:acctstmtnxtprintdt>2029-12-31T00:00:00.000</xsd:acctstmtnxtprintdt>



            <!--Optional:-->



            <xsd:acctstmtstartdt>01</xsd:acctstmtstartdt>



            <!--Optional:-->



            <xsd:acctstmttype>M</xsd:acctstmttype>



            <!--Optional:-->



            <xsd:acmanagerid>UBSADMIN</xsd:acmanagerid>



            <!--Optional:-->



            <xsd:agentbankingoutlet>'
                || i.FINACLE_ID
                || '</xsd:agentbankingoutlet>



            <!--Optional:-->



            <xsd:ccepcode></xsd:ccepcode>



            <!--Optional:-->



            <xsd:crcashlim>9999999999.99</xsd:crcashlim>



            <!--Optional:-->



            <xsd:crcashlimccy>BDT</xsd:crcashlimccy>



            <!--Optional:-->



            <xsd:crclrlim>9999999999.99</xsd:crclrlim>



            <!--Optional:-->



            <xsd:crclrlimccy>BDT</xsd:crclrlimccy>



            <!--Optional:-->



            <xsd:crtxlim>9999999999.99</xsd:crtxlim>



            <!--Optional:-->



            <xsd:crtxlimccy>BDT</xsd:crtxlimccy>



            <!--Optional:-->



            <xsd:custID>'
                || i.cust_id
                || '</xsd:custID>



            <!--Optional:-->



            <xsd:depositcode>100</xsd:depositcode>



            <!--Optional:-->



            <xsd:despatchMode>N</xsd:despatchMode>



            <!--Optional:-->



            <xsd:dormchrg>NA</xsd:dormchrg>



            <!--Optional:-->



            <xsd:dormchrg_alt></xsd:dormchrg_alt>







            <!--Optional:-->







            <xsd:drcashlim>9999999999.99</xsd:drcashlim>







            <!--Optional:-->







            <xsd:drcashlimccy>BDT</xsd:drcashlimccy>







            <!--Optional:-->







            <xsd:drclrlim>9999999999.99</xsd:drclrlim>







            <!--Optional:-->







            <xsd:drclrlimccy>BDT</xsd:drclrlimccy>







            <!--Optional:-->







            <xsd:drtxlim>9999999999.99</xsd:drtxlim>







            <!--Optional:-->







            <xsd:drtxlimccy>BDT</xsd:drtxlimccy>







            <!--Optional:-->







            <xsd:freecode6></xsd:freecode6>



            <!--Optional:-->



            <xsd:freecode8></xsd:freecode8>



            <!--Optional:-->



            <xsd:freetext10></xsd:freetext10>



            <!--Optional:-->



            <xsd:freetext3></xsd:freetext3>







            <!--Optional:-->







            <xsd:glLedgersubHeadCode>'
                || i.GL_SUB_HEAD_CODE
                || '</xsd:glLedgersubHeadCode>







            <!--Optional:-->







            <xsd:intcrac>S</xsd:intcrac>







            <!--Optional:-->







            <xsd:intcracid></xsd:intcracid>







            <!--Optional:-->







            <xsd:loccalflg>N</xsd:loccalflg>







            <!--Optional:-->







            <xsd:mopcode>'
                || i.mpcode
                || '</xsd:mopcode>







            <!--Optional:-->







            <xsd:nomavbl>1</xsd:nomavbl>







            <!--Optional:-->







            <xsd:nomavblflg>'
                || vNomAvailAble
                || '</xsd:nomavblflg>';
        END LOOP;



        /*  IF vNomAvailAble = 'Y'

          THEN
             FOR j
                IN (SELECT NOMINEE_ID,
                           NOMINEE_NAME,
                           NOM_PERCENT,
                           ADDR1,
                           ADDR2,
                           TO_CHAR (TO_TIMESTAMP (DOB),
                                    'YYYY-MM-DD"T"HH24:MI:SS".""0000"')
                              DOB,
                           UPPER (CITY) CITY,
                           GURDIAN_ADDR1,
                           GURDIAN_ADDR2,
                           UPPER (GURDIAN_CITY) GURDIAN_CITY,
                           GURDIAN_POSTAL_CODE,
                           GURDIAN_NAME,
                           POSTAL_CODE
                      FROM EMOB.NOMINEE_MST
                     WHERE AC_ID = pAcId)
             LOOP
                SELECT TRUNC ( MONTHS_BETWEEN (TO_DATE (SYSDATE, 'DD/MM/RRRR'),TO_DATE (TO_CHAR (DOB, 'DD/MM/YYYY'),'DD/MM/RRRR'))/ 12)
INTO vAge
FROM EMOB.NOMINEE_MST
WHERE NOMINEE_ID = J.NOMINEE_ID;
                IF vAge < 18
                THEN
                   vMinorflag := 'Y';
                ELSE
                   vMinorflag := 'N';
                END IF;

                l_envelope1 :=
                      '<xsd:nomineeContactInfoRequests>
                   <!--Optional:-->
                   <xsd:address1>'
                   || j.ADDR1
                   || '</xsd:address1>
                   <!--Optional:-->

                   <xsd:address2>'
                   || j.ADDR2
                   || '</xsd:address2>
                   <!--Optional:-->
                   <xsd:address3></xsd:address3>

                   <!--Optional:-->

                   <xsd:city>'
                   || j.CITY
                   || '</xsd:city>

                   <!--Optional:-->

                   <xsd:country>BD</xsd:country>

                   <!--Optional:-->

                   <xsd:emailAddr></xsd:emailAddr>

                   <!--Optional:-->

                   <xsd:guardianAddr1>'

                   || j.GURDIAN_ADDR1

                   || '</xsd:guardianAddr1>

                   <!--Optional:-->

                   <xsd:guardianAddr2>'

                   || j.GURDIAN_ADDR2

                   || '</xsd:guardianAddr2>

                   <!--Optional:-->

                   <xsd:guardianAddr3></xsd:guardianAddr3>

                   <!--Optional:-->

                   <xsd:guardianAddrType>Mailing</xsd:guardianAddrType>

                   <!--Optional:-->

                   <xsd:guardianCity>'

                   || j.GURDIAN_CITY

                   || '</xsd:guardianCity>

                   <!--Optional:-->

                   <xsd:guardianCode>O</xsd:guardianCode>

                   <!--Optional:-->

                   <xsd:guardianCountry>BD</xsd:guardianCountry>

                   <!--Optional:-->

                   <xsd:guardianEmailAddr></xsd:guardianEmailAddr>

                   <!--Optional:-->

                   <xsd:guardianName>'

                   || j.GURDIAN_NAME

                   || '</xsd:guardianName>

                   <!--Optional:-->

                   <xsd:guardianPostalCode>'

                   || j.GURDIAN_POSTAL_CODE

                   || '</xsd:guardianPostalCode>

                   <!--Optional:-->

                   <xsd:guardianStateProv>'

                   || j.GURDIAN_CITY

                   || '</xsd:guardianStateProv>

                   <!--Optional:-->

                   <xsd:guardianTelephoneNum></xsd:guardianTelephoneNum>

                   <!--Optional:-->

                   <xsd:nomineeBirthDt>'

                   || j.DOB

                   || '</xsd:nomineeBirthDt>

                   <!--Optional:-->

                   <xsd:nomineeMinorFlg>'

                   || vMinorflag

                   || '</xsd:nomineeMinorFlg>

                   <!--Optional:-->

                   <xsd:nomineeName>'

                   || j.NOMINEE_NAME

                   || '</xsd:nomineeName>

                   <!--Optional:-->

                   <xsd:nomineePercent>'

                   || j.NOM_PERCENT

                   || '</xsd:nomineePercent>

                   <!--Optional:-->

                   <xsd:postalCode>'

                   || j.POSTAL_CODE

                   || '</xsd:postalCode>

                   <!--Optional:-->

                   <xsd:recDelFlg>N</xsd:recDelFlg>

                   <!--Optional:-->

                   <xsd:regNum>0</xsd:regNum>

                   <!--Optional:-->

                   <xsd:relType>11</xsd:relType>

                   <!--Optional:-->

                   <xsd:stateProv>'

                   || j.CITY

                   || '</xsd:stateProv>

                </xsd:nomineeContactInfoRequests>';

                l_envelope := l_envelope || l_envelope1;

             END LOOP;

          END IF;*/



        IF NVL (vAcType, 'S') IN ('J', 'C')
        THEN
            FOR M
                IN (  SELECT FIRST_NAME,
                             LAST_NAME,
                             FIRST_NAME || ' ' || LAST_NAME     NME,
                             MAIL_ID,
                             CUST_CODE,
                             MOBILE_NO,
                             C.CITY,
                             C.POSTAL_CODE,
                             C.ADD_LINE1,
                             C.ADD_LINE2
                        FROM EMOB.MB_CUSTOMER_MST    A,
                             EMOB.MB_ADDRESS_MST     C,
                             EMOB.MB_ACCOUNT_OPERATOR D
                       WHERE     A.CUST_NO = C.REF_NO
                             AND ADDRESS_TYPE = 'PRS'
                             AND A.CUST_NO = D.CUST_NO
                             AND D.AC_ID = pAcId
                             AND D.CUST_NO != vCustNo
                    ORDER BY d.create_date ASC)
            LOOP
                IF vOperatoerCount = 1
                THEN
                    vOprType := '1STAP';
                ELSIF vOperatoerCount = 2
                THEN
                    vOprType := '2NDAP';
                ELSIF vOperatoerCount = 3
                THEN
                    vOprType := '3RDAP';
                ELSIF vOperatoerCount = 4
                THEN
                    vOprType := '4THAP';
                END IF;



                l_envelope2 :=
                       '<!--Zero or more repetitions:-->







            <xsd:relPartyRecInfoList>







               <!--Optional:-->







               <xsd:addressType>Mailing</xsd:addressType>







               <!--Optional:-->







               <xsd:city>'
                    || m.CITY
                    || '</xsd:city>







               <!--Optional:-->







               <xsd:country>BD</xsd:country>







               <!--Optional:-->







               <xsd:custId>'
                    || m.CUST_CODE
                    || '</xsd:custId>







               <!--Optional:-->







               <xsd:emailAddr>'
                    || m.MAIL_ID
                    || '</xsd:emailAddr>







               <!--Optional:-->







               <xsd:firstName>'
                    || m.FIRST_NAME
                    || '</xsd:firstName>







               <!--Optional:-->







               <xsd:lastName>'
                    || m.LAST_NAME
                    || '</xsd:lastName>







               <!--Optional:-->







               <xsd:middleName/>







               <!--Optional:-->







               <xsd:name>'
                    || m.NME
                    || '</xsd:name>







               <!--Optional:-->







               <xsd:phoneNum>'
                    || m.MOBILE_NO
                    || '</xsd:phoneNum>







               <!--Optional:-->







               <xsd:postalCode>'
                    || m.POSTAL_CODE
                    || '</xsd:postalCode>







               <!--Optional:-->







               <xsd:recDelFlg>N</xsd:recDelFlg>







               <!--Optional:-->







               <xsd:relAddr1>'
                    || m.ADD_LINE1
                    || '</xsd:relAddr1>







               <!--Optional:-->







               <xsd:relAddr2>'
                    || m.ADD_LINE2
                    || '</xsd:relAddr2>







               <!--Optional:-->







               <xsd:relPartyCode>'
                    || vOprType
                    || '</xsd:relPartyCode>







               <!--Optional:-->







               <xsd:relPartyContactInfo>







                  <!--Optional:-->







                  <xsd:addressType/>







                  <!--Optional:-->







                  <xsd:city/>







                  <!--Optional:-->







                  <xsd:country/>







                  <!--Optional:-->







                  <xsd:emailAddr/>







                  <!--Optional:-->







                  <xsd:phoneNum/>







                  <!--Optional:-->







                  <xsd:postalCode/>







                  <!--Optional:-->







                  <xsd:relAddr1/>







                  <!--Optional:-->







                  <xsd:relAddr2/>







                  <!--Optional:-->







                  <xsd:stateProv/>







               </xsd:relPartyContactInfo>







               <!--Optional:-->







               <xsd:relPartyType>A</xsd:relPartyType>







               <!--Optional:-->







               <xsd:relPartyTypeDesc>Authorized Signatory</xsd:relPartyTypeDesc>







               <!--Optional:-->







               <xsd:stateProv>Dhaka</xsd:stateProv>







               <!--Optional:-->







               <xsd:titlePrefix>MR</xsd:titlePrefix>







            </xsd:relPartyRecInfoList>







            <!--Zero or more repetitions:-->







            <xsd:relatedPartyAddList>







               <!--Optional:-->







               <xsd:desigcode>'
                    || vOprType
                    || '</xsd:desigcode>                  







               <!--Optional:-->







               <xsd:excludecombstmtflg>Y</xsd:excludecombstmtflg>







               <!--Optional:-->







               <xsd:rpcif>'
                    || m.CUST_CODE
                    || '</xsd:rpcif>







               <!--Optional:-->







               <xsd:rpdepnotflg>N</xsd:rpdepnotflg>







               <!--Optional:-->







               <xsd:rplaovnotflg>N</xsd:rplaovnotflg>







               <!--Optional:-->



               <xsd:rpsiflg>N</xsd:rpsiflg>







               <!--Optional:-->







               <xsd:rpstmtflg>Y</xsd:rpstmtflg>







            </xsd:relatedPartyAddList>';



                l_envelope := l_envelope || l_envelope2;



                vOperatoerCount := vOperatoerCount + 1;
            END LOOP;
        END IF;



        IF vAcType = 'C'
        THEN
            vOcuCode := 'AS';
        ELSE
            vOcuCode := 'AR';
        END IF;



        FOR k IN (SELECT SECTOR_CODE, SHORT_DESC, a.RM_CODE RM_CODE
                    FROM EMOB.MB_ACCOUNT_MST a, EMOB.MB_PRODUCT_MST B
                   WHERE A.AC_TYPE_ID = B.AC_TYPE_ID AND A.AC_ID = pAcId)
        LOOP
            l_envelope3 :=
                   '







          <xsd:notes></xsd:notes>



            <!--Optional:-->



            <xsd:occupationcode>'
                || vOcuCode
                || '</xsd:occupationcode>



            <!--Optional:-->



            <xsd:password>Cbl#2021@Agent</xsd:password>



            <!--Zero or more repetitions:-->       



            <!--Optional:-->



            <xsd:rmcode>'
                || k.RM_CODE
                || '</xsd:rmcode>



            <!--Optional:-->



            <xsd:rpavbl>1</xsd:rpavbl>



            <!--Optional:-->



            <xsd:schmCode>'
                || k.SHORT_DESC
                || '</xsd:schmCode>



            <!--Optional:-->



            <xsd:sectorcode></xsd:sectorcode>



            <!--Optional:-->



            <xsd:smsalert>AB</xsd:smsalert>



            <!--Optional:-->



            <xsd:solId>777</xsd:solId>



            <!--Optional:-->



            <xsd:solid>101</xsd:solid>



            <!--Optional:-->



            <xsd:subsectorcode></xsd:subsectorcode>



            <!--Optional:-->



            <xsd:username>cityagentapp</xsd:username>



            <!--Optional:-->



            <xsd:waiverfield></xsd:waiverfield>



            <!--Optional:-->



            <xsd:whtaxlvl>A</xsd:whtaxlvl>







            <!--Optional:-->







            <xsd:whtaxpcnt>2</xsd:whtaxpcnt>







            <!--Optional:-->







            <xsd:wtaxamountscopeflg>P</xsd:wtaxamountscopeflg>







         </axis:request>







      </axis:OpenCurrentAccount>







   </soapenv:Body>







   </soapenv:Envelope>';
        END LOOP;



        BEGIN
            API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope3,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        IF NVL (pErrorFlag, 'N') = 'F'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLFIWebServices', ---
                    p_action             => vApiUrl || '/CBLFIWebServices?wsdl', ---
                    p_envelope           => l_envelope || l_envelope3,
                    p_transfer_timeout   => 10 /*,

                     p_wallet_path =>

                         'file:/u01/wallets',

                     p_wallet_pwd =>

                         'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'API Request Fail';



                BEGIN
                    API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => vCustNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope || l_envelope3,
                                 pOutXml         => NULL,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope3,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        BEGIN
                 SELECT acno.AC_NO, rescode.RES_CODE, resmsg.RES_MSG
                   INTO pAcNo, vResCode, vResMsg
                   FROM XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:OpenCurrentAccountResponse//ax219:responseCode'
                            PASSING vOutXml1
                            COLUMNS RES_CODE    VARCHAR2 (1024) PATH '/ax219:responseCode')
                        rescode,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:OpenCurrentAccountResponse//ax219:responseMessage'
                            PASSING vOutXml1
                            COLUMNS RES_MSG     VARCHAR2 (1024) PATH '/ax219:responseMessage')
                        resmsg,
                        XMLTABLE (
                            XMLNAMESPACES ('http://ws.apache.org/axis2' AS "ns",
                                           'http://fi/xsd' AS "ax219"),
                            '//ns:OpenCurrentAccountResponse//ax219:accountNumber'
                            PASSING vOutXml1
                            COLUMNS AC_NO       VARCHAR2 (1024) PATH '/ax219:accountNumber')
                        acno;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'XML Parsing Problem';



                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => vCustNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_envelope || l_envelope3,
                                 pOutXml         => vOutXml1.getClobVal (),
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pOracleMessage := SQLERRM;



                        pErrorMsg := 'LOG process Calling Problem';



                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        BEGIN
            API_XML_LOG (pOprType        => 'CURRENT_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_envelope || l_envelope3,
                         pOutXml         => vOutXml1.getClobVal (),
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;



                pErrorMsg := 'LOG process Calling Problem';



                RAISE vMyException;
        END;



        IF vResCode != '100'
        THEN
            pErrorMsg := vResMsg;



            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_ACCOUENT_OPEN_API (pAcId            VARCHAR2,
                                    pLogId           VARCHAR2,
                                    pAppUser         VARCHAR2,
                                    pRefNo           VARCHAR2,
                                    pResCode     OUT VARCHAR2,
                                    pAcNo        OUT VARCHAR2,
                                    pErrorFlag   OUT VARCHAR2,
                                    pErrorMsg    OUT VARCHAR2)
    IS
        vFileId                      NUMBER;
        vApiUrl                      VARCHAR2 (1024);
        vMyException                 EXCEPTION;
        pOracleMessage               VARCHAR2 (1024);
        l_request                    CLOB;
        l_accountName                VARCHAR2 (1024);
        l_businessUnitId             NUMBER;
        l_addressLine                VARCHAR2 (1024);
        l_addressLineTwo             VARCHAR2 (1024);
        l_district                   VARCHAR2 (100);
        l_division                   VARCHAR2 (100);
        l_postCode                   VARCHAR2 (100);
        l_state                      VARCHAR2 (100);
        l_upazilla                   VARCHAR2 (100);
        l_alternateMobileNumber      VARCHAR2 (100);
        l_email                      VARCHAR2 (100);
        l_mobileNumber               VARCHAR2 (100);
        l_customerId                 VARCHAR2 (100);
        l_debitCardFlag              VARCHAR2 (10);
        l_TransactionProfiles_arr    JSON_ARRAY_T;
        l_TransactionProfiles_data   VARCHAR2 (3000);
        l_minorAccount               VARCHAR2 (100);
        l_openingDate                VARCHAR2 (100);
        l_productCode                NUMBER;
        l_referenceNumber            VARCHAR2 (100);
        vRmCode                      VARCHAR2 (100);
        l_clob                       CLOB;
        vCustNo                      NUMBER;
        vAcTypeId                    NUMBER;
        vErrorMsg                    VARCHAR2 (1024);
        l_status                     VARCHAR2 (1024);
        v_rescode                    VARCHAR2 (10);
        v_resmsg                     VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        pErrorFlag := 'N';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        l_referenceNumber := pRefNo;

        l_TransactionProfiles_arr := NEW JSON_ARRAY_T;



        BEGIN
            SELECT a.AC_TITLE
                       AC_TITLE,
                   b.cust_code
                       cust_id,
                   b.cust_no,
                   b.MOBILE_NO2,
                   b.MAIL_ID,
                   b.MOBILE_NO,
                   DECODE (a.DEBIT_CARD,  'N', 'false',  'Y', 'true'),
                   DECODE (b.AGN_TYPE,
                           'INM', 'true',
                           'JNM', 'true',
                           'false'),
                   TO_CHAR (SYSDATE, 'YYYY-MM-DD'),
                   c.GL_SUB_HEAD_CODE,
                   8, --DECODE (b.AGN_TYPE,  'INS', 8,  'INM', 8,  0), -- BUSINESS UNIT ID FOR AGENT BANKING = 8 FIXED
                   a.AC_TYPE_ID,
                   RM_CODE
              INTO l_accountName,
                   l_customerId,
                   vCustNo,
                   l_alternateMobileNumber,
                   l_email,
                   l_mobileNumber,
                   l_debitCardFlag,
                   l_minorAccount,
                   l_openingDate,
                   l_productCode,
                   l_businessUnitId,
                   vAcTypeId,
                   vRmCode
              FROM EMOB.MB_ACCOUNT_MST   a,
                   EMOB.MB_CUSTOMER_MST  b,
                   EMOB.MB_PRODUCT_MST   C
             WHERE     AC_ID = pAcId
                   AND A.AC_TYPE_ID = C.AC_TYPE_ID
                   AND a.cust_no = b.cust_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Account Information Finding Problem.';

                RAISE vMyException;
        END;

        BEGIN
            SELECT a.ADD_LINE1         L1,
                   a.ADD_LINE2         L2,
                   a.POSTAL_CODE       PC,
                   c.IW_SHORT_CODE     CITY_CO,
                   d.IW_SHORT_CODE     DIVI_CO,
                   d.IW_SHORT_CODE     STATE_CO,
                   e.SHORT_CODE        UPA
              INTO l_addressLine,
                   l_addressLineTwo,
                   l_postCode,
                   l_district,
                   l_division,
                   l_state,
                   l_upazilla
              FROM EMOB.MB_ADDRESS_MST   a,
                   EMOB.ST_ADDRESS_TYPE  b,
                   emob.MB_CITY_INFO     c,
                   emob.MB_STATE_INFO    d,
                   EMOB.IW_UPAZILA       e
             WHERE     ref_no = vCustNo
                   AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                   AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                   AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                   AND a.UPAZILA_CODE = e.ID
                   AND c.STATE_IW_ID = d.IW_ID
                   AND c.IW_ID = e.DISTRICT_ID
                   AND a.PREF_ADDR = 'Y';
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Account Address Info. Finding Problem.';

                RAISE vMyException;
        END;



        /*FOR I
            IN (  SELECT TRAN_TYPE,
                         SUM (DECODE (DRCR_CODE, 'C', NO_TRAN_MONTH, 0))
                             CR_NO_TRAN_MONTH,
                         SUM (DECODE (DRCR_CODE, 'D', NO_TRAN_MONTH, 0))
                             DR_NO_TRAN_MONTH,
                         SUM (DECODE (DRCR_CODE, 'C', TRAN_AMOUNT_MONTH, 0))
                             CR_TRAN_AMOUNT_MONTH,
                         SUM (DECODE (DRCR_CODE, 'D', TRAN_AMOUNT_MONTH, 0))
                             DR_TRAN_AMOUNT_MONTH,
                         SUM (DECODE (DRCR_CODE, 'C', MAX_TRAN_AMOUNT, 0))
                             CR_MAX_TRAN_AMOUNT,
                         SUM (DECODE (DRCR_CODE, 'D', MAX_TRAN_AMOUNT, 0))
                             DR_MAX_TRAN_AMOUNT
                    FROM emob.MB_PRODUCT_LIMIT
                   WHERE AC_TYPE_ID = vAcTypeId
                GROUP BY TRAN_TYPE)
        LOOP
            IF I.TRAN_TYPE = 'CS'
            THEN
                pOracleMessage := SQLERRM;*/



        /*  l_TransactionProfiles_obj :=
              JSON_OBJECT_T.parse (
                  '{

                              "maxCreditAmountPerTransaction":0,

                              "maxDebitAmountPerTransaction":0,

                              "monthlyTotalCreditTxnAmount":0,

                              "monthlyTotalCreditTxnCount":0,

                              "monthlyTotalDebitTxnAmount":0,

                              "monthlyTotalDebitTxnCount":0,

                              "transactionProfileDescription": "Cash (Including Online and ATM)",

                              "transactionProfileMandatory": true,

                              "transactionProfileTypeId": 1,

                              "transactionProfileTypeName": "CASH"

                          }');

          l_TransactionProfiles_arr.append (l_TransactionProfiles_obj);

                                                      --ELSIF I.TRAN_TYPE = 'TR'
          -- THEN
          l_TransactionProfiles_obj :=
              JSON_OBJECT_T.parse (
                  '{

                              "maxCreditAmountPerTransaction":0,

                              "maxDebitAmountPerTransaction":0,

                              "monthlyTotalCreditTxnAmount":0,

                              "monthlyTotalCreditTxnCount":0,

                              "monthlyTotalDebitTxnAmount":0,

                              "monthlyTotalDebitTxnCount":0,

                              "transactionProfileDescription": "Transfer/Instrument",

                              "transactionProfileMandatory": true,

                              "transactionProfileTypeId": 2,

                              "transactionProfileTypeName": "TRANSFER_INSTRUMENT"

              }');

          l_TransactionProfiles_arr.append (l_TransactionProfiles_obj);


          l_TransactionProfiles_obj :=
              JSON_OBJECT_T.parse (
                  '{

                              "maxCreditAmountPerTransaction":0,

                              "maxDebitAmountPerTransaction":0,

                              "monthlyTotalCreditTxnAmount":0,

                              "monthlyTotalCreditTxnCount":0,

                              "monthlyTotalDebitTxnAmount":0,

                              "monthlyTotalDebitTxnCount":0,

                              "transactionProfileDescription": "Foreign Remttance(Inward/Outward)",

                              "transactionProfileMandatory": true,

                              "transactionProfileTypeId": 3,

                              "transactionProfileTypeName": "FOREIGN_REMTTANCE"

              }');

          l_TransactionProfiles_arr.append (l_TransactionProfiles_obj);

          l_TransactionProfiles_obj := JSON_OBJECT_T.parse ('{

                              "maxCreditAmountPerTransaction":0,

                              "maxDebitAmountPerTransaction":0,

                              "monthlyTotalCreditTxnAmount":0,

                              "monthlyTotalCreditTxnCount":0,

                              "monthlyTotalDebitTxnAmount":0,

                              "monthlyTotalDebitTxnCount":0,

                              "transactionProfileDescription": "Import/Export",

                              "transactionProfileMandatory": true,

                              "transactionProfileTypeId": 3,

                              "transactionProfileTypeName": "IMPORT_EXPORT"

              }');

          l_TransactionProfiles_arr.append (l_TransactionProfiles_obj);

          l_TransactionProfiles_obj :=
              JSON_OBJECT_T.parse (
                  '{

                              "maxCreditAmountPerTransaction":0,

                              "maxDebitAmountPerTransaction":0,

                              "monthlyTotalCreditTxnAmount":0,

                              "monthlyTotalCreditTxnCount":0,

                              "monthlyTotalDebitTxnAmount":0,

                              "monthlyTotalDebitTxnCount":0,

                              "transactionProfileDescription": "Deposit/Transfer from B/O",

                              "transactionProfileMandatory": true,

                              "transactionProfileTypeId": 4,

                              "transactionProfileTypeName": "DEPOSIT_TRANSFER_FROM_B_O"

              }');

          l_TransactionProfiles_arr.append (l_TransactionProfiles_obj);

          l_TransactionProfiles_obj :=
              JSON_OBJECT_T.parse (
                  '{

                              "maxCreditAmountPerTransaction":0,

                              "maxDebitAmountPerTransaction":0,

                              "monthlyTotalCreditTxnAmount":0,

                              "monthlyTotalCreditTxnCount":0,

                              "monthlyTotalDebitTxnAmount":0,

                              "monthlyTotalDebitTxnCount":0,

                              "transactionProfileDescription": "Others(Please Specify)",

                              "transactionProfileMandatory": true,

                              "transactionProfileTypeId": 5,

                              "transactionProfileTypeName": "OTHER"

              }');

          l_TransactionProfiles_arr.append (l_TransactionProfiles_obj);
          -- END IF;
          -- END LOOP;/**/



        l_TransactionProfiles_data := l_TransactionProfiles_arr.to_string;



        l_request :=
               ' {
     "accountClassId": 3,

	"accountName": "'
            || l_accountName
            || '",

	"accountOpeningChannelId": 2,

	"branchId": 777,

	"businessUnitId": '
            || l_businessUnitId
            || ',

	"ccep": false,

	"channelCode": "AB",

	"companyCode": "",

	"contactAddress": {

		"addressLine": "'
            || l_addressLine
            || '",

		"addressLineTwo": "'
            || l_addressLineTwo
            || '",

		"countryCode": "BD",

		"district": "'
            || l_district
            || '",

		"division": "'
            || l_division
            || '",

		"foreignCity": "",

		"foreignPostOffice": "",

		"foreignState": "",

		"foreignZipCode": "",

		"postCode": "'
            || l_postCode
            || '",

		"state": "'
            || l_state
            || '",

		"upazilla": "'
            || l_upazilla
            || '",

		"zipCode": ""

	},

	"contactInformation": {

		"alternateMobileNumber": "'
            || l_alternateMobileNumber
            || '",

		"countryCode": "88",

		"countryCodeForAlterMobile": "88",

		"email": "'
            || l_email
            || '",

		"email2": "",

		"fax": "",

		"mobileNumber": "'
            || l_mobileNumber
            || '",

		"phoneNumber": "",

		"residencePhoneNumber": "",

		"telex": "",

		"web": "'
            || l_email
            || '"

	},

	"currencyCode": "BDT",

	"customerId": '
            || l_customerId
            || ',

	"debitCard": '
            || l_debitCardFlag
            || ',

	"demandDepositAccountTransactionProfiles":'
            || l_TransactionProfiles_data
            || ',

	"field1": "string",

	"field2": "string",

	"field3": "string",

	"field4": "string",

	"field5": "string",

	"indicativeRate": 0,

	"introducerAccountNumber": "",

	"minorAccount": '
            || l_minorAccount
            || ',

	"nominees": [],

	"openingDate": "'
            || l_openingDate
            || '",

	"otherSystemAccount": false,

	"password": "Cbl$4321",

	"productCode": '
            || l_productCode
            || ',

	"purpose": "",

	"smsRequired": true,
	
	"rmCode":"'
            || vRmCode
            || '",
	"referenceNumber": "'
            || l_referenceNumber
            || '",

	"requestId": "'
            || l_referenceNumber
            || '",
     "accountStatementTypeId": 2,
     
    "statementApplicable": true,
    
    "statementFrequency": "HALF_YEARLY",
    
	"userName": "islamic_agentapp"    
}';

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            API_XML_LOG (pOprType        => 'IW_AC_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => vCustNo,
                         pFileId         => vFileId,
                         pInXMl          => l_request,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/AgentBanking/AccountOpen',
                    p_http_method        => 'POST',
                    p_body               => l_request,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'API Request Fail';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_AC_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_request,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        BEGIN
            API_XML_LOG (pOprType        => 'IW_AC_OPEN',
                         pRefNo          => pAcId,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_request,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;

        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;

        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_AC_OPEN',
                                 pRefNo          => pAcId,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => l_status,
                                 pFileId         => vFileId,
                                 pInXMl          => l_request,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := '[API ERROR]-' || v_resmsg;
            RAISE vMyException;
        ELSE
            pResCode := v_rescode;
            pAcNo := APEX_JSON.get_varchar2 ('accountNumber');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_GET_AC_DETAILS (pAcNo                   VARCHAR2,
                                 pLogId                  VARCHAR2,
                                 pAccountName        OUT VARCHAR2,
                                 pAvailableBalance   OUT VARCHAR2,
                                 pActualBalance      OUT VARCHAR2,
                                 pAccountStatus      OUT VARCHAR2,
                                 pAddressLineOne     OUT VARCHAR2,
                                 pAddressLineTwo     OUT VARCHAR2,
                                 pConatactNumber     OUT VARCHAR2,
                                 pDistrictName       OUT VARCHAR2,
                                 pDivisionName       OUT VARCHAR2,
                                 pPostalCode         OUT VARCHAR2,
                                 pProductCode        OUT VARCHAR2,
                                 pCustomerId         OUT NUMBER,
                                 pBranchCode         OUT VARCHAR2,
                                 pErrorFlag          OUT VARCHAR2,
                                 pErrorMsg           OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        SELECT    'ACI'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;

        pErrorFlag := 'N';

        l_json :=
               '{
                    "accountNumber": "'
            || pAcNo
            || '",
        
                    "channelCode": "AB",
        
                    "clientAddress": "",
        
                    "password": "Cbl$4321",
        
                    "requestId": "'
            || l_referenceNumber
            || '",
        
                    "userName": "islamic_agentapp" 
                    
                    }';



        BEGIN
            API_XML_LOG (pOprType        => 'IW_AC_INQUERY',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/AgentBanking/AccountInquiry',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 30,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_AC_INQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,          --pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_AC_INQUERY',
                         pRefNo          => NULL,
                         pDrAcNo         => pAcNo,                  --pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_AC_INQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pAcNo,
                                 pCrAcNo         => l_status,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := v_resmsg;

            RAISE vMyException;
        ELSE
            pAccountName := APEX_JSON.get_varchar2 ('accountName');

            pAvailableBalance := APEX_JSON.get_varchar2 ('availableBalance');

            pActualBalance := APEX_JSON.get_varchar2 ('actualBalance');

            pAccountStatus := APEX_JSON.get_varchar2 ('accountStatus');

            pCustomerId := APEX_JSON.get_varchar2 ('customerId');

            pBranchCode := APEX_JSON.get_varchar2 ('branchId');

            pAddressLineOne := APEX_JSON.get_varchar2 ('addressLineOne');

            pAddressLineTwo := APEX_JSON.get_varchar2 ('addressLineTwo');

            pConatactNumber := APEX_JSON.get_varchar2 ('conatactNumber');

            pDistrictName := APEX_JSON.get_varchar2 ('districtName');

            pDivisionName := APEX_JSON.get_varchar2 ('divisionName');

            pPostalCode := APEX_JSON.get_varchar2 ('postalCode');

            pProductCode := APEX_JSON.get_varchar2 ('productCode');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_GET_CUST_DETAILS (
        pCustomerId                IN     VARCHAR2,
        pCustomerName                 OUT VARCHAR2,
        pCustomerShortName            OUT VARCHAR2,
        pCustomerType                 OUT VARCHAR2,
        pDateOfBirth                  OUT VARCHAR2,
        pGender                       OUT VARCHAR2,
        pSpouseName                   OUT VARCHAR2,
        pFatherName                   OUT VARCHAR2,
        pMotherName                   OUT VARCHAR2,
        pActive                       OUT VARCHAR2,
        pPresentAddressLine           OUT VARCHAR2,
        pPresentAddressLineTwo        OUT VARCHAR2,
        pPresentDistrictName          OUT VARCHAR2,
        pPermanentAddressLine         OUT VARCHAR2,
        pPermanentAddressLineTwo      OUT VARCHAR2,
        pPermanentDistrictName        OUT VARCHAR2,
        pPermanentPostalCode          OUT VARCHAR2,
        pMobileNo                     OUT VARCHAR2,
        pEmail                        OUT VARCHAR2,
        pOrganizationName             OUT VARCHAR2,
        pOrganizationOwnerType        OUT VARCHAR2,
        pBranchCode                   OUT VARCHAR2,
        pErrorFlag                    OUT VARCHAR2,
        pErrorMsg                     OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT    'CUS'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;



        pErrorFlag := 'N';



        l_json :=
               '{
                    "channelCode": "AB",
                    
                    "clientAddress": "XXX",
                    
                    "customerId": "'
            || pCustomerId
            || '",
                    
                    "password": "Cbl$4321",
                    
                    "requestId": "'
            || l_referenceNumber
            || '",
                    
                    "userName": "islamic_agentapp"
                    
                    }';

        BEGIN
            API_XML_LOG (pOprType        => 'IW_CUS_INQUERY',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustomerId,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/AgentBanking/CustomerInquiryByCustomerId',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CUS_INQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustomerId,    --pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        BEGIN
            API_XML_LOG (pOprType        => 'IW_CUS_INQUERY',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustomerId,            --pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';
            RAISE vMyException;
        END IF;

        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';
            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';
            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';
            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';
            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';
            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';
            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';
            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';
            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';
            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';
            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CUS_INQUERY',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustomerId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := v_resmsg;

            RAISE vMyException;
        ELSE
            pCustomerName := APEX_JSON.get_varchar2 ('customerName');

            pCustomerShortName :=
                APEX_JSON.get_varchar2 ('customerShortName');

            pCustomerType :=
                SUBSTR (APEX_JSON.get_varchar2 ('customerType'), 1, 3);

            pDateOfBirth := APEX_JSON.get_varchar2 ('dateOfBirth');

            pGender := APEX_JSON.get_varchar2 ('gender');

            pSpouseName := APEX_JSON.get_varchar2 ('spouseName');

            pFatherName := APEX_JSON.get_varchar2 ('fatherName');

            pMotherName := APEX_JSON.get_varchar2 ('motherName');

            pActive := APEX_JSON.get_varchar2 ('active');

            pPresentAddressLine :=
                APEX_JSON.get_varchar2 ('presentAddressLine');

            pPresentAddressLineTwo :=
                APEX_JSON.get_varchar2 ('presentAddressLineTwo');

            pPresentDistrictName :=
                APEX_JSON.get_varchar2 ('presentDistrictName');

            pPermanentAddressLine :=
                APEX_JSON.get_varchar2 ('permanentAddressLine');

            pPermanentAddressLineTwo :=
                APEX_JSON.get_varchar2 ('permanentAddressLineTwo');

            pPermanentDistrictName :=
                APEX_JSON.get_varchar2 ('permanentDistrictName');

            pPermanentPostalCode :=
                APEX_JSON.get_varchar2 ('permanentPostalCode');

            pMobileNo := APEX_JSON.get_varchar2 ('mobileNo');

            pEmail := APEX_JSON.get_varchar2 ('email');

            pOrganizationName := APEX_JSON.get_varchar2 ('organizationName');

            pOrganizationOwnerType :=
                APEX_JSON.get_varchar2 ('organizationOwnerType');

            pBranchCode := APEX_JSON.get_varchar2 ('branchId');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_TRANSACTION_API (pTranArray          IN     CLOB,
                                  pDocNumber          IN     VARCHAR2,
                                  pDrAcNo             IN     VARCHAR2,
                                  pCrAcNo             IN     VARCHAR2,
                                  pLogId              IN     VARCHAR2,
                                  pBatchNumber           OUT VARCHAR2,
                                  pRequestDateTime       OUT VARCHAR2,
                                  pResponseDateTime      OUT VARCHAR2,
                                  pRefNo                 OUT VARCHAR2,
                                  pErrorFlag             OUT VARCHAR2,
                                  pErrorMsg              OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);

        vStatus             VARCHAR2 (1024);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        pErrorFlag := 'N';

        BEGIN
            API_XML_LOG (pOprType        => 'IW_TRANSACTION',
                         pRefNo          => pDocNumber,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => pTranArray,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                        vApiUrl || '/AgentBanking/doAbabilBulkTransaction',
                    p_http_method        => 'POST',
                    p_body               => pTranArray,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_TRANSACTION',
                                 pRefNo          => pDocNumber,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => pTranArray,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_TRANSACTION',
                         pRefNo          => pDocNumber,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => pTranArray,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('responseMessage');

            vStatus := APEX_JSON.get_varchar2 ('status');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_TRANSACTION',
                                 pRefNo          => pDocNumber,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF NVL (v_rescode, '0') NOT IN ('100')
        THEN
            pErrorMsg := v_resmsg || '-' || vStatus;

            RAISE vMyException;
        ELSE
            pBatchNumber := APEX_JSON.get_varchar2 ('batchNumber');

            pRequestDateTime := APEX_JSON.get_varchar2 ('requestDateTime');

            pResponseDateTime := APEX_JSON.get_varchar2 ('responseDateTime');

            pRefNo := l_referenceNumber;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_CALLBACK_TRAN_API (
        pBatchNumber                 IN     VARCHAR2,
        pRequestDateTime             IN     VARCHAR2,
        pDocNumber                   IN     VARCHAR2,
        pDrAcNo                      IN     VARCHAR2,
        pCrAcNo                      IN     VARCHAR2,
        pLogId                       IN     VARCHAR2,
        pRefNo                       IN     VARCHAR2,
        pTotalApprovedTransactions      OUT VARCHAR2,
        pTotalFailedTransactions        OUT VARCHAR2,
        pTotalPendingTransactions       OUT VARCHAR2,
        pTotalTransactions              OUT VARCHAR2,
        pErrorFlag                      OUT VARCHAR2,
        pErrorMsg                       OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        l_referenceNumber := pRefNo;

        pErrorFlag := 'N';

        l_json :=
               '{

         "batchNumber": "'
            || pBatchNumber
            || '",
         
         "channelCode": "AB",
         
         "clientAddress": "",
         
         "password": "Cbl$4321",
         
         "requestDate": "'
            || pRequestDateTime
            || '",
         
         "requestId": "'
            || l_referenceNumber
            || '",
         
         "userName": "islamic_agentapp"

         }';

        BEGIN
            API_XML_LOG (pOprType        => 'IW_TRAN_CALLBACK',
                         pRefNo          => pDocNumber,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/AgentBanking/AbabilBulkTransactionInquiry',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_TRAN_CALLBACK',
                                 pRefNo          => pDocNumber,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_TRAN_CALLBACK',
                         pRefNo          => pDocNumber,
                         pDrAcNo         => pDrAcNo,
                         pCrAcNo         => pCrAcNo,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => pLogId,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('responseMessage');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_TRAN_CALLBACK',
                                 pRefNo          => pDocNumber,
                                 pDrAcNo         => pDrAcNo,
                                 pCrAcNo         => pCrAcNo,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => pLogId,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := v_resmsg;

            RAISE vMyException;
        ELSE
            pTotalApprovedTransactions :=
                APEX_JSON.get_varchar2 ('totalApprovedTransactions');

            pTotalFailedTransactions :=
                APEX_JSON.get_varchar2 ('totalFailedTransactions');

            pTotalPendingTransactions :=
                APEX_JSON.get_varchar2 ('totalPendingTransactions');

            pTotalTransactions :=
                APEX_JSON.get_varchar2 ('totalTransactions');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_TRAN_REVERSE_API (pRefNo           IN     VARCHAR2,
                                   pTranReqNo       IN     VARCHAR2,
                                   pRemark          IN     VARCHAR2,
                                   pRequestTime     IN     VARCHAR2, --Transection Response Time
                                   pVoucherNumber      OUT VARCHAR2,
                                   pRequestId          OUT VARCHAR2,
                                   pErrorFlag          OUT VARCHAR2,
                                   pErrorMsg           OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);
        vVoucherNumber      VARCHAR2 (50);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT    'REV'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;



        pErrorFlag := 'N';



        l_json :=
               '{
                   "channelCode": "AB",
                   
                   "originalTransactionReferenceNo": "'
            || pTranReqNo
            || '",
                   
                   "originalTransactionRequestId": "'
            || pTranReqNo
            || '",
                   
                   "password": "Cbl$4321",
                   
                   "referenceNumber": "'
            || pTranReqNo
            || '",
                   
                   "remark": "'
            || pRemark
            || '",
                   
                   "requestDateTime": "'
            || pRequestTime
            || '",
                   
                   "requestId": "'
            || l_referenceNumber
            || '",
                   
                   "userName": "islamic_agentapp"
                   }';



        BEGIN
            API_XML_LOG (pOprType        => 'IW_TRAN_REV',
                         pRefNo          => pRefNo,
                         pDrAcNo         => l_referenceNumber,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                        vApiUrl || '/AgentBanking/AbabilTransactionReversal',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 20,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_TRAN_REV',
                                 pRefNo          => pRefNo,
                                 pDrAcNo         => l_referenceNumber,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        BEGIN
            API_XML_LOG (pOprType        => 'IW_TRAN_REV',
                         pRefNo          => pRefNo,
                         pDrAcNo         => l_referenceNumber,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;


        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';
            RAISE vMyException;
        END IF;

        BEGIN
            APEX_JSON.parse (l_clob);
            v_rescode := APEX_JSON.get_varchar2 ('responseCode');
            v_resmsg :=
                   'Error From API:'
                || APEX_JSON.get_varchar2 ('responseMessage')
                || '['
                || APEX_JSON.get_varchar2 ('message')
                || ']';
            vVoucherNumber := APEX_JSON.get_varchar2 ('voucherNumber');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_TRAN_REV',
                                 pRefNo          => NULL,
                                 pDrAcNo         => NULL,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;



        IF NVL (v_rescode, '0') NOT IN ('100')
        THEN
            pErrorMsg := v_resmsg;
            pVoucherNumber := vVoucherNumber;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_DPS_OPEN_API (pLinkAcNo           IN     VARCHAR2,
                               pInstalmentAmount   IN     NUMBER,
                               pTenor              IN     NUMBER,
                               pTenorType          IN     VARCHAR2,
                               pProductCode        IN     VARCHAR2,
                               pDpsAcNo               OUT VARCHAR2,
                               pErrorFlag             OUT VARCHAR2,
                               pErrorMsg              OUT VARCHAR2)
    IS
        vFileId                   NUMBER;

        vApiUrl                   VARCHAR2 (1024);

        vMyException              EXCEPTION;

        pOracleMessage            VARCHAR2 (1024);

        l_json                    CLOB;

        vErrorMsg                 VARCHAR2 (1024);

        l_clob                    CLOB;

        v_rescode                 VARCHAR2 (10);

        v_resmsg                  VARCHAR2 (1024);

        l_status                  VARCHAR2 (1024);

        l_referenceNumber         VARCHAR2 (1024);

        l_addressLine             VARCHAR2 (1024);

        l_addressLineTwo          VARCHAR2 (1024);

        l_district                VARCHAR2 (100);

        l_division                VARCHAR2 (100);

        l_postCode                VARCHAR2 (100);

        l_state                   VARCHAR2 (100);

        l_upazilla                VARCHAR2 (100);

        l_alternateMobileNumber   VARCHAR2 (100);

        l_email                   VARCHAR2 (100);

        l_mobileNumber            VARCHAR2 (100);

        l_customerId              VARCHAR2 (100);

        l_debitCardFlag           VARCHAR2 (10);

        l_accountName             VARCHAR2 (1024);
        vCustCat                  VARCHAR2 (100);

        vCustNo                   NUMBER;

        vAcTypeId                 NUMBER;

        vTenorType                VARCHAR2 (100);

        vStatementFrequency       VARCHAR2 (100);

        l_minorAccount            VARCHAR2 (100);

        l_businessUnitId          NUMBER;

        l_openingDate             VARCHAR2 (100);
        l_ageClassification       VARCHAR2 (100);
        l_productCode             NUMBER;
        vGlSubHeadCode            NUMBER;
        vRmCode                   VARCHAR2 (100);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        SELECT    'DPS'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;

        pErrorFlag := 'N';

        IF pTenorType = 'M'
        THEN
            vTenorType := 'MONTHS';

            vStatementFrequency := 'MONTHLY';
        ELSIF pTenorType = 'D'
        THEN
            vTenorType := 'DAYS';

            vStatementFrequency := 'DAILY';
        ELSIF pTenorType = 'Y'
        THEN
            vTenorType := 'YEARS';

            vStatementFrequency := 'YEARLY';
        END IF;

        vStatementFrequency := 'HALF_YEARLY';

        BEGIN
            SELECT a.AC_TITLE
                       AC_TITLE,
                   b.cust_code
                       cust_id,
                   b.cust_no,
                   b.MOBILE_NO2,
                   b.MAIL_ID,
                   b.MOBILE_NO,
                   DECODE (a.DEBIT_CARD,  'N', 'false',  'Y', 'true'),
                   DECODE (b.AGN_TYPE,
                           'INM', 'true',
                           'JNM', 'true',
                           'false'),
                   '2022-06-12',            --TO_CHAR (SYSDATE, 'YYYY-MM-DD'),
                   c.GL_SUB_HEAD_CODE,
                   8, ----DECODE (b.AGN_TYPE,  'INS', 8,  'INM', 8,  0), -- BUSINESS UNIT ID FOR AGENT BANKING = 8 FIXED
                   a.AC_TYPE_ID,
                   b.AGN_TYPE,
                   a.RM_CODE
              INTO l_accountName,
                   l_customerId,
                   vCustNo,
                   l_alternateMobileNumber,
                   l_email,
                   l_mobileNumber,
                   l_debitCardFlag,
                   l_minorAccount,
                   l_openingDate,
                   l_productCode,
                   l_businessUnitId,
                   vAcTypeId,
                   vCustCat,
                   vRmCode
              FROM EMOB.MB_ACCOUNT_MST   a,
                   EMOB.MB_CUSTOMER_MST  b,
                   EMOB.MB_PRODUCT_MST   C
             WHERE     TRIM (AC_NO) = TRIM (pLinkAcNo)
                   AND A.AC_TYPE_ID = C.AC_TYPE_ID
                   AND a.cust_no = b.cust_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Account Information Finding Problem.';

                RAISE vMyException;
        END;



        BEGIN
            SELECT a.ADD_LINE1         L1,
                   a.ADD_LINE2         L2,
                   a.POSTAL_CODE       PC,
                   c.IW_SHORT_CODE     CITY_CO,
                   d.IW_SHORT_CODE     DIVI_CO,
                   d.IW_SHORT_CODE     STATE_CO,
                   e.SHORT_CODE        UPA
              INTO l_addressLine,
                   l_addressLineTwo,
                   l_postCode,
                   l_district,
                   l_division,
                   l_state,
                   l_upazilla
              FROM EMOB.MB_ADDRESS_MST   a,
                   EMOB.ST_ADDRESS_TYPE  b,
                   emob.MB_CITY_INFO     c,
                   emob.MB_STATE_INFO    d,
                   EMOB.IW_UPAZILA       e
             WHERE     ref_no = vCustNo
                   AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                   AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                   AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                   AND a.UPAZILA_CODE = e.ID
                   AND c.STATE_IW_ID = d.IW_ID
                   AND c.IW_ID = e.DISTRICT_ID
                   AND a.PREF_ADDR = 'Y';
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Account Address Info. Finding Problem.';

                RAISE vMyException;
        END;

        IF vCustCat = 'INM'
        THEN
            l_ageClassification := 'MINOR';
        ELSE
            l_ageClassification := 'MAJOR';
        END IF;

        ----Newly add for Scheme code---

        BEGIN
            SELECT GL_SUB_HEAD_CODE
              INTO vGlSubHeadCode
              FROM emob.MB_PRODUCT_MST
             WHERE AC_TYPE_ID = TRIM (pProductCode);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Product SubHead not Found or Not Matched.';



                RAISE vMyException;
        END;



        l_json :=
               '{

                "accountClassId": 3,
            
                "accountName": "'
            || l_accountName
            || '",
            
                "accountOpeningChannelId": 2,
            
                "accountStatementTypeId": 2,
            
                "autoCloseAllowed": false,
            
                "autoStandingInstructionCreate": true,
            
                "branchId": 777,
                
                "ageClassification": "'
            || l_ageClassification
            || '",
            
                "businessUnitId": '
            || l_businessUnitId
            || ',
            
                "ccep": false,
            
                "channelCode": "AB",
            
                "companyCode": "",
            
                "contactAddress": {
            
                    "addressLine": "'
            || l_addressLine
            || '",
            
                    "addressLineTwo": "'
            || l_addressLineTwo
            || '",
            
                    "countryCode": "BD",
            
                    "district": "'
            || l_district
            || '",
            
                    "division": "'
            || l_division
            || '",
            
                    "foreignCity": "",
            
                    "foreignPostOffice": "",
            
                    "foreignState": "",
            
                    "foreignZipCode": "",
            
                    "postCode": "'
            || l_postCode
            || '",
            
                    "state": "'
            || l_state
            || '",
            
                    "upazilla": "'
            || l_upazilla
            || '",
            
                    "zipCode": ""
            
                },
            
                "contactInformation": {
            
                    "alternateMobileNumber": "'
            || l_alternateMobileNumber
            || '",
            
                    "countryCode": "88",
            
                    "countryCodeForAlterMobile": "88",
            
                    "email": "'
            || l_email
            || '",
            
                    "email2": "",
            
                    "fax": "",
            
                    "mobileNumber": "'
            || l_mobileNumber
            || '",
            
                    "phoneNumber": "",
            
                    "residencePhoneNumber": "",
            
                    "telex": "",
            
                    "web": "'
            || l_email
            || '"
            
                },
            
                "currencyCode": "BDT",
            
                "customerId": '
            || l_customerId
            || ',
            
                "encashmentAccountNumber": "",
            
                "field1": "",
            
                "field2": "",
            
                "field3": "",
            
                "field4": "",
            
                "field5": "",
            
                "fundingAccountNumber": "'
            || pLinkAcNo
            || '",
            
                "fundingAccountType": "CASA",
            
                "indicativeRate": 0,
            
                "instalmentAmount": '
            || pInstalmentAmount
            || ',
            
                "introducerAccountNumber": "",
            
                "minorAccount": '
            || l_minorAccount
            || ',
            
                "nominees": [],
            
                "openingDate": "'
            || l_openingDate
            || '",
            
                "otherSystemAccount": false,
            
                "password": "Cbl$4321",
            
                "productCode": "'
            || vGlSubHeadCode
            || '",
            
                "purpose": "",
            
                "relationshipManager": "'
            || vRmCode
            || '",
            
                "requestId": "'
            || l_referenceNumber
            || '",
            
                "statementFrequency": "'
            || vStatementFrequency
            || '",
            
                "tenor": '
            || pTenor
            || ',
            
                "tenorType": "'
            || vTenorType
            || '",
                
                "casaAccount": "'
            || pLinkAcNo
            || '",
                        
                "statementApplicable":true,
                
                "isNominee":true,
                
                "userName": "islamic_agentapp"
                
                }';

        BEGIN
            API_XML_LOG (pOprType        => 'IW_DPS',
                         pRefNo          => l_referenceNumber,
                         pDrAcNo         => pLinkAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/AgentBanking/DPSAccountOpen',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_DPS',
                                 pRefNo          => l_referenceNumber,
                                 pDrAcNo         => pLinkAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        BEGIN
            API_XML_LOG (pOprType        => 'IW_DPS',
                         pRefNo          => l_referenceNumber,
                         pDrAcNo         => pLinkAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg :=
                   APEX_JSON.get_varchar2 ('responseMessage')
                || ':'
                || APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_DPS',
                                 pRefNo          => l_referenceNumber,
                                 pDrAcNo         => pLinkAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API: ' || v_resmsg;

            RAISE vMyException;
        ELSE
            pDpsAcNo := APEX_JSON.get_varchar2 ('accountNumber');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_FD_OPEN_API (pLinkAcNo         IN     VARCHAR2,
                              pInitialDeposit   IN     NUMBER,
                              pTenor            IN     NUMBER,
                              pTenorType        IN     VARCHAR2,
                              pProductCode      IN     VARCHAR2,
                              pDpsAcNo             OUT VARCHAR2,
                              pErrorFlag           OUT VARCHAR2,
                              pErrorMsg            OUT VARCHAR2)
    IS
        vFileId                   NUMBER;

        vApiUrl                   VARCHAR2 (1024);

        vMyException              EXCEPTION;

        pOracleMessage            VARCHAR2 (1024);

        l_json                    CLOB;

        vErrorMsg                 VARCHAR2 (1024);

        l_clob                    CLOB;

        v_rescode                 VARCHAR2 (10);

        v_resmsg                  VARCHAR2 (1024);

        l_status                  VARCHAR2 (1024);

        l_referenceNumber         VARCHAR2 (1024);

        l_addressLine             VARCHAR2 (1024);

        l_addressLineTwo          VARCHAR2 (1024);

        l_district                VARCHAR2 (100);

        l_division                VARCHAR2 (100);

        l_postCode                VARCHAR2 (100);

        l_state                   VARCHAR2 (100);

        l_upazilla                VARCHAR2 (100);

        l_alternateMobileNumber   VARCHAR2 (100);

        l_email                   VARCHAR2 (100);

        l_mobileNumber            VARCHAR2 (100);

        l_customerId              VARCHAR2 (100);

        l_debitCardFlag           VARCHAR2 (10);

        l_accountName             VARCHAR2 (1024);

        vCustNo                   NUMBER;

        vAcTypeId                 NUMBER;

        vTenorType                VARCHAR2 (100);

        vStatementFrequency       VARCHAR2 (100);

        l_minorAccount            VARCHAR2 (100);

        l_businessUnitId          NUMBER;

        l_openingDate             VARCHAR2 (100);

        l_productCode             NUMBER;

        l_Age                     NUMBER;

        l_ageClassification       VARCHAR2 (10);

        l_renewalOption           VARCHAR2 (10);

        l_autoRenewalOption       VARCHAR2 (10);

        vGlSubHeadCode            NUMBER;

        vCustCat                  VARCHAR2 (10);

        vRmCode                   VARCHAR2 (100);
        ---Added by MIAZE---
        vFixedType                VARCHAR2 (10);

        l_autoCloseAllowed        VARCHAR2 (10);

        l_EnCashMentAccount       VARCHAR2 (100);

        vRenewalTenor             VARCHAR2 (100);

        l_RenewalOptiontxt        VARCHAR2 (100) := NULL;

        l_profitPostingAc         VARCHAR2 (100) := NULL;
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT    'FDR'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;



        pErrorFlag := 'N';



        IF pTenorType = 'M'
        THEN
            vTenorType := 'MONTHS';

            vStatementFrequency := 'MONTHLY';
        ELSIF pTenorType = 'D'
        THEN
            vTenorType := 'DAYS';

            vStatementFrequency := 'DAILY';
        ELSIF pTenorType = 'Y'
        THEN
            vTenorType := 'YEARS';

            vStatementFrequency := 'YEARLY';
        END IF;

        vStatementFrequency := 'HALF_YEARLY';

        BEGIN
            SELECT a.AC_TITLE
                       AC_TITLE,
                   b.cust_code
                       cust_id,
                   b.cust_no,
                   b.MOBILE_NO2,
                   b.MAIL_ID,
                   b.MOBILE_NO,
                   DECODE (a.DEBIT_CARD,  'N', 'false',  'Y', 'true'),
                   DECODE (b.AGN_TYPE,
                           'INM', 'true',
                           'JNM', 'true',
                           'false'),
                   '2022-06-12', --TO_CHAR (SYSDATE, 'YYYY-MM-DD'),---fixed default date for test
                   c.GL_SUB_HEAD_CODE,
                   8, ---DECODE (b.AGN_TYPE,  'INS', 8,  'INM', 8,  0), -- BUSINESS UNIT ID FOR AGENT BANKING = 8 FIXED
                   a.AC_TYPE_ID,
                   TRUNC (
                         MONTHS_BETWEEN (
                             TO_DATE (SYSDATE, 'DD/MM/RRRR'),
                             TO_DATE (TO_CHAR (CUST_DOB, 'DD/MM/YYYY'),
                                      'DD/MM/RRRR'))
                       / 12),
                   --NVL (RENEW_OPTION, 'N'),
                   b.AGN_TYPE,
                   a.RM_CODE
              --c.FIXED_RENEW --- Two Type of Fixed Renew P- only Principal and M- for Both

              INTO l_accountName,
                   l_customerId,
                   vCustNo,
                   l_alternateMobileNumber,
                   l_email,
                   l_mobileNumber,
                   l_debitCardFlag,
                   l_minorAccount,
                   l_openingDate,
                   l_productCode,
                   l_businessUnitId,
                   vAcTypeId,
                   l_Age,
                   --l_renewalOption,
                   vCustCat,
                   vRmCode
              --vFixedType
              FROM EMOB.MB_ACCOUNT_MST   a,
                   EMOB.MB_CUSTOMER_MST  b,
                   EMOB.MB_PRODUCT_MST   C
             WHERE     TRIM (AC_NO) = TRIM (pLinkAcNo)
                   AND A.AC_TYPE_ID = C.AC_TYPE_ID
                   AND a.cust_no = b.cust_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Account Information Finding Problem.';
                RAISE vMyException;
        END;



        ----Newly add for Scheme code MIAZE---

        BEGIN
            SELECT GL_SUB_HEAD_CODE, NVL (RENEW_OPTION, 'N'), FIXED_RENEW --- Two Type of Fixed Renew P- only Principal and M- for Both
              INTO vGlSubHeadCode, l_renewalOption, vFixedType
              FROM emob.MB_PRODUCT_MST
             WHERE AC_TYPE_ID = TRIM (pProductCode);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Product SubHead not Found or Not Matched.';
                RAISE vMyException;
        END;



        BEGIN
            SELECT a.ADD_LINE1         L1,
                   a.ADD_LINE2         L2,
                   a.POSTAL_CODE       PC,
                   c.IW_SHORT_CODE     CITY_CO,
                   d.IW_SHORT_CODE     DIVI_CO,
                   d.IW_SHORT_CODE     STATE_CO,
                   e.SHORT_CODE        UPA
              INTO l_addressLine,
                   l_addressLineTwo,
                   l_postCode,
                   l_district,
                   l_division,
                   l_state,
                   l_upazilla
              FROM EMOB.MB_ADDRESS_MST   a,
                   EMOB.ST_ADDRESS_TYPE  b,
                   emob.MB_CITY_INFO     c,
                   emob.MB_STATE_INFO    d,
                   EMOB.IW_UPAZILA       e
             WHERE     ref_no = vCustNo
                   AND a.ADDRESS_TYPE = b.ADDRESS_TYPE
                   AND TRIM (a.CITY) = TRIM (c.CITY_CODE)
                   AND TRIM (a.STATE) = TRIM (d.STATE_CODE)
                   AND a.UPAZILA_CODE = e.ID
                   AND c.STATE_IW_ID = d.IW_ID
                   AND c.IW_ID = e.DISTRICT_ID
                   AND a.PREF_ADDR = 'Y';
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Account Address Info. Finding Problem.';

                RAISE vMyException;
        END;



        IF vCustCat = 'INM'
        THEN
            l_ageClassification := 'MINOR';
        ELSE
            l_ageClassification := 'MAJOR';
        END IF;

        IF l_renewalOption = 'N'
        THEN
            l_RenewalOptiontxt := NULL;
            l_profitPostingAc := NULL;
            l_autoRenewalOption := 'false';
            l_autoCloseAllowed := 'true';
            l_EnCashMentAccount := TRIM (pLinkAcNo);
        ELSIF l_renewalOption = 'U' AND vFixedType = 'M'
        THEN                                   --Both Principal and Interest--
            l_autoRenewalOption := 'true';
            l_autoCloseAllowed := 'false';
            l_EnCashMentAccount := NULL;
            l_profitPostingAc := NULL;
            l_RenewalOptiontxt := 'FULL_BALANCE';
        ELSIF l_renewalOption = 'U' AND vFixedType = 'P'
        THEN                                                --Principal ONLY--
            l_autoRenewalOption := 'true';
            l_autoCloseAllowed := 'false';
            l_EnCashMentAccount := NULL;
            l_RenewalOptiontxt := 'PRINCIPAL_BALANCE';
            l_profitPostingAc := TRIM (pLinkAcNo);
        END IF;

        IF l_renewalOption = 'U'
        THEN
            vRenewalTenor := pTenor;
        END IF;

        l_json :=
               '{      
               "accountClassId": 3,
            
              "accountName": "'
            || l_accountName
            || '",
            
              "accountOpeningChannelId": 2,
            
              "ageClassification": "'
            || l_ageClassification
            || '",
            
              "autoCloseAllowed": '
            || l_autoCloseAllowed
            || ',
            
              "autoRenewAllowed": '
            || l_autoRenewalOption
            || ',
            
              "branchId": 777,
            
              "businessUnitId": '
            || l_businessUnitId
            || ',
            
              "ccep": false,
            
              "channelCode": "AB",
            
              "companyCode": "",

          "contactAddress": {
            
              "addressLine": "'
            || l_addressLine
            || '",
            
              "addressLineTwo": "'
            || l_addressLineTwo
            || '",
            
              "countryCode": "BD",
            
              "district": "'
            || l_district
            || '",
            
              "division": "'
            || l_division
            || '",
            
              "foreignCity": "",
            
              "foreignPostOffice": "",
            
              "foreignState": "",
            
              "foreignZipCode": "",
            
              "postCode": "'
            || l_postCode
            || '",
            
              "state": "'
            || l_state
            || '",
            
              "upazilla": "'
            || l_upazilla
            || '",
            
              "zipCode": ""
              
             },
            

           "contactInformation": {
            
              "alternateMobileNumber": "'
            || l_alternateMobileNumber
            || '",
            
              "countryCode": "88",
            
              "countryCodeForAlterMobile": "88",
            
              "email": "'
            || l_email
            || '",
            
              "email2": "",
            
              "fax": "",
            
              "mobileNumber": "'
            || l_mobileNumber
            || '",
            
              "phoneNumber": "",
            
              "residencePhoneNumber": "",
            
              "telex": "",
            
              "web": "'
            || l_email
            || '"
            
            },
            
            "currencyCode": "BDT",
            
            "field1": "",
            
            "field2": "",
            
            "field3": "",
            
            "field4": "",
            
            "field5": "",
            
            "fundingAccountNumber": "'
            || pLinkAcNo
            || '",

            "fundingAccountType": "CASA",
            
            "indicativeRate": 0,
            
            "initialDeposit": '
            || pInitialDeposit
            || ',
            
            "introducerAccountNumber": "",
            
            "linkAccountNumber": "'
            || pLinkAcNo
            || '",
            
            "linkAccountType": "CASA",
            
            "minorAccount": '
            || l_minorAccount
            || ',
            
            "nominees": [],
            
            "openingDate": "'
            || l_openingDate
            || '",
            
            "otherSystemAccount": false,
            
            "password": "Cbl$4321",
            
            "productCode": "'
            || vGlSubHeadCode
            || '",
            
            "purpose": "",
            
            "renewalOption": "'
            || l_RenewalOptiontxt
            || '",
            
            "renewalPrincipal": null,
            
            "customerId": '
            || l_customerId
            || ',
            
            "requestId": "'
            || l_referenceNumber
            || '",
            
            "referenceNumber": "'
            || l_referenceNumber
            || '",
            
            "taxRatePercent": null,
            
            "tenor": '
            || pTenor
            || ',
            
            "tenorType": "'
            || vTenorType
            || '",
            
            "renewalTenor":'
            || CASE
                   WHEN vRenewalTenor IS NULL THEN 'null'
                   ELSE vRenewalTenor
               END
            || ',
            
            "casaAccount": "'
            || pLinkAcNo
            || '",
                    
            "accountStatementTypeId": 2,
            
            "relationshipManager": "'
            || vRmCode
            || '",
            
            "statementFrequency": "'
            || vStatementFrequency
            || '",
            
            "encashmentAccountNumber": "'
            || l_EnCashMentAccount
            || '",
            
            "profitPostingAccount":"'
            || l_profitPostingAc
            || '",
            
            "nomineeForCasa":true,
            
            "userName": "islamic_agentapp"
                
    }';

        ----Api addd new field------

        BEGIN
            API_XML_LOG (pOprType        => 'IW_FD',
                         pRefNo          => l_referenceNumber,
                         pDrAcNo         => pLinkAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/AgentBanking/FDRAccountOpen',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 15,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    API_XML_LOG (pOprType        => 'IW_FD',
                                 pRefNo          => l_referenceNumber,
                                 pDrAcNo         => pLinkAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        BEGIN
            API_XML_LOG (pOprType        => 'IW_FD',
                         pRefNo          => l_referenceNumber,
                         pDrAcNo         => pLinkAcNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg :=
                   APEX_JSON.get_varchar2 ('responseMessage')
                || ' :'
                || APEX_JSON.get_varchar2 ('message');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_FD',
                                 pRefNo          => l_referenceNumber,
                                 pDrAcNo         => pLinkAcNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API: ' || v_resmsg;

            RAISE vMyException;
        ELSE
            pDpsAcNo := APEX_JSON.get_varchar2 ('accountNumber');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_DDUP_CHECK_API (pNidNo        IN     VARCHAR2,
                                 pBranchId        OUT VARCHAR2,
                                 pCustomerId      OUT VARCHAR2,
                                 pErrorFlag       OUT VARCHAR2,
                                 pErrorMsg        OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT    'DDP'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;



        pErrorFlag := 'N';



        l_json := '{
                    "channelCode": "AB",
                    
                    "nid": "' || pNidNo || '",
                    
                    "password": "Cbl$4321",
                    
                    "userName": "islamic_agentapp"
                    
                    }';



        BEGIN
            API_XML_LOG (pOprType        => 'IW_DDUP',
                         pRefNo          => l_referenceNumber,
                         pDrAcNo         => pNidNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/Ababil/DedupeCheck',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_DDUP',
                                 pRefNo          => l_referenceNumber,
                                 pDrAcNo         => pNidNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_DDUP',
                         pRefNo          => l_referenceNumber,
                         pDrAcNo         => pNidNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('responseMessage');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_DDUP',
                                 pRefNo          => l_referenceNumber,
                                 pDrAcNo         => pNidNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API: ' || v_resmsg;

            RAISE vMyException;
        ELSE
            pBranchId := APEX_JSON.get_varchar2 ('branchId');

            pCustomerId := APEX_JSON.get_varchar2 ('customerId');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;



    PROCEDURE IW_GET_CUST_DETAILS_BY_CUST_ID (
        pCustId              IN     VARCHAR2,
        pCustomerName           OUT VARCHAR2,
        pCustomerShortName      OUT VARCHAR2,
        pCustomerType           OUT VARCHAR2,
        pActive                 OUT VARCHAR2,
        pMobileNo               OUT VARCHAR2,
        pEmail                  OUT VARCHAR2,
        pBranchCode             OUT VARCHAR2,
        pErrorFlag              OUT VARCHAR2,
        pErrorMsg               OUT VARCHAR2)
    IS
        vFileId             NUMBER;

        vApiUrl             VARCHAR2 (1024);

        vMyException        EXCEPTION;

        pOracleMessage      VARCHAR2 (1024);

        l_json              CLOB;

        vErrorMsg           VARCHAR2 (1024);

        l_clob              CLOB;

        v_rescode           VARCHAR2 (10);

        v_resmsg            VARCHAR2 (1024);

        l_status            VARCHAR2 (1024);

        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';



        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;



        SELECT    'CUS'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;



        pErrorFlag := 'N';



        l_json := '{

                    "userName":"islamic_agentapp",
                
                    "password":"Cbl$4321",
                
                    "clientAddress":"",
                
                    "channelCode":"AB",
                
                    "requestId":"' || l_referenceNumber || '",
                
                    "customerId":"' || pCustId || '"
                
                }';



        BEGIN
            API_XML_LOG (pOprType        => 'IW_CUS_INQUERY_BY_ID',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustId,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => NULL,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';

        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';



        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/AgentBanking/CustomerInquiryByCustomerId',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CUS_INQUERY_BY_ID',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,        --pCustNo,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;



        BEGIN
            API_XML_LOG (pOprType        => 'IW_CUS_INQUERY_BY_ID',
                         pRefNo          => NULL,
                         pDrAcNo         => pCustId,                --pCustNo,
                         pCrAcNo         => NULL,
                         pFileId         => vFileId,
                         pInXMl          => l_json,
                         pOutXml         => l_clob,
                         pDbMessage      => pOracleMessage,
                         pErrorMessage   => pErrorMsg,
                         pLogId          => NULL,
                         pNotifyFlag     => pErrorFlag,
                         pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;



        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('responseMessage');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    API_XML_LOG (pOprType        => 'IW_CUS_INQUERY_BY_ID',
                                 pRefNo          => NULL,
                                 pDrAcNo         => pCustId,
                                 pCrAcNo         => NULL,
                                 pFileId         => vFileId,
                                 pInXMl          => l_json,
                                 pOutXml         => l_clob,
                                 pDbMessage      => pOracleMessage,
                                 pErrorMessage   => pErrorMsg,
                                 pLogId          => NULL,
                                 pNotifyFlag     => pErrorFlag,
                                 pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;



                RAISE vMyException;
        END;



        IF v_rescode NOT IN ('100')
        THEN
            pErrorMsg := v_resmsg;

            RAISE vMyException;
        ELSE
            pCustomerName := APEX_JSON.get_varchar2 ('name');

            pCustomerShortName := APEX_JSON.get_varchar2 ('shortName');

            pCustomerType := APEX_JSON.get_varchar2 ('customerType');

            pActive := APEX_JSON.get_varchar2 ('active');

            pMobileNo := APEX_JSON.get_varchar2 ('mobileNumber');

            pEmail := APEX_JSON.get_varchar2 ('email');

            pBranchCode := APEX_JSON.get_varchar2 ('branchId');
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END;

    PROCEDURE IW_PROD_RATIO_INQUIRY (productId      IN     VARCHAR2,
                                     pClientRatio      OUT VARCHAR2,
                                     pErrorFlag        OUT VARCHAR2,
                                     pErrorMsg         OUT VARCHAR2)
    IS
        vFileId             NUMBER;
        vApiUrl             VARCHAR2 (1024);
        vMyException        EXCEPTION;
        pOracleMessage      VARCHAR2 (1024);
        l_json              CLOB;
        vErrorMsg           VARCHAR2 (1024);
        l_clob              CLOB;
        v_rescode           VARCHAR2 (10);
        v_resmsg            VARCHAR2 (1024);
        vStatus             VARCHAR2 (1024);
        l_status            VARCHAR2 (1024);
        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'N';

        SELECT    'ISR'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;

        l_json := '{
    "channelCode":"AB",
    "clientAddress":"",
    "productId":"' || productId || '",
    "currency":"BDT",
    "password":"Cbl$4321",
    "requestId":"' || l_referenceNumber || '",
    "userName":"islamic_agentapp"
}';

        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'IW_ISR',
                pRefNo          => l_referenceNumber,
                pDrAcNo         => l_referenceNumber,
                pCrAcNo         => l_referenceNumber,
                pFileId         => vFileId,
                pInXMl          => l_json,
                pOutXml         => NULL,
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => NULL,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                => vApiUrl || '/AgentBanking/ProductRatesInquiry',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'IW_ISR',
                        pRefNo          => l_referenceNumber,
                        pDrAcNo         => l_referenceNumber,
                        pCrAcNo         => l_referenceNumber,
                        pFileId         => vFileId,
                        pInXMl          => l_json,
                        pOutXml         => l_clob,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'IW_ISR',
                pRefNo          => l_referenceNumber,
                pDrAcNo         => l_referenceNumber,
                pCrAcNo         => l_referenceNumber,
                pFileId         => vFileId,
                pInXMl          => l_json,
                pOutXml         => l_clob,
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => NULL,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;

        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;

        BEGIN
            APEX_JSON.parse (l_clob);
            v_rescode := APEX_JSON.get_varchar2 ('responseCode');
            v_resmsg := APEX_JSON.get_varchar2 ('responseMessage');
            pClientRatio := APEX_JSON.get_varchar2 ('clientRatio');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;



                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'IW_ISR',
                        pRefNo          => l_referenceNumber,
                        pDrAcNo         => l_referenceNumber,
                        pCrAcNo         => l_referenceNumber,
                        pFileId         => vFileId,
                        pInXMl          => l_json,
                        pOutXml         => l_clob,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF NVL (v_rescode, '0') NOT IN ('100')
        THEN
            pClientRatio := NVL (pClientRatio, 0);
            pErrorMsg := 'Error From API:' || v_resmsg || '-' || vStatus;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END IW_PROD_RATIO_INQUIRY;

    PROCEDURE IW_DD_AC_DETAILS (pAcNo             IN     VARCHAR2,
                                pSignatureAvail      OUT VARCHAR2,
                                pErrorFlag           OUT VARCHAR2,
                                pErrorMsg            OUT VARCHAR2)
    IS
        vFileId             NUMBER;
        vApiUrl             VARCHAR2 (1024);
        vMyException        EXCEPTION;
        pOracleMessage      VARCHAR2 (1024);
        l_json              CLOB;
        vErrorMsg           VARCHAR2 (1024);
        l_clob              CLOB;
        v_rescode           VARCHAR2 (10);
        v_resmsg            VARCHAR2 (1024);
        vStatus             VARCHAR2 (1024);
        l_status            VARCHAR2 (1024);
        l_referenceNumber   VARCHAR2 (1024);
    BEGIN
        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_IURL' AND STATUS = 'A';

        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;
        pErrorFlag := 'N';

        SELECT    'DDAC'
               || TO_CHAR (SYSDATE, 'YYYYMMDD')
               || SUBSTR (LPAD (EMOB.IW_REF_SQ.NEXTVAL, 8, 0), 1, 8)
          INTO l_referenceNumber
          FROM DUAL;

        l_json := '{
    "channelCode":"AB",
    "clientAddress":"",
    "accountNumber":"' || pAcNo || '",
    "password":"Cbl$4321",
    "requestId":"' || l_referenceNumber || '",
    "userName":"islamic_agentapp"
}';

        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'IW_DDAC',
                pRefNo          => l_referenceNumber,
                pDrAcNo         => pAcNo,
                pCrAcNo         => pAcNo,
                pFileId         => vFileId,
                pInXMl          => l_json,
                pOutXml         => NULL,
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => NULL,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        APEX_WEB_SERVICE.g_request_headers (1).name := 'Content-Type';
        APEX_WEB_SERVICE.g_request_headers (1).VALUE := 'application/json';

        BEGIN
            l_clob :=
                APEX_WEB_SERVICE.make_rest_request (
                    p_url                =>
                           vApiUrl
                        || '/AgentBanking/DemandDepositAccountDetails',
                    p_http_method        => 'POST',
                    p_body               => l_json,
                    p_transfer_timeout   => 10,
                    p_wallet_path        => 'file:/u01/wallets',
                    p_wallet_pwd         => 'citybank123');
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg :=
                    'Request Not Sent to Server - Connectivity Error';
                pOracleMessage := SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'IW_DDAC',
                        pRefNo          => l_referenceNumber,
                        pDrAcNo         => pAcNo,
                        pCrAcNo         => pAcNo,
                        pFileId         => vFileId,
                        pInXMl          => l_json,
                        pOutXml         => l_clob,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        l_status := APEX_WEB_SERVICE.G_STATUS_CODE;

        IF l_status = '400'
        THEN
            pErrorMsg := 'Bad request';

            RAISE vMyException;
        ELSIF l_status = '401'
        THEN
            pErrorMsg := 'Unauthorized';

            RAISE vMyException;
        ELSIF l_status = '403'
        THEN
            pErrorMsg := 'Forbidden';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Resource not found';

            RAISE vMyException;
        ELSIF l_status = '406'
        THEN
            pErrorMsg := 'Not Acceptable';

            RAISE vMyException;
        ELSIF l_status = '404'
        THEN
            pErrorMsg := 'Request Timeout';

            RAISE vMyException;
        ELSIF l_status = '500'
        THEN
            pErrorMsg := 'Internal server error';

            RAISE vMyException;
        ELSIF l_status = '502'
        THEN
            pErrorMsg := 'Bad Gateway';

            RAISE vMyException;
        ELSIF l_status = '503'
        THEN
            pErrorMsg := 'Service Unavailable';

            RAISE vMyException;
        ELSIF l_status = '504'
        THEN
            pErrorMsg := 'Gateway Timeout';

            RAISE vMyException;
        ELSE
            NULL;
        END IF;



        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'IW_DDAC',
                pRefNo          => l_referenceNumber,
                pDrAcNo         => pAcNo,
                pCrAcNo         => pAcNo,
                pFileId         => vFileId,
                pInXMl          => l_json,
                pOutXml         => l_clob,
                pDbMessage      => pOracleMessage,
                pErrorMessage   => pErrorMsg,
                pLogId          => NULL,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => vErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pOracleMessage := SQLERRM;

                pErrorMsg := 'LOG process Calling Problem';

                RAISE vMyException;
        END;



        IF l_clob IS NULL
        THEN
            pErrorMsg := 'No Response From API';

            RAISE vMyException;
        END IF;

        BEGIN
            APEX_JSON.parse (l_clob);

            v_rescode := APEX_JSON.get_varchar2 ('responseCode');

            v_resmsg := APEX_JSON.get_varchar2 ('responseMessage');

            ------0 for False and 1 for True------
            pSignatureAvail :=
                CASE
                    WHEN APEX_JSON.get_varchar2 ('signatureAvailability') =
                         'true'
                    THEN
                        'Y'
                    ELSE
                        'N'
                END;
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'Response Parsing Problem';

                pOracleMessage := SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'IW_DDAC',
                        pRefNo          => l_referenceNumber,
                        pDrAcNo         => pAcNo,
                        pCrAcNo         => pAcNo,
                        pFileId         => vFileId,
                        pInXMl          => l_json,
                        pOutXml         => l_clob,
                        pDbMessage      => pOracleMessage,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => NULL,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => vErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem';

                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF NVL (v_rescode, '0') NOT IN ('100')
        THEN
            pErrorMsg := 'Error From API:' || v_resmsg || '-' || vStatus;

            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END IW_DD_AC_DETAILS;

    PROCEDURE EFT_CALLBACK_API (pBenAcNo      IN     VARCHAR2,
                                pBenAcTitle   IN     VARCHAR2,
                                pEftAmount    IN     VARCHAR2,
                                pTranNo       IN     VARCHAR2,
                                pRoutingNo    IN     VARCHAR2,
                                pLogId        IN     VARCHAR2,
                                pTranDate     IN     DATE,
                                pCbsRefNo        OUT VARCHAR2,
                                pErrorFlag       OUT VARCHAR2,
                                pErrorMsg        OUT VARCHAR2)
    IS
        vOutXml1       XMLTYPE;
        l_envelope     CLOB;
        vApiUrl        VARCHAR2 (1024);
        vOracleMsg     VARCHAR2 (1024);
        vMyException   EXCEPTION;
        vFileId        NUMBER := 0;
        vResCode       VARCHAR2 (1024);
        vResMsg        VARCHAR2 (1024);

        vCbsRefNos     VARCHAR2 (100);
    BEGIN
        pErrorFlag := 'N';

        SELECT PATH_DIR
          INTO vApiUrl
          FROM GUMS.MB_GLOBAL_PATH
         WHERE PATH_CODE = 'CBS_URL' AND STATUS = 'A';


        vFileId := EMOB.API_FILE_ID_SEQ.NEXTVAL;

        l_envelope :=
               '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:axis="http://ws.apache.org/axis2" xmlns:xsd="http://otherbank.city/xsd">
                     <soapenv:Header/>
                     <soapenv:Body>
                        <axis:OtherBankTransactionStatus>
                           <axis:request>
                              <xsd:amount>'
            || pEftAmount
            || '</xsd:amount>
                              <xsd:beneficiaryAccountName>'
            || pBenAcTitle
            || '</xsd:beneficiaryAccountName>
                              <xsd:beneficiaryAccountNumber>'
            || pBenAcNo
            || '</xsd:beneficiaryAccountNumber>
                              <xsd:password>?</xsd:password>
                              <xsd:routingNumber>'
            || pRoutingNo
            || '</xsd:routingNumber>
                              <xsd:transactionFromDate>'
            || TO_CHAR (pTranDate, 'DD-MM-RRRR')
            || '</xsd:transactionFromDate>
                              <xsd:transactionId>'
            || pTranNo
            || '</xsd:transactionId>
                              <xsd:transactionToDate>'
            || TO_CHAR (pTranDate, 'DD-MM-RRRR')
            || '</xsd:transactionToDate>
                              <xsd:userName>gs001</xsd:userName>
                           </axis:request>
                        </axis:OtherBankTransactionStatus>
                     </soapenv:Body>
                  </soapenv:Envelope>';

        BEGIN
            GLOBAL_CBS_ALL_API.API_XML_LOG (pOprType        => 'EFT_CALLBACK',
                                            pRefNo          => pTranNo,
                                            pDrAcNo         => pBenAcNo,
                                            pCrAcNo         => NULL,
                                            pFileId         => vFileId,
                                            pInXMl          => l_envelope,
                                            pOutXml         => NULL,
                                            pDbMessage      => vOracleMsg,
                                            pErrorMessage   => pErrorMsg,
                                            pLogId          => pLogId,
                                            pNotifyFlag     => pErrorFlag,
                                            pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                vOracleMsg := SQLERRM;
                pErrorMsg := 'LOG process Calling Problem';
                RAISE vMyException;
        END;

        IF NVL (pErrorFlag, 'N') = 'F'
        THEN
            RAISE vMyException;
        END IF;



        BEGIN
            vOutXml1 :=
                APEX_WEB_SERVICE.make_request (
                    p_url                => vApiUrl || '/CBLWebServices', --'/cApps/services/CBLWebServices',
                    p_action             => vApiUrl || '/CBLWebServices?wsdl', --'/cApps/services/CBLWebServices?wsdl',
                    p_envelope           => l_envelope,
                    p_transfer_timeout   => 60  /*,
p_wallet_path        => 'file:/u01/wallets',
p_wallet_pwd         => 'citybank123'*/
                                              );
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    EMOB.PRC_TRANSACTION_FAIL_LOG (
                        pDocNum       => pTranNo,
                        pTranType     => 'TRN',
                        pApiError     => 'No Response From CBS Inquiry API',
                        pTranStatus   => 'U');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                pErrorMsg := 'API Request Fail' || SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'EFT_CALLBACK',
                        pRefNo          => pTranNo,
                        pDrAcNo         => pBenAcNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          => l_envelope,
                        pOutXml         => NULL,
                        pDbMessage      => vOracleMsg,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        vOracleMsg := SQLERRM;
                        pErrorMsg := 'LOG process Calling Problem';
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        BEGIN
            EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                pOprType        => 'EFT_CALLBACK',
                pRefNo          => pTranNo,
                pDrAcNo         => pBenAcNo,
                pCrAcNo         => NULL,
                pFileId         => vFileId,
                pInXMl          => l_envelope,
                pOutXml         => vOutXml1.getClobVal (),
                pDbMessage      => vOracleMsg,
                pErrorMessage   => pErrorMsg,
                pLogId          => pLogId,
                pNotifyFlag     => pErrorFlag,
                pNotifyMsg      => pErrorMsg);
        EXCEPTION
            WHEN OTHERS
            THEN
                pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                RAISE vMyException;
        END;

        IF vOutXml1 IS NULL
        THEN
            BEGIN
                EMOB.PRC_TRANSACTION_FAIL_LOG (
                    pDocNum       => pTranNo,
                    pTranType     => 'TRN',
                    pApiError     => 'No Response From CBS Inquiry API',
                    pTranStatus   => 'U');
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            pErrorMsg := 'No Response From Inquiry API';
            RAISE vMyException;
        END IF;

        BEGIN
                        SELECT x.responseCode, x.responseMessage, x.TranRefNo
                          INTO vResCode, vResMsg, vCbsRefNos
                          FROM XMLTABLE (
                                   XMLNAMESPACES (
                                       'http://schemas.xmlsoap.org/soap/envelope/'
                                           AS "soapenv",
                                       'http://ws.apache.org/axis2' AS "ns",
                                       'http://otherbank.city/xsd' AS "ax2182"),
                                   '/soapenv:Envelope/soapenv:Body/ns:OtherBankTransactionStatusResponse/ns:return'
                                   PASSING vOutXml1
                                   COLUMNS responseCode       VARCHAR2 (50) PATH 'ax2182:responseCode',
                                           responseMessage    VARCHAR2 (255) PATH 'ax2182:responseMessage',
                                           TranRefNo          VARCHAR2 (255) PATH 'ax2182:transactionRefNumber')
                               x;
        EXCEPTION
            WHEN OTHERS
            THEN
                BEGIN
                    EMOB.PRC_TRANSACTION_FAIL_LOG (
                        pDocNum       => pTranNo,
                        pTranType     => 'TRN',
                        pApiError     => 'CBS API Response Parsing Problem.',
                        pTranStatus   => 'U');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                pErrorMsg := 'XML Parsing Problem' || SQLERRM;

                BEGIN
                    EMOB.GLOBAL_CBS_ALL_API.API_XML_LOG (
                        pOprType        => 'EFT_CALLBACK',
                        pRefNo          => pTranNo,
                        pDrAcNo         => pBenAcNo,
                        pCrAcNo         => NULL,
                        pFileId         => vFileId,
                        pInXMl          => l_envelope,
                        pOutXml         => vOutXml1.getClobVal (),
                        pDbMessage      => vOracleMsg,
                        pErrorMessage   => pErrorMsg,
                        pLogId          => pLogId,
                        pNotifyFlag     => pErrorFlag,
                        pNotifyMsg      => pErrorMsg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        pErrorMsg := 'LOG process Calling Problem' || SQLERRM;
                        RAISE vMyException;
                END;

                RAISE vMyException;
        END;

        IF vResCode != 100
        THEN
            pErrorMsg := 'CBS Error -' || vResMsg;
            RAISE vMyException;
        END IF;
    EXCEPTION
        WHEN vMyException
        THEN
            pErrorFlag := 'Y';
    END EFT_CALLBACK_API;
END;
/

