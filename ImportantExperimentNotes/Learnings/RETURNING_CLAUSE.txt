The `RETURNING` clause in PL/SQL is used with `INSERT`, `UPDATE`, and `DELETE` statements to retrieve values from the affected rows directly into PL/SQL variables without needing a separate `SELECT` statement. This can improve performance and reduce code complexity, especially when you need the values of automatically generated columns (like `ID`s), modified values, or results of calculations.

### Common Use Cases for the `RETURNING` Clause
- Getting newly inserted `ID`s or other column values in `INSERT`.
- Fetching modified values from `UPDATE`.
- Retrieving deleted row values in `DELETE`.

### Syntax Overview

```sql
INSERT INTO table_name (...) VALUES (...) RETURNING column_name INTO variable_name;
UPDATE table_name SET ... WHERE ... RETURNING column_name INTO variable_name;
DELETE FROM table_name WHERE ... RETURNING column_name INTO variable_name;
```

### Examples of Using the `RETURNING` Clause

#### 1. **Using `RETURNING` with `INSERT` to Get Generated IDs**

Suppose you have a table `employees` with an `employee_id` generated by a sequence, and you want to capture this `ID` upon insertion.

```sql
DECLARE
    v_employee_id employees.employee_id%TYPE;
BEGIN
    INSERT INTO employees (employee_id, first_name, last_name, department_id)
    VALUES (employees_seq.NEXTVAL, 'John', 'Doe', 10)
    RETURNING employee_id INTO v_employee_id;

    DBMS_OUTPUT.PUT_LINE('Inserted employee ID: ' || v_employee_id);
END;
```

In this example:
- `employees_seq.NEXTVAL` generates a new ID.
- `RETURNING employee_id INTO v_employee_id` retrieves the `employee_id` generated by the sequence directly into the `v_employee_id` variable.

#### 2. **Using `RETURNING` with `UPDATE` to Capture Updated Values**

Suppose you want to increase the salary of an employee and capture the new salary after the update.

```sql
DECLARE
    v_new_salary employees.salary%TYPE;
BEGIN
    UPDATE employees
    SET salary = salary * 1.1
    WHERE employee_id = 100
    RETURNING salary INTO v_new_salary;

    DBMS_OUTPUT.PUT_LINE('New Salary: ' || v_new_salary);
END;
```

In this example:
- The `salary` is increased by 10%.
- `RETURNING salary INTO v_new_salary` fetches the updated salary into `v_new_salary`.

#### 3. **Using `RETURNING` with `DELETE` to Retrieve Deleted Row Data**

If you need to log or process data from a row before itâ€™s permanently deleted, use `RETURNING` to retrieve values upon deletion.

```sql
DECLARE
    v_first_name employees.first_name%TYPE;
    v_last_name employees.last_name%TYPE;
BEGIN
    DELETE FROM employees
    WHERE employee_id = 101
    RETURNING first_name, last_name INTO v_first_name, v_last_name;

    DBMS_OUTPUT.PUT_LINE('Deleted Employee: ' || v_first_name || ' ' || v_last_name);
END;
```

In this example:
- The row with `employee_id = 101` is deleted.
- `RETURNING first_name, last_name INTO v_first_name, v_last_name` captures the `first_name` and `last_name` of the deleted employee.

#### 4. **Returning Multiple Rows with BULK COLLECT**

If your `INSERT`, `UPDATE`, or `DELETE` statement affects multiple rows, you can use `RETURNING ... BULK COLLECT INTO` to retrieve data from all affected rows into a collection.

```sql
DECLARE
    TYPE t_emp_id_tab IS TABLE OF employees.employee_id%TYPE;
    v_emp_ids t_emp_id_tab;
BEGIN
    DELETE FROM employees
    WHERE department_id = 30
    RETURNING employee_id BULK COLLECT INTO v_emp_ids;

    FOR i IN 1 .. v_emp_ids.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Deleted Employee ID: ' || v_emp_ids(i));
    END LOOP;
END;
```

In this example:
- Multiple employees are deleted where `department_id = 30`.
- `RETURNING employee_id BULK COLLECT INTO v_emp_ids` stores all deleted `employee_id`s in the `v_emp_ids` collection.

#### 5. **Returning Multiple Columns**

You can also retrieve multiple columns by specifying multiple variables or a record.

```sql
DECLARE
    v_employee_id employees.employee_id%TYPE;
    v_first_name employees.first_name%TYPE;
    v_last_name employees.last_name%TYPE;
BEGIN
    INSERT INTO employees (employee_id, first_name, last_name, department_id)
    VALUES (employees_seq.NEXTVAL, 'Alice', 'Smith', 20)
    RETURNING employee_id, first_name, last_name INTO v_employee_id, v_first_name, v_last_name;

    DBMS_OUTPUT.PUT_LINE('Inserted Employee: ' || v_first_name || ' ' || v_last_name || ' with ID: ' || v_employee_id);
END;
```

In this example:
- The `employee_id`, `first_name`, and `last_name` are captured after the `INSERT` and printed.

### Benefits of the `RETURNING` Clause

- **Performance**: Reduces the need for an additional `SELECT` query after `INSERT`, `UPDATE`, or `DELETE`.
- **Simplicity**: Consolidates the logic into a single SQL operation.
- **Data Integrity**: Immediately retrieves values from the affected rows, ensuring you have the actual data used in the DML operation.

The `RETURNING` clause is powerful in scenarios where you want to minimize round-trips to the database, optimize your DML operations, and retrieve data directly from modified rows.